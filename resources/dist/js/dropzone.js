/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/jquery-ui/ui/version.js":
/*!**********************************************!*\
  !*** ./node_modules/jquery-ui/ui/version.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;( function( factory ) {\n\t\"use strict\";\n\n\tif ( true ) {\n\n\t\t// AMD. Register as an anonymous module.\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\") ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n} )( function( $ ) {\n\"use strict\";\n\n$.ui = $.ui || {};\n\nreturn $.ui.version = \"1.14.1\";\n\n} );\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5LXVpL3VpL3ZlcnNpb24uanM/NDMwOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBLE1BQU0sSUFBMEM7O0FBRWhEO0FBQ0EsRUFBRSxpQ0FBUSxFQUFFLHlFQUFRLEVBQUUsb0NBQUUsT0FBTztBQUFBO0FBQUE7QUFBQSxvR0FBRTtBQUNqQyxFQUFFLE1BQU0sRUFJTjtBQUNGLENBQUM7QUFDRDs7QUFFQTs7QUFFQTs7QUFFQSxDQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2pxdWVyeS11aS91aS92ZXJzaW9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKCBmdW5jdGlvbiggZmFjdG9yeSApIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblxuXHRcdC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cblx0XHRkZWZpbmUoIFsgXCJqcXVlcnlcIiBdLCBmYWN0b3J5ICk7XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBCcm93c2VyIGdsb2JhbHNcblx0XHRmYWN0b3J5KCBqUXVlcnkgKTtcblx0fVxufSApKCBmdW5jdGlvbiggJCApIHtcblwidXNlIHN0cmljdFwiO1xuXG4kLnVpID0gJC51aSB8fCB7fTtcblxucmV0dXJuICQudWkudmVyc2lvbiA9IFwiMS4xNC4xXCI7XG5cbn0gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/jquery-ui/ui/version.js\n");

/***/ }),

/***/ "./node_modules/jquery-ui/ui/widget.js":
/*!*********************************************!*\
  !*** ./node_modules/jquery-ui/ui/widget.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery UI Widget 1.14.1\n * https://jqueryui.com\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license.\n * https://jquery.org/license\n */\n\n//>>label: Widget\n//>>group: Core\n//>>description: Provides a factory for creating stateful widgets with a common API.\n//>>docs: https://api.jqueryui.com/jQuery.widget/\n//>>demos: https://jqueryui.com/widget/\n\n( function( factory ) {\n\t\"use strict\";\n\n\tif ( true ) {\n\n\t\t// AMD. Register as an anonymous module.\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\"), __webpack_require__(/*! ./version */ \"./node_modules/jquery-ui/ui/version.js\") ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n} )( function( $ ) {\n\"use strict\";\n\nvar widgetUuid = 0;\nvar widgetHasOwnProperty = Array.prototype.hasOwnProperty;\nvar widgetSlice = Array.prototype.slice;\n\n$.cleanData = ( function( orig ) {\n\treturn function( elems ) {\n\t\tvar events, elem, i;\n\t\tfor ( i = 0; ( elem = elems[ i ] ) != null; i++ ) {\n\n\t\t\t// Only trigger remove when necessary to save time\n\t\t\tevents = $._data( elem, \"events\" );\n\t\t\tif ( events && events.remove ) {\n\t\t\t\t$( elem ).triggerHandler( \"remove\" );\n\t\t\t}\n\t\t}\n\t\torig( elems );\n\t};\n} )( $.cleanData );\n\n$.widget = function( name, base, prototype ) {\n\tvar existingConstructor, constructor, basePrototype;\n\n\t// ProxiedPrototype allows the provided prototype to remain unmodified\n\t// so that it can be used as a mixin for multiple widgets (#8876)\n\tvar proxiedPrototype = {};\n\n\tvar namespace = name.split( \".\" )[ 0 ];\n\tname = name.split( \".\" )[ 1 ];\n\tif ( name === \"__proto__\" || name === \"constructor\" ) {\n\t\treturn $.error( \"Invalid widget name: \" + name );\n\t}\n\tvar fullName = namespace + \"-\" + name;\n\n\tif ( !prototype ) {\n\t\tprototype = base;\n\t\tbase = $.Widget;\n\t}\n\n\tif ( Array.isArray( prototype ) ) {\n\t\tprototype = $.extend.apply( null, [ {} ].concat( prototype ) );\n\t}\n\n\t// Create selector for plugin\n\t$.expr.pseudos[ fullName.toLowerCase() ] = function( elem ) {\n\t\treturn !!$.data( elem, fullName );\n\t};\n\n\t$[ namespace ] = $[ namespace ] || {};\n\texistingConstructor = $[ namespace ][ name ];\n\tconstructor = $[ namespace ][ name ] = function( options, element ) {\n\n\t\t// Allow instantiation without \"new\" keyword\n\t\tif ( !this || !this._createWidget ) {\n\t\t\treturn new constructor( options, element );\n\t\t}\n\n\t\t// Allow instantiation without initializing for simple inheritance\n\t\t// must use \"new\" keyword (the code above always passes args)\n\t\tif ( arguments.length ) {\n\t\t\tthis._createWidget( options, element );\n\t\t}\n\t};\n\n\t// Extend with the existing constructor to carry over any static properties\n\t$.extend( constructor, existingConstructor, {\n\t\tversion: prototype.version,\n\n\t\t// Copy the object used to create the prototype in case we need to\n\t\t// redefine the widget later\n\t\t_proto: $.extend( {}, prototype ),\n\n\t\t// Track widgets that inherit from this widget in case this widget is\n\t\t// redefined after a widget inherits from it\n\t\t_childConstructors: []\n\t} );\n\n\tbasePrototype = new base();\n\n\t// We need to make the options hash a property directly on the new instance\n\t// otherwise we'll modify the options hash on the prototype that we're\n\t// inheriting from\n\tbasePrototype.options = $.widget.extend( {}, basePrototype.options );\n\t$.each( prototype, function( prop, value ) {\n\t\tif ( typeof value !== \"function\" ) {\n\t\t\tproxiedPrototype[ prop ] = value;\n\t\t\treturn;\n\t\t}\n\t\tproxiedPrototype[ prop ] = ( function() {\n\t\t\tfunction _super() {\n\t\t\t\treturn base.prototype[ prop ].apply( this, arguments );\n\t\t\t}\n\n\t\t\tfunction _superApply( args ) {\n\t\t\t\treturn base.prototype[ prop ].apply( this, args );\n\t\t\t}\n\n\t\t\treturn function() {\n\t\t\t\tvar __super = this._super;\n\t\t\t\tvar __superApply = this._superApply;\n\t\t\t\tvar returnValue;\n\n\t\t\t\tthis._super = _super;\n\t\t\t\tthis._superApply = _superApply;\n\n\t\t\t\treturnValue = value.apply( this, arguments );\n\n\t\t\t\tthis._super = __super;\n\t\t\t\tthis._superApply = __superApply;\n\n\t\t\t\treturn returnValue;\n\t\t\t};\n\t\t} )();\n\t} );\n\tconstructor.prototype = $.widget.extend( basePrototype, {\n\n\t\t// TODO: remove support for widgetEventPrefix\n\t\t// always use the name + a colon as the prefix, e.g., draggable:start\n\t\t// don't prefix for widgets that aren't DOM-based\n\t\twidgetEventPrefix: existingConstructor ? ( basePrototype.widgetEventPrefix || name ) : name\n\t}, proxiedPrototype, {\n\t\tconstructor: constructor,\n\t\tnamespace: namespace,\n\t\twidgetName: name,\n\t\twidgetFullName: fullName\n\t} );\n\n\t// If this widget is being redefined then we need to find all widgets that\n\t// are inheriting from it and redefine all of them so that they inherit from\n\t// the new version of this widget. We're essentially trying to replace one\n\t// level in the prototype chain.\n\tif ( existingConstructor ) {\n\t\t$.each( existingConstructor._childConstructors, function( i, child ) {\n\t\t\tvar childPrototype = child.prototype;\n\n\t\t\t// Redefine the child widget using the same prototype that was\n\t\t\t// originally used, but inherit from the new version of the base\n\t\t\t$.widget( childPrototype.namespace + \".\" + childPrototype.widgetName, constructor,\n\t\t\t\tchild._proto );\n\t\t} );\n\n\t\t// Remove the list of existing child constructors from the old constructor\n\t\t// so the old child constructors can be garbage collected\n\t\tdelete existingConstructor._childConstructors;\n\t} else {\n\t\tbase._childConstructors.push( constructor );\n\t}\n\n\t$.widget.bridge( name, constructor );\n\n\treturn constructor;\n};\n\n$.widget.extend = function( target ) {\n\tvar input = widgetSlice.call( arguments, 1 );\n\tvar inputIndex = 0;\n\tvar inputLength = input.length;\n\tvar key;\n\tvar value;\n\n\tfor ( ; inputIndex < inputLength; inputIndex++ ) {\n\t\tfor ( key in input[ inputIndex ] ) {\n\t\t\tvalue = input[ inputIndex ][ key ];\n\t\t\tif ( widgetHasOwnProperty.call( input[ inputIndex ], key ) && value !== undefined ) {\n\n\t\t\t\t// Clone objects\n\t\t\t\tif ( $.isPlainObject( value ) ) {\n\t\t\t\t\ttarget[ key ] = $.isPlainObject( target[ key ] ) ?\n\t\t\t\t\t\t$.widget.extend( {}, target[ key ], value ) :\n\n\t\t\t\t\t\t// Don't extend strings, arrays, etc. with objects\n\t\t\t\t\t\t$.widget.extend( {}, value );\n\n\t\t\t\t// Copy everything else by reference\n\t\t\t\t} else {\n\t\t\t\t\ttarget[ key ] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn target;\n};\n\n$.widget.bridge = function( name, object ) {\n\tvar fullName = object.prototype.widgetFullName || name;\n\t$.fn[ name ] = function( options ) {\n\t\tvar isMethodCall = typeof options === \"string\";\n\t\tvar args = widgetSlice.call( arguments, 1 );\n\t\tvar returnValue = this;\n\n\t\tif ( isMethodCall ) {\n\n\t\t\t// If this is an empty collection, we need to have the instance method\n\t\t\t// return undefined instead of the jQuery instance\n\t\t\tif ( !this.length && options === \"instance\" ) {\n\t\t\t\treturnValue = undefined;\n\t\t\t} else {\n\t\t\t\tthis.each( function() {\n\t\t\t\t\tvar methodValue;\n\t\t\t\t\tvar instance = $.data( this, fullName );\n\n\t\t\t\t\tif ( options === \"instance\" ) {\n\t\t\t\t\t\treturnValue = instance;\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !instance ) {\n\t\t\t\t\t\treturn $.error( \"cannot call methods on \" + name +\n\t\t\t\t\t\t\t\" prior to initialization; \" +\n\t\t\t\t\t\t\t\"attempted to call method '\" + options + \"'\" );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( typeof instance[ options ] !== \"function\" ||\n\t\t\t\t\t\toptions.charAt( 0 ) === \"_\" ) {\n\t\t\t\t\t\treturn $.error( \"no such method '\" + options + \"' for \" + name +\n\t\t\t\t\t\t\t\" widget instance\" );\n\t\t\t\t\t}\n\n\t\t\t\t\tmethodValue = instance[ options ].apply( instance, args );\n\n\t\t\t\t\tif ( methodValue !== instance && methodValue !== undefined ) {\n\t\t\t\t\t\treturnValue = methodValue && methodValue.jquery ?\n\t\t\t\t\t\t\treturnValue.pushStack( methodValue.get() ) :\n\t\t\t\t\t\t\tmethodValue;\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} else {\n\n\t\t\t// Allow multiple hashes to be passed on init\n\t\t\tif ( args.length ) {\n\t\t\t\toptions = $.widget.extend.apply( null, [ options ].concat( args ) );\n\t\t\t}\n\n\t\t\tthis.each( function() {\n\t\t\t\tvar instance = $.data( this, fullName );\n\t\t\t\tif ( instance ) {\n\t\t\t\t\tinstance.option( options || {} );\n\t\t\t\t\tif ( instance._init ) {\n\t\t\t\t\t\tinstance._init();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$.data( this, fullName, new object( options, this ) );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\treturn returnValue;\n\t};\n};\n\n$.Widget = function( /* options, element */ ) {};\n$.Widget._childConstructors = [];\n\n$.Widget.prototype = {\n\twidgetName: \"widget\",\n\twidgetEventPrefix: \"\",\n\tdefaultElement: \"<div>\",\n\n\toptions: {\n\t\tclasses: {},\n\t\tdisabled: false,\n\n\t\t// Callbacks\n\t\tcreate: null\n\t},\n\n\t_createWidget: function( options, element ) {\n\t\telement = $( element || this.defaultElement || this )[ 0 ];\n\t\tthis.element = $( element );\n\t\tthis.uuid = widgetUuid++;\n\t\tthis.eventNamespace = \".\" + this.widgetName + this.uuid;\n\n\t\tthis.bindings = $();\n\t\tthis.hoverable = $();\n\t\tthis.focusable = $();\n\t\tthis.classesElementLookup = {};\n\n\t\tif ( element !== this ) {\n\t\t\t$.data( element, this.widgetFullName, this );\n\t\t\tthis._on( true, this.element, {\n\t\t\t\tremove: function( event ) {\n\t\t\t\t\tif ( event.target === element ) {\n\t\t\t\t\t\tthis.destroy();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t\tthis.document = $( element.style ?\n\n\t\t\t\t// Element within the document\n\t\t\t\telement.ownerDocument :\n\n\t\t\t\t// Element is window or document\n\t\t\t\telement.document || element );\n\t\t\tthis.window = $( this.document[ 0 ].defaultView || this.document[ 0 ].parentWindow );\n\t\t}\n\n\t\tthis.options = $.widget.extend( {},\n\t\t\tthis.options,\n\t\t\tthis._getCreateOptions(),\n\t\t\toptions );\n\n\t\tthis._create();\n\n\t\tif ( this.options.disabled ) {\n\t\t\tthis._setOptionDisabled( this.options.disabled );\n\t\t}\n\n\t\tthis._trigger( \"create\", null, this._getCreateEventData() );\n\t\tthis._init();\n\t},\n\n\t_getCreateOptions: function() {\n\t\treturn {};\n\t},\n\n\t_getCreateEventData: $.noop,\n\n\t_create: $.noop,\n\n\t_init: $.noop,\n\n\tdestroy: function() {\n\t\tvar that = this;\n\n\t\tthis._destroy();\n\t\t$.each( this.classesElementLookup, function( key, value ) {\n\t\t\tthat._removeClass( value, key );\n\t\t} );\n\n\t\t// We can probably remove the unbind calls in 2.0\n\t\t// all event bindings should go through this._on()\n\t\tthis.element\n\t\t\t.off( this.eventNamespace )\n\t\t\t.removeData( this.widgetFullName );\n\t\tthis.widget()\n\t\t\t.off( this.eventNamespace )\n\t\t\t.removeAttr( \"aria-disabled\" );\n\n\t\t// Clean up events and states\n\t\tthis.bindings.off( this.eventNamespace );\n\t},\n\n\t_destroy: $.noop,\n\n\twidget: function() {\n\t\treturn this.element;\n\t},\n\n\toption: function( key, value ) {\n\t\tvar options = key;\n\t\tvar parts;\n\t\tvar curOption;\n\t\tvar i;\n\n\t\tif ( arguments.length === 0 ) {\n\n\t\t\t// Don't return a reference to the internal hash\n\t\t\treturn $.widget.extend( {}, this.options );\n\t\t}\n\n\t\tif ( typeof key === \"string\" ) {\n\n\t\t\t// Handle nested keys, e.g., \"foo.bar\" => { foo: { bar: ___ } }\n\t\t\toptions = {};\n\t\t\tparts = key.split( \".\" );\n\t\t\tkey = parts.shift();\n\t\t\tif ( parts.length ) {\n\t\t\t\tcurOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );\n\t\t\t\tfor ( i = 0; i < parts.length - 1; i++ ) {\n\t\t\t\t\tcurOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};\n\t\t\t\t\tcurOption = curOption[ parts[ i ] ];\n\t\t\t\t}\n\t\t\t\tkey = parts.pop();\n\t\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\t\treturn curOption[ key ] === undefined ? null : curOption[ key ];\n\t\t\t\t}\n\t\t\t\tcurOption[ key ] = value;\n\t\t\t} else {\n\t\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\t\treturn this.options[ key ] === undefined ? null : this.options[ key ];\n\t\t\t\t}\n\t\t\t\toptions[ key ] = value;\n\t\t\t}\n\t\t}\n\n\t\tthis._setOptions( options );\n\n\t\treturn this;\n\t},\n\n\t_setOptions: function( options ) {\n\t\tvar key;\n\n\t\tfor ( key in options ) {\n\t\t\tthis._setOption( key, options[ key ] );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t_setOption: function( key, value ) {\n\t\tif ( key === \"classes\" ) {\n\t\t\tthis._setOptionClasses( value );\n\t\t}\n\n\t\tthis.options[ key ] = value;\n\n\t\tif ( key === \"disabled\" ) {\n\t\t\tthis._setOptionDisabled( value );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t_setOptionClasses: function( value ) {\n\t\tvar classKey, elements, currentElements;\n\n\t\tfor ( classKey in value ) {\n\t\t\tcurrentElements = this.classesElementLookup[ classKey ];\n\t\t\tif ( value[ classKey ] === this.options.classes[ classKey ] ||\n\t\t\t\t\t!currentElements ||\n\t\t\t\t\t!currentElements.length ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// We are doing this to create a new jQuery object because the _removeClass() call\n\t\t\t// on the next line is going to destroy the reference to the current elements being\n\t\t\t// tracked. We need to save a copy of this collection so that we can add the new classes\n\t\t\t// below.\n\t\t\telements = $( currentElements.get() );\n\t\t\tthis._removeClass( currentElements, classKey );\n\n\t\t\t// We don't use _addClass() here, because that uses this.options.classes\n\t\t\t// for generating the string of classes. We want to use the value passed in from\n\t\t\t// _setOption(), this is the new value of the classes option which was passed to\n\t\t\t// _setOption(). We pass this value directly to _classes().\n\t\t\telements.addClass( this._classes( {\n\t\t\t\telement: elements,\n\t\t\t\tkeys: classKey,\n\t\t\t\tclasses: value,\n\t\t\t\tadd: true\n\t\t\t} ) );\n\t\t}\n\t},\n\n\t_setOptionDisabled: function( value ) {\n\t\tthis._toggleClass( this.widget(), this.widgetFullName + \"-disabled\", null, !!value );\n\n\t\t// If the widget is becoming disabled, then nothing is interactive\n\t\tif ( value ) {\n\t\t\tthis._removeClass( this.hoverable, null, \"ui-state-hover\" );\n\t\t\tthis._removeClass( this.focusable, null, \"ui-state-focus\" );\n\t\t}\n\t},\n\n\tenable: function() {\n\t\treturn this._setOptions( { disabled: false } );\n\t},\n\n\tdisable: function() {\n\t\treturn this._setOptions( { disabled: true } );\n\t},\n\n\t_classes: function( options ) {\n\t\tvar full = [];\n\t\tvar that = this;\n\n\t\toptions = $.extend( {\n\t\t\telement: this.element,\n\t\t\tclasses: this.options.classes || {}\n\t\t}, options );\n\n\t\tfunction bindRemoveEvent() {\n\t\t\tvar nodesToBind = [];\n\n\t\t\toptions.element.each( function( _, element ) {\n\t\t\t\tvar isTracked = $.map( that.classesElementLookup, function( elements ) {\n\t\t\t\t\treturn elements;\n\t\t\t\t} )\n\t\t\t\t\t.some( function( elements ) {\n\t\t\t\t\t\treturn elements.is( element );\n\t\t\t\t\t} );\n\n\t\t\t\tif ( !isTracked ) {\n\t\t\t\t\tnodesToBind.push( element );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tthat._on( $( nodesToBind ), {\n\t\t\t\tremove: \"_untrackClassesElement\"\n\t\t\t} );\n\t\t}\n\n\t\tfunction processClassString( classes, checkOption ) {\n\t\t\tvar current, i;\n\t\t\tfor ( i = 0; i < classes.length; i++ ) {\n\t\t\t\tcurrent = that.classesElementLookup[ classes[ i ] ] || $();\n\t\t\t\tif ( options.add ) {\n\t\t\t\t\tbindRemoveEvent();\n\t\t\t\t\tcurrent = $( $.uniqueSort( current.get().concat( options.element.get() ) ) );\n\t\t\t\t} else {\n\t\t\t\t\tcurrent = $( current.not( options.element ).get() );\n\t\t\t\t}\n\t\t\t\tthat.classesElementLookup[ classes[ i ] ] = current;\n\t\t\t\tfull.push( classes[ i ] );\n\t\t\t\tif ( checkOption && options.classes[ classes[ i ] ] ) {\n\t\t\t\t\tfull.push( options.classes[ classes[ i ] ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( options.keys ) {\n\t\t\tprocessClassString( options.keys.match( /\\S+/g ) || [], true );\n\t\t}\n\t\tif ( options.extra ) {\n\t\t\tprocessClassString( options.extra.match( /\\S+/g ) || [] );\n\t\t}\n\n\t\treturn full.join( \" \" );\n\t},\n\n\t_untrackClassesElement: function( event ) {\n\t\tvar that = this;\n\t\t$.each( that.classesElementLookup, function( key, value ) {\n\t\t\tif ( $.inArray( event.target, value ) !== -1 ) {\n\t\t\t\tthat.classesElementLookup[ key ] = $( value.not( event.target ).get() );\n\t\t\t}\n\t\t} );\n\n\t\tthis._off( $( event.target ) );\n\t},\n\n\t_removeClass: function( element, keys, extra ) {\n\t\treturn this._toggleClass( element, keys, extra, false );\n\t},\n\n\t_addClass: function( element, keys, extra ) {\n\t\treturn this._toggleClass( element, keys, extra, true );\n\t},\n\n\t_toggleClass: function( element, keys, extra, add ) {\n\t\tadd = ( typeof add === \"boolean\" ) ? add : extra;\n\t\tvar shift = ( typeof element === \"string\" || element === null ),\n\t\t\toptions = {\n\t\t\t\textra: shift ? keys : extra,\n\t\t\t\tkeys: shift ? element : keys,\n\t\t\t\telement: shift ? this.element : element,\n\t\t\t\tadd: add\n\t\t\t};\n\t\toptions.element.toggleClass( this._classes( options ), add );\n\t\treturn this;\n\t},\n\n\t_on: function( suppressDisabledCheck, element, handlers ) {\n\t\tvar delegateElement;\n\t\tvar instance = this;\n\n\t\t// No suppressDisabledCheck flag, shuffle arguments\n\t\tif ( typeof suppressDisabledCheck !== \"boolean\" ) {\n\t\t\thandlers = element;\n\t\t\telement = suppressDisabledCheck;\n\t\t\tsuppressDisabledCheck = false;\n\t\t}\n\n\t\t// No element argument, shuffle and use this.element\n\t\tif ( !handlers ) {\n\t\t\thandlers = element;\n\t\t\telement = this.element;\n\t\t\tdelegateElement = this.widget();\n\t\t} else {\n\t\t\telement = delegateElement = $( element );\n\t\t\tthis.bindings = this.bindings.add( element );\n\t\t}\n\n\t\t$.each( handlers, function( event, handler ) {\n\t\t\tfunction handlerProxy() {\n\n\t\t\t\t// Allow widgets to customize the disabled handling\n\t\t\t\t// - disabled as an array instead of boolean\n\t\t\t\t// - disabled class as method for disabling individual parts\n\t\t\t\tif ( !suppressDisabledCheck &&\n\t\t\t\t\t\t( instance.options.disabled === true ||\n\t\t\t\t\t\t$( this ).hasClass( \"ui-state-disabled\" ) ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn ( typeof handler === \"string\" ? instance[ handler ] : handler )\n\t\t\t\t\t.apply( instance, arguments );\n\t\t\t}\n\n\t\t\t// Copy the guid so direct unbinding works\n\t\t\tif ( typeof handler !== \"string\" ) {\n\t\t\t\thandlerProxy.guid = handler.guid =\n\t\t\t\t\thandler.guid || handlerProxy.guid || $.guid++;\n\t\t\t}\n\n\t\t\tvar match = event.match( /^([\\w:-]*)\\s*(.*)$/ );\n\t\t\tvar eventName = match[ 1 ] + instance.eventNamespace;\n\t\t\tvar selector = match[ 2 ];\n\n\t\t\tif ( selector ) {\n\t\t\t\tdelegateElement.on( eventName, selector, handlerProxy );\n\t\t\t} else {\n\t\t\t\telement.on( eventName, handlerProxy );\n\t\t\t}\n\t\t} );\n\t},\n\n\t_off: function( element, eventName ) {\n\t\teventName = ( eventName || \"\" ).split( \" \" ).join( this.eventNamespace + \" \" ) +\n\t\t\tthis.eventNamespace;\n\t\telement.off( eventName );\n\n\t\t// Clear the stack to avoid memory leaks (#10056)\n\t\tthis.bindings = $( this.bindings.not( element ).get() );\n\t\tthis.focusable = $( this.focusable.not( element ).get() );\n\t\tthis.hoverable = $( this.hoverable.not( element ).get() );\n\t},\n\n\t_delay: function( handler, delay ) {\n\t\tfunction handlerProxy() {\n\t\t\treturn ( typeof handler === \"string\" ? instance[ handler ] : handler )\n\t\t\t\t.apply( instance, arguments );\n\t\t}\n\t\tvar instance = this;\n\t\treturn setTimeout( handlerProxy, delay || 0 );\n\t},\n\n\t_hoverable: function( element ) {\n\t\tthis.hoverable = this.hoverable.add( element );\n\t\tthis._on( element, {\n\t\t\tmouseenter: function( event ) {\n\t\t\t\tthis._addClass( $( event.currentTarget ), null, \"ui-state-hover\" );\n\t\t\t},\n\t\t\tmouseleave: function( event ) {\n\t\t\t\tthis._removeClass( $( event.currentTarget ), null, \"ui-state-hover\" );\n\t\t\t}\n\t\t} );\n\t},\n\n\t_focusable: function( element ) {\n\t\tthis.focusable = this.focusable.add( element );\n\t\tthis._on( element, {\n\t\t\tfocusin: function( event ) {\n\t\t\t\tthis._addClass( $( event.currentTarget ), null, \"ui-state-focus\" );\n\t\t\t},\n\t\t\tfocusout: function( event ) {\n\t\t\t\tthis._removeClass( $( event.currentTarget ), null, \"ui-state-focus\" );\n\t\t\t}\n\t\t} );\n\t},\n\n\t_trigger: function( type, event, data ) {\n\t\tvar prop, orig;\n\t\tvar callback = this.options[ type ];\n\n\t\tdata = data || {};\n\t\tevent = $.Event( event );\n\t\tevent.type = ( type === this.widgetEventPrefix ?\n\t\t\ttype :\n\t\t\tthis.widgetEventPrefix + type ).toLowerCase();\n\n\t\t// The original event may come from any element\n\t\t// so we need to reset the target on the new event\n\t\tevent.target = this.element[ 0 ];\n\n\t\t// Copy original event properties over to the new event\n\t\torig = event.originalEvent;\n\t\tif ( orig ) {\n\t\t\tfor ( prop in orig ) {\n\t\t\t\tif ( !( prop in event ) ) {\n\t\t\t\t\tevent[ prop ] = orig[ prop ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.element.trigger( event, data );\n\t\treturn !( typeof callback === \"function\" &&\n\t\t\tcallback.apply( this.element[ 0 ], [ event ].concat( data ) ) === false ||\n\t\t\tevent.isDefaultPrevented() );\n\t}\n};\n\n$.each( { show: \"fadeIn\", hide: \"fadeOut\" }, function( method, defaultEffect ) {\n\t$.Widget.prototype[ \"_\" + method ] = function( element, options, callback ) {\n\t\tif ( typeof options === \"string\" ) {\n\t\t\toptions = { effect: options };\n\t\t}\n\n\t\tvar hasOptions;\n\t\tvar effectName = !options ?\n\t\t\tmethod :\n\t\t\toptions === true || typeof options === \"number\" ?\n\t\t\t\tdefaultEffect :\n\t\t\t\toptions.effect || defaultEffect;\n\n\t\toptions = options || {};\n\t\tif ( typeof options === \"number\" ) {\n\t\t\toptions = { duration: options };\n\t\t} else if ( options === true ) {\n\t\t\toptions = {};\n\t\t}\n\n\t\thasOptions = !$.isEmptyObject( options );\n\t\toptions.complete = callback;\n\n\t\tif ( options.delay ) {\n\t\t\telement.delay( options.delay );\n\t\t}\n\n\t\tif ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {\n\t\t\telement[ method ]( options );\n\t\t} else if ( effectName !== method && element[ effectName ] ) {\n\t\t\telement[ effectName ]( options.duration, options.easing, callback );\n\t\t} else {\n\t\t\telement.queue( function( next ) {\n\t\t\t\t$( this )[ method ]();\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback.call( element[ 0 ] );\n\t\t\t\t}\n\t\t\t\tnext();\n\t\t\t} );\n\t\t}\n\t};\n} );\n\nreturn $.widget;\n\n} );\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery-ui/ui/widget.js\n");

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v3.7.1\n * https://jquery.com/\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2023-08-28T13:37Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif (  true && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket trac-14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar flat = arr.flat ? function( array ) {\n\treturn arr.flat.call( array );\n} : function( array ) {\n\treturn arr.concat.apply( [], array );\n};\n\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\nvar isFunction = function isFunction( obj ) {\n\n\t\t// Support: Chrome <=57, Firefox <=52\n\t\t// In some browsers, typeof returns \"function\" for HTML <object> elements\n\t\t// (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n\t\t// We don't want to classify *any* DOM node as a function.\n\t\t// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5\n\t\t// Plus for old WebKit, typeof returns \"function\" for HTML collections\n\t\t// (e.g., `typeof document.getElementsByTagName(\"div\") === \"function\"`). (gh-4756)\n\t\treturn typeof obj === \"function\" && typeof obj.nodeType !== \"number\" &&\n\t\t\ttypeof obj.item !== \"function\";\n\t};\n\n\nvar isWindow = function isWindow( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t};\n\n\nvar document = window.document;\n\n\n\n\tvar preservedScriptAttributes = {\n\t\ttype: true,\n\t\tsrc: true,\n\t\tnonce: true,\n\t\tnoModule: true\n\t};\n\n\tfunction DOMEval( code, node, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar i, val,\n\t\t\tscript = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tif ( node ) {\n\t\t\tfor ( i in preservedScriptAttributes ) {\n\n\t\t\t\t// Support: Firefox 64+, Edge 18+\n\t\t\t\t// Some browsers don't support the \"nonce\" property on scripts.\n\t\t\t\t// On the other hand, just using `getAttribute` is not enough as\n\t\t\t\t// the `nonce` attribute is reset to an empty string whenever it\n\t\t\t\t// becomes browsing-context connected.\n\t\t\t\t// See https://github.com/whatwg/html/issues/2369\n\t\t\t\t// See https://html.spec.whatwg.org/#nonce-attributes\n\t\t\t\t// The `node.getAttribute` check was added for the sake of\n\t\t\t\t// `jQuery.globalEval` so that it can fake a nonce-containing node\n\t\t\t\t// via an object.\n\t\t\t\tval = node[ i ] || node.getAttribute && node.getAttribute( i );\n\t\t\t\tif ( val ) {\n\t\t\t\t\tscript.setAttribute( i, val );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\t// Support: Android <=2.3 only (functionish RegExp)\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar version = \"3.7.1\",\n\n\trhtmlSuffix = /HTML$/i,\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teven: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn ( i + 1 ) % 2;\n\t\t} ) );\n\t},\n\n\todd: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn i % 2;\n\t\t} ) );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent Object.prototype pollution\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( name === \"__proto__\" || target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\t\t\t\t\tsrc = target[ name ];\n\n\t\t\t\t\t// Ensure proper type for the source value\n\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n\t\t\t\t\t\tclone = {};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src;\n\t\t\t\t\t}\n\t\t\t\t\tcopyIsArray = false;\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a provided context; falls back to the global one\n\t// if not specified.\n\tglobalEval: function( code, options, doc ) {\n\t\tDOMEval( code, { nonce: options && options.nonce }, doc );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\n\t// Retrieve the text value of an array of DOM nodes\n\ttext: function( elem ) {\n\t\tvar node,\n\t\t\tret = \"\",\n\t\t\ti = 0,\n\t\t\tnodeType = elem.nodeType;\n\n\t\tif ( !nodeType ) {\n\n\t\t\t// If no nodeType, this is expected to be an array\n\t\t\twhile ( ( node = elem[ i++ ] ) ) {\n\n\t\t\t\t// Do not traverse comment nodes\n\t\t\t\tret += jQuery.text( node );\n\t\t\t}\n\t\t}\n\t\tif ( nodeType === 1 || nodeType === 11 ) {\n\t\t\treturn elem.textContent;\n\t\t}\n\t\tif ( nodeType === 9 ) {\n\t\t\treturn elem.documentElement.textContent;\n\t\t}\n\t\tif ( nodeType === 3 || nodeType === 4 ) {\n\t\t\treturn elem.nodeValue;\n\t\t}\n\n\t\t// Do not include comment or processing instruction nodes\n\n\t\treturn ret;\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\tisXMLDoc: function( elem ) {\n\t\tvar namespace = elem && elem.namespaceURI,\n\t\t\tdocElem = elem && ( elem.ownerDocument || elem ).documentElement;\n\n\t\t// Assume HTML when documentElement doesn't yet exist, such as inside\n\t\t// document fragments.\n\t\treturn !rhtmlSuffix.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn flat( ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\n\tfunction( _i, name ) {\n\t\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n\t} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\n\n\nfunction nodeName( elem, name ) {\n\n\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n}\nvar pop = arr.pop;\n\n\nvar sort = arr.sort;\n\n\nvar splice = arr.splice;\n\n\nvar whitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\";\n\n\nvar rtrimCSS = new RegExp(\n\t\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\",\n\t\"g\"\n);\n\n\n\n\n// Note: an element does not contain itself\njQuery.contains = function( a, b ) {\n\tvar bup = b && b.parentNode;\n\n\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\n\t\t// Support: IE 9 - 11+\n\t\t// IE doesn't have `contains` on SVG.\n\t\ta.contains ?\n\t\t\ta.contains( bup ) :\n\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t) );\n};\n\n\n\n\n// CSS string/identifier serialization\n// https://drafts.csswg.org/cssom/#common-serializing-idioms\nvar rcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\x80-\\uFFFF\\w-]/g;\n\nfunction fcssescape( ch, asCodePoint ) {\n\tif ( asCodePoint ) {\n\n\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\tif ( ch === \"\\0\" ) {\n\t\t\treturn \"\\uFFFD\";\n\t\t}\n\n\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t}\n\n\t// Other potentially-special ASCII characters get backslash-escaped\n\treturn \"\\\\\" + ch;\n}\n\njQuery.escapeSelector = function( sel ) {\n\treturn ( sel + \"\" ).replace( rcssescape, fcssescape );\n};\n\n\n\n\nvar preferredDoc = document,\n\tpushNative = push;\n\n( function() {\n\nvar i,\n\tExpr,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\tpush = pushNative,\n\n\t// Local document vars\n\tdocument,\n\tdocumentElement,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\tmatches,\n\n\t// Instance-specific data\n\texpando = jQuery.expando,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tnonnativeSelectorCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|\" +\n\t\t\"loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n\tidentifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n\t\t\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n\n\t// Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" +\n\t\twhitespace + \"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trleadingCombinator = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" +\n\t\twhitespace + \"*\" ),\n\trdescend = new RegExp( whitespace + \"|>\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\tID: new RegExp( \"^#(\" + identifier + \")\" ),\n\t\tCLASS: new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\tTAG: new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\tATTR: new RegExp( \"^\" + attributes ),\n\t\tPSEUDO: new RegExp( \"^\" + pseudos ),\n\t\tCHILD: new RegExp(\n\t\t\t\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" +\n\t\t\t\twhitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" +\n\t\t\t\twhitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\tbool: new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\tneedsContext: new RegExp( \"^\" + whitespace +\n\t\t\t\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace +\n\t\t\t\"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// https://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n\t\t\"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\" ),\n\tfunescape = function( escape, nonHex ) {\n\t\tvar high = \"0x\" + escape.slice( 1 ) - 0x10000;\n\n\t\tif ( nonHex ) {\n\n\t\t\t// Strip the backslash prefix from a non-hex escape sequence\n\t\t\treturn nonHex;\n\t\t}\n\n\t\t// Replace a hexadecimal escape sequence with the encoded Unicode code point\n\t\t// Support: IE <=11+\n\t\t// For values outside the Basic Multilingual Plane (BMP), manually construct a\n\t\t// surrogate pair\n\t\treturn high < 0 ?\n\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// Used for iframes; see `setDocument`.\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE/Edge.\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tinDisabledFieldset = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && nodeName( elem, \"fieldset\" );\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Support: IE <=9 only\n// Accessing document.activeElement can throw unexpectedly\n// https://bugs.jquery.com/ticket/13393\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t( arr = slice.call( preferredDoc.childNodes ) ),\n\t\tpreferredDoc.childNodes\n\t);\n\n\t// Support: Android <=4.0\n\t// Detect silently failing push.apply\n\t// eslint-disable-next-line no-unused-expressions\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = {\n\t\tapply: function( target, els ) {\n\t\t\tpushNative.apply( target, slice.call( els ) );\n\t\t},\n\t\tcall: function( target ) {\n\t\t\tpushNative.apply( target, slice.call( arguments, 1 ) );\n\t\t}\n\t};\n}\n\nfunction find( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\t\tsetDocument( context );\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( ( m = match[ 1 ] ) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( ( elem = context.getElementById( m ) ) ) {\n\n\t\t\t\t\t\t\t// Support: IE 9 only\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tpush.call( results, elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE 9 only\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && ( elem = newContext.getElementById( m ) ) &&\n\t\t\t\t\t\t\tfind.contains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tpush.call( results, elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[ 2 ] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( ( m = match[ 3 ] ) && context.getElementsByClassName ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( !nonnativeSelectorCache[ selector + \" \" ] &&\n\t\t\t\t( !rbuggyQSA || !rbuggyQSA.test( selector ) ) ) {\n\n\t\t\t\tnewSelector = selector;\n\t\t\t\tnewContext = context;\n\n\t\t\t\t// qSA considers elements outside a scoping root when evaluating child or\n\t\t\t\t// descendant combinators, which is not what we want.\n\t\t\t\t// In such cases, we work around the behavior by prefixing every selector in the\n\t\t\t\t// list with an ID selector referencing the scope context.\n\t\t\t\t// The technique has to be used as well when a leading combinator is used\n\t\t\t\t// as such selectors are not recognized by querySelectorAll.\n\t\t\t\t// Thanks to Andrew Dupont for this technique.\n\t\t\t\tif ( nodeType === 1 &&\n\t\t\t\t\t( rdescend.test( selector ) || rleadingCombinator.test( selector ) ) ) {\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\n\t\t\t\t\t// We can use :scope instead of the ID hack if the browser\n\t\t\t\t\t// supports it & if we're not changing the context.\n\t\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when\n\t\t\t\t\t// strict-comparing two documents; shallow comparisons work.\n\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\tif ( newContext != context || !support.scope ) {\n\n\t\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\t\tif ( ( nid = context.getAttribute( \"id\" ) ) ) {\n\t\t\t\t\t\t\tnid = jQuery.escapeSelector( nid );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontext.setAttribute( \"id\", ( nid = expando ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[ i ] = ( nid ? \"#\" + nid : \":scope\" ) + \" \" +\n\t\t\t\t\t\t\ttoSelector( groups[ i ] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t);\n\t\t\t\t\treturn results;\n\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\tnonnativeSelectorCache( selector, true );\n\t\t\t\t} finally {\n\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrimCSS, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\n\t\t// Use (key + \" \") to avoid collision with native prototype properties\n\t\t// (see https://github.com/jquery/sizzle/issues/157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn ( cache[ key + \" \" ] = value );\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by jQuery selector module\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement( \"fieldset\" );\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch ( e ) {\n\t\treturn false;\n\t} finally {\n\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\treturn nodeName( elem, \"input\" ) && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\treturn ( nodeName( elem, \"input\" ) || nodeName( elem, \"button\" ) ) &&\n\t\t\telem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11+\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\t\tinDisabledFieldset( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction( function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction( function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ ( j = matchIndexes[ i ] ) ] ) {\n\t\t\t\t\tseed[ j ] = !( matches[ j ] = seed[ j ] );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t} );\n}\n\n/**\n * Checks a node for validity as a jQuery selector context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [node] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nfunction setDocument( node ) {\n\tvar subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocumentElement = document.documentElement;\n\tdocumentIsHTML = !jQuery.isXMLDoc( document );\n\n\t// Support: iOS 7 only, IE 9 - 11+\n\t// Older browsers didn't support unprefixed `matches`.\n\tmatches = documentElement.matches ||\n\t\tdocumentElement.webkitMatchesSelector ||\n\t\tdocumentElement.msMatchesSelector;\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// Accessing iframe documents after unload throws \"permission denied\" errors\n\t// (see trac-13936).\n\t// Limit the fix to IE & Edge Legacy; despite Edge 15+ implementing `matches`,\n\t// all IE 9+ and Edge Legacy versions implement `msMatchesSelector` as well.\n\tif ( documentElement.msMatchesSelector &&\n\n\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t// two documents; shallow comparisons work.\n\t\t// eslint-disable-next-line eqeqeq\n\t\tpreferredDoc != document &&\n\t\t( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t\tsubWindow.addEventListener( \"unload\", unloadHandler );\n\t}\n\n\t// Support: IE <10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert( function( el ) {\n\t\tdocumentElement.appendChild( el ).id = jQuery.expando;\n\t\treturn !document.getElementsByName ||\n\t\t\t!document.getElementsByName( jQuery.expando ).length;\n\t} );\n\n\t// Support: IE 9 only\n\t// Check to see if it's possible to do matchesSelector\n\t// on a disconnected node.\n\tsupport.disconnectedMatch = assert( function( el ) {\n\t\treturn matches.call( el, \"*\" );\n\t} );\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// IE/Edge don't support the :scope pseudo-class.\n\tsupport.scope = assert( function() {\n\t\treturn document.querySelectorAll( \":scope\" );\n\t} );\n\n\t// Support: Chrome 105 - 111 only, Safari 15.4 - 16.3 only\n\t// Make sure the `:has()` argument is parsed unforgivingly.\n\t// We include `*` in the test to detect buggy implementations that are\n\t// _selectively_ forgiving (specifically when the list includes at least\n\t// one valid selector).\n\t// Note that we treat complete lack of support for `:has()` as if it were\n\t// spec-compliant support, which is fine because use of `:has()` in such\n\t// environments will fail in the qSA path and fall back to jQuery traversal\n\t// anyway.\n\tsupport.cssHas = assert( function() {\n\t\ttry {\n\t\t\tdocument.querySelector( \":has(*,:jqfake)\" );\n\t\t\treturn false;\n\t\t} catch ( e ) {\n\t\t\treturn true;\n\t\t}\n\t} );\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter.ID = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute( \"id\" ) === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find.ID = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter.ID =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode( \"id\" );\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find.ID = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( ( elem = elems[ i++ ] ) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find.TAG = function( tag, context ) {\n\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t// DocumentFragment nodes don't have gEBTN\n\t\t} else {\n\t\t\treturn context.querySelectorAll( tag );\n\t\t}\n\t};\n\n\t// Class\n\tExpr.find.CLASS = function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\trbuggyQSA = [];\n\n\t// Build QSA regex\n\t// Regex strategy adopted from Diego Perini\n\tassert( function( el ) {\n\n\t\tvar input;\n\n\t\tdocumentElement.appendChild( el ).innerHTML =\n\t\t\t\"<a id='\" + expando + \"' href='' disabled='disabled'></a>\" +\n\t\t\t\"<select id='\" + expando + \"-\\r\\\\' disabled='disabled'>\" +\n\t\t\t\"<option selected=''></option></select>\";\n\n\t\t// Support: iOS <=7 - 8 only\n\t\t// Boolean attributes and \"value\" are not treated correctly in some XML documents\n\t\tif ( !el.querySelectorAll( \"[selected]\" ).length ) {\n\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t}\n\n\t\t// Support: iOS <=7 - 8 only\n\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\trbuggyQSA.push( \"~=\" );\n\t\t}\n\n\t\t// Support: iOS 8 only\n\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\trbuggyQSA.push( \".#.+[+~]\" );\n\t\t}\n\n\t\t// Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+\n\t\t// In some of the document kinds, these selectors wouldn't work natively.\n\t\t// This is probably OK but for backwards compatibility we want to maintain\n\t\t// handling them through jQuery traversal in jQuery 3.x.\n\t\tif ( !el.querySelectorAll( \":checked\" ).length ) {\n\t\t\trbuggyQSA.push( \":checked\" );\n\t\t}\n\n\t\t// Support: Windows 8 Native Apps\n\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\tinput = document.createElement( \"input\" );\n\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t// Support: IE 9 - 11+\n\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t// Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+\n\t\t// In some of the document kinds, these selectors wouldn't work natively.\n\t\t// This is probably OK but for backwards compatibility we want to maintain\n\t\t// handling them through jQuery traversal in jQuery 3.x.\n\t\tdocumentElement.appendChild( el ).disabled = true;\n\t\tif ( el.querySelectorAll( \":disabled\" ).length !== 2 ) {\n\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t}\n\n\t\t// Support: IE 11+, Edge 15 - 18+\n\t\t// IE 11/Edge don't find elements on a `[name='']` query in some cases.\n\t\t// Adding a temporary attribute to the document before the selection works\n\t\t// around the issue.\n\t\t// Interestingly, IE 10 & older don't seem to have the issue.\n\t\tinput = document.createElement( \"input\" );\n\t\tinput.setAttribute( \"name\", \"\" );\n\t\tel.appendChild( input );\n\t\tif ( !el.querySelectorAll( \"[name='']\" ).length ) {\n\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" +\n\t\t\t\twhitespace + \"*(?:''|\\\"\\\")\" );\n\t\t}\n\t} );\n\n\tif ( !support.cssHas ) {\n\n\t\t// Support: Chrome 105 - 110+, Safari 15.4 - 16.3+\n\t\t// Our regular `try-catch` mechanism fails to detect natively-unsupported\n\t\t// pseudo-classes inside `:has()` (such as `:has(:contains(\"Foo\"))`)\n\t\t// in browsers that parse the `:has()` argument as a forgiving selector list.\n\t\t// https://drafts.csswg.org/selectors/#relational now requires the argument\n\t\t// to be parsed unforgivingly, but browsers have not yet fully adjusted.\n\t\trbuggyQSA.push( \":has\" );\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( \"|\" ) );\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = function( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t// two documents; shallow comparisons work.\n\t\t// eslint-disable-next-line eqeqeq\n\t\tcompare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( a === document || a.ownerDocument == preferredDoc &&\n\t\t\t\tfind.contains( preferredDoc, a ) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( b === document || b.ownerDocument == preferredDoc &&\n\t\t\t\tfind.contains( preferredDoc, b ) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t};\n\n\treturn document;\n}\n\nfind.matches = function( expr, elements ) {\n\treturn find( expr, null, null, elements );\n};\n\nfind.matchesSelector = function( elem, expr ) {\n\tsetDocument( elem );\n\n\tif ( documentIsHTML &&\n\t\t!nonnativeSelectorCache[ expr + \" \" ] &&\n\t\t( !rbuggyQSA || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch ( e ) {\n\t\t\tnonnativeSelectorCache( expr, true );\n\t\t}\n\t}\n\n\treturn find( expr, document, null, [ elem ] ).length > 0;\n};\n\nfind.contains = function( context, elem ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( context.ownerDocument || context ) != document ) {\n\t\tsetDocument( context );\n\t}\n\treturn jQuery.contains( context, elem );\n};\n\n\nfind.attr = function( elem, name ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( elem.ownerDocument || elem ) != document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\n\t\t// Don't get fooled by Object.prototype properties (see trac-13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\tif ( val !== undefined ) {\n\t\treturn val;\n\t}\n\n\treturn elem.getAttribute( name );\n};\n\nfind.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\njQuery.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\t//\n\t// Support: Android <=4.0+\n\t// Testing for detecting duplicates is unpredictable so instead assume we can't\n\t// depend on duplicate detection in all browsers without a stable sort.\n\thasDuplicate = !support.sortStable;\n\tsortInput = !support.sortStable && slice.call( results, 0 );\n\tsort.call( results, sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tsplice.call( results, duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\njQuery.fn.uniqueSort = function() {\n\treturn this.pushStack( jQuery.uniqueSort( slice.apply( this ) ) );\n};\n\nExpr = jQuery.expr = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\tATTR: function( match ) {\n\t\t\tmatch[ 1 ] = match[ 1 ].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[ 3 ] = ( match[ 3 ] || match[ 4 ] || match[ 5 ] || \"\" )\n\t\t\t\t.replace( runescape, funescape );\n\n\t\t\tif ( match[ 2 ] === \"~=\" ) {\n\t\t\t\tmatch[ 3 ] = \" \" + match[ 3 ] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\tCHILD: function( match ) {\n\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[ 1 ] = match[ 1 ].toLowerCase();\n\n\t\t\tif ( match[ 1 ].slice( 0, 3 ) === \"nth\" ) {\n\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[ 3 ] ) {\n\t\t\t\t\tfind.error( match[ 0 ] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[ 4 ] = +( match[ 4 ] ?\n\t\t\t\t\tmatch[ 5 ] + ( match[ 6 ] || 1 ) :\n\t\t\t\t\t2 * ( match[ 3 ] === \"even\" || match[ 3 ] === \"odd\" )\n\t\t\t\t);\n\t\t\t\tmatch[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[ 3 ] ) {\n\t\t\t\tfind.error( match[ 0 ] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\tPSEUDO: function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[ 6 ] && match[ 2 ];\n\n\t\t\tif ( matchExpr.CHILD.test( match[ 0 ] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[ 3 ] ) {\n\t\t\t\tmatch[ 2 ] = match[ 4 ] || match[ 5 ] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t( excess = tokenize( unquoted, true ) ) &&\n\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t( excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length ) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[ 0 ] = match[ 0 ].slice( 0, excess );\n\t\t\t\tmatch[ 2 ] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\tTAG: function( nodeNameSelector ) {\n\t\t\tvar expectedNodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() {\n\t\t\t\t\treturn true;\n\t\t\t\t} :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn nodeName( elem, expectedNodeName );\n\t\t\t\t};\n\t\t},\n\n\t\tCLASS: function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t( pattern = new RegExp( \"(^|\" + whitespace + \")\" + className +\n\t\t\t\t\t\"(\" + whitespace + \"|$)\" ) ) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test(\n\t\t\t\t\t\ttypeof elem.className === \"string\" && elem.className ||\n\t\t\t\t\t\t\ttypeof elem.getAttribute !== \"undefined\" &&\n\t\t\t\t\t\t\t\telem.getAttribute( \"class\" ) ||\n\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t);\n\t\t\t\t} );\n\t\t},\n\n\t\tATTR: function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = find.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\tif ( operator === \"=\" ) {\n\t\t\t\t\treturn result === check;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"!=\" ) {\n\t\t\t\t\treturn result !== check;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"^=\" ) {\n\t\t\t\t\treturn check && result.indexOf( check ) === 0;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"*=\" ) {\n\t\t\t\t\treturn check && result.indexOf( check ) > -1;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"$=\" ) {\n\t\t\t\t\treturn check && result.slice( -check.length ) === check;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"~=\" ) {\n\t\t\t\t\treturn ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" )\n\t\t\t\t\t\t.indexOf( check ) > -1;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"|=\" ) {\n\t\t\t\t\treturn result === check || result.slice( 0, check.length + 1 ) === check + \"-\";\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t};\n\t\t},\n\n\t\tCHILD: function( type, what, _argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tvar cache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( ( node = node[ dir ] ) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnodeName( node, name ) :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\t\t\t\t\t\t\touterCache = parent[ expando ] || ( parent[ expando ] = {} );\n\t\t\t\t\t\t\tcache = outerCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\touterCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\touterCache = elem[ expando ] || ( elem[ expando ] = {} );\n\t\t\t\t\t\t\t\tcache = outerCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnodeName( node, name ) :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( node[ expando ] = {} );\n\t\t\t\t\t\t\t\t\t\t\touterCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\tPSEUDO: function( pseudo, argument ) {\n\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// https://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tfind.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as jQuery does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction( function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf.call( seed, matched[ i ] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[ i ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t} ) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\n\t\t// Potentially complex pseudos\n\t\tnot: markFunction( function( selector ) {\n\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrimCSS, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction( function( seed, matches, _context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\t\t\t\t\tseed[ i ] = !( matches[ i ] = elem );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} ) :\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tinput[ 0 ] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\n\t\t\t\t\t// Don't keep the element\n\t\t\t\t\t// (see https://github.com/jquery/sizzle/issues/299)\n\t\t\t\t\tinput[ 0 ] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t} ),\n\n\t\thas: markFunction( function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn find( selector, elem ).length > 0;\n\t\t\t};\n\t\t} ),\n\n\t\tcontains: markFunction( function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || jQuery.text( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t} ),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// https://www.w3.org/TR/selectors/#lang-pseudo\n\t\tlang: markFunction( function( lang ) {\n\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test( lang || \"\" ) ) {\n\t\t\t\tfind.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( ( elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute( \"xml:lang\" ) || elem.getAttribute( \"lang\" ) ) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t} ),\n\n\t\t// Miscellaneous\n\t\ttarget: function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\troot: function( elem ) {\n\t\t\treturn elem === documentElement;\n\t\t},\n\n\t\tfocus: function( elem ) {\n\t\t\treturn elem === safeActiveElement() &&\n\t\t\t\tdocument.hasFocus() &&\n\t\t\t\t!!( elem.type || elem.href || ~elem.tabIndex );\n\t\t},\n\n\t\t// Boolean properties\n\t\tenabled: createDisabledPseudo( false ),\n\t\tdisabled: createDisabledPseudo( true ),\n\n\t\tchecked: function( elem ) {\n\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\treturn ( nodeName( elem, \"input\" ) && !!elem.checked ) ||\n\t\t\t\t( nodeName( elem, \"option\" ) && !!elem.selected );\n\t\t},\n\n\t\tselected: function( elem ) {\n\n\t\t\t// Support: IE <=11+\n\t\t\t// Accessing the selectedIndex property\n\t\t\t// forces the browser to treat the default option as\n\t\t\t// selected when in an optgroup.\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\tempty: function( elem ) {\n\n\t\t\t// https://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\tparent: function( elem ) {\n\t\t\treturn !Expr.pseudos.empty( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\theader: function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\tinput: function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\tbutton: function( elem ) {\n\t\t\treturn nodeName( elem, \"input\" ) && elem.type === \"button\" ||\n\t\t\t\tnodeName( elem, \"button\" );\n\t\t},\n\n\t\ttext: function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn nodeName( elem, \"input\" ) && elem.type === \"text\" &&\n\n\t\t\t\t// Support: IE <10 only\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear\n\t\t\t\t// with elem.type === \"text\"\n\t\t\t\t( ( attr = elem.getAttribute( \"type\" ) ) == null ||\n\t\t\t\t\tattr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\tfirst: createPositionalPseudo( function() {\n\t\t\treturn [ 0 ];\n\t\t} ),\n\n\t\tlast: createPositionalPseudo( function( _matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t} ),\n\n\t\teq: createPositionalPseudo( function( _matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t} ),\n\n\t\teven: createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\todd: createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\tlt: createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i;\n\n\t\t\tif ( argument < 0 ) {\n\t\t\t\ti = argument + length;\n\t\t\t} else if ( argument > length ) {\n\t\t\t\ti = length;\n\t\t\t} else {\n\t\t\t\ti = argument;\n\t\t\t}\n\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\tgt: createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} )\n\t}\n};\n\nExpr.pseudos.nth = Expr.pseudos.eq;\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\nfunction tokenize( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || ( match = rcomma.exec( soFar ) ) ) {\n\t\t\tif ( match ) {\n\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[ 0 ].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( ( tokens = [] ) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( ( match = rleadingCombinator.exec( soFar ) ) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push( {\n\t\t\t\tvalue: matched,\n\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[ 0 ].replace( rtrimCSS, \" \" )\n\t\t\t} );\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||\n\t\t\t\t( match = preFilters[ type ]( match ) ) ) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push( {\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t} );\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\tif ( parseOnly ) {\n\t\treturn soFar.length;\n\t}\n\n\treturn soFar ?\n\t\tfind.error( selector ) :\n\n\t\t// Cache the tokens\n\t\ttokenCache( selector, groups ).slice( 0 );\n}\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[ i ].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || ( elem[ expando ] = {} );\n\n\t\t\t\t\t\tif ( skip && nodeName( elem, skip ) ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( ( oldCache = outerCache[ key ] ) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn ( newCache[ 2 ] = oldCache[ 2 ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\touterCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[ i ]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[ 0 ];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tfind( selector, contexts[ i ], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction( function( seed, results, context, xml ) {\n\t\tvar temp, i, elem, matcherOut,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed ||\n\t\t\t\tmultipleContexts( selector || \"*\",\n\t\t\t\t\tcontext.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems;\n\n\t\tif ( matcher ) {\n\n\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter\n\t\t\t// or preexisting results,\n\t\t\tmatcherOut = postFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t[] :\n\n\t\t\t\t// ...otherwise use results directly\n\t\t\t\tresults;\n\n\t\t\t// Find primary matches\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t} else {\n\t\t\tmatcherOut = matcherIn;\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( ( elem = temp[ i ] ) ) {\n\t\t\t\t\tmatcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) ) {\n\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( ( matcherIn[ i ] = elem ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, ( matcherOut = [] ), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) &&\n\t\t\t\t\t\t( temp = postFinder ? indexOf.call( seed, elem ) : preMap[ i ] ) > -1 ) {\n\n\t\t\t\t\t\tseed[ temp ] = !( results[ temp ] = elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t} );\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[ 0 ].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[ \" \" ],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf.call( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tvar ret = ( !leadingRelative && ( xml || context != outermostContext ) ) || (\n\t\t\t\t( checkContext = context ).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\n\t\t\t// Avoid hanging onto element\n\t\t\t// (see https://github.com/jquery/sizzle/issues/299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {\n\t\t\tmatchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[ j ].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 )\n\t\t\t\t\t\t\t.concat( { value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" } )\n\t\t\t\t\t).replace( rtrimCSS, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find.TAG( \"*\", outermost ),\n\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\n\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\toutermostContext = context == document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: iOS <=7 - 9 only\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching\n\t\t\t// elements by id. (see trac-14142)\n\t\t\tfor ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\n\t\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\tif ( !context && elem.ownerDocument != document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( ( matcher = elementMatchers[ j++ ] ) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml ) ) {\n\t\t\t\t\t\t\tpush.call( results, elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( ( elem = !matcher && elem ) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( ( matcher = setMatchers[ j++ ] ) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !( unmatched[ i ] || setMatched[ i ] ) ) {\n\t\t\t\t\t\t\t\tsetMatched[ i ] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tjQuery.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\nfunction compile( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[ i ] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector,\n\t\t\tmatcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n}\n\n/**\n * A low-level selection function that works with jQuery's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with jQuery selector compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nfunction select( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( ( selector = compiled.selector || selector ) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[ 0 ] = match[ 0 ].slice( 0 );\n\t\tif ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === \"ID\" &&\n\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {\n\n\t\t\tcontext = ( Expr.find.ID(\n\t\t\t\ttoken.matches[ 0 ].replace( runescape, funescape ),\n\t\t\t\tcontext\n\t\t\t) || [] )[ 0 ];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr.needsContext.test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[ i ];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ ( type = token.type ) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( ( find = Expr.find[ type ] ) ) {\n\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( ( seed = find(\n\t\t\t\t\ttoken.matches[ 0 ].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[ 0 ].type ) &&\n\t\t\t\t\t\ttestContext( context.parentNode ) || context\n\t\t\t\t) ) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n}\n\n// One-time assignments\n\n// Support: Android <=4.0 - 4.1+\n// Sort stability\nsupport.sortStable = expando.split( \"\" ).sort( sortOrder ).join( \"\" ) === expando;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Android <=4.0 - 4.1+\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert( function( el ) {\n\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement( \"fieldset\" ) ) & 1;\n} );\n\njQuery.find = find;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.unique = jQuery.uniqueSort;\n\n// These have always been private, but they used to be documented as part of\n// Sizzle so let's maintain them for now for backwards compatibility purposes.\nfind.compile = compile;\nfind.select = select;\nfind.setDocument = setDocument;\nfind.tokenize = tokenize;\n\nfind.escape = jQuery.escapeSelector;\nfind.getText = jQuery.text;\nfind.isXML = jQuery.isXMLDoc;\nfind.selectors = jQuery.expr;\nfind.support = jQuery.support;\nfind.uniqueSort = jQuery.uniqueSort;\n\n\t/* eslint-enable */\n\n} )();\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)\n\t// Strict HTML recognition (trac-11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to jQuery#find\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\tif ( elem.contentDocument != null &&\n\n\t\t\t// Support: IE 11+\n\t\t\t// <object> elements with no `data` attribute has an object\n\t\t\t// `contentDocument` with a `null` prototype.\n\t\t\tgetProto( elem.contentDocument ) ) {\n\n\t\t\treturn elem.contentDocument;\n\t\t}\n\n\t\t// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n\t\t// Treat the template element as a regular one in browsers that\n\t\t// don't support it.\n\t\tif ( nodeName( elem, \"template\" ) ) {\n\t\t\telem = elem.content || elem;\n\t\t}\n\n\t\treturn jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( _i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.error );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the error, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getErrorHook ) {\n\t\t\t\t\t\t\t\t\tprocess.error = jQuery.Deferred.getErrorHook();\n\n\t\t\t\t\t\t\t\t// The deprecated alias of the above. While the name suggests\n\t\t\t\t\t\t\t\t// returning the stack, not an error instance, jQuery just passes\n\t\t\t\t\t\t\t\t// it directly to `console.warn` so both will work; an instance\n\t\t\t\t\t\t\t\t// just better cooperates with source maps.\n\t\t\t\t\t\t\t\t} else if ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.error = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// rejected_handlers.disable\n\t\t\t\t\t// fulfilled_handlers.disable\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n\n\t\t\t\t\t// progress_handlers.lock\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the primary Deferred\n\t\t\tprimary = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tprimary.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( primary.state() === \"pending\" ||\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn primary.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );\n\t\t}\n\n\t\treturn primary.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\n// If `jQuery.Deferred.getErrorHook` is defined, `asyncError` is an error\n// captured before the async barrier to get the original error cause\n// which may otherwise be hidden.\njQuery.Deferred.exceptionHook = function( error, asyncError ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message,\n\t\t\terror.stack, asyncError );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See trac-6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( toType( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, _key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\t\tvalue :\n\t\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\n\n\n// Matches dashed string for camelizing\nvar rmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g;\n\n// Used by camelCase as callback to replace()\nfunction fcamelCase( _all, letter ) {\n\treturn letter.toUpperCase();\n}\n\n// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (trac-9572)\nfunction camelCase( string ) {\n\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n}\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see trac-8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (trac-14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar documentElement = document.documentElement;\n\n\n\n\tvar isAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem );\n\t\t},\n\t\tcomposed = { composed: true };\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n\t// Check attachment across shadow DOM boundaries when possible (gh-3504)\n\t// Support: iOS 10.0-10.2 only\n\t// Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n\t// leading to errors. We need to check for `getRootNode`.\n\tif ( documentElement.getRootNode ) {\n\t\tisAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem ) ||\n\t\t\t\telem.getRootNode( composed ) === elem.ownerDocument;\n\t\t};\n\t}\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tisAttached( elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted, scale,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = elem.nodeType &&\n\t\t\t( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Support: Firefox <=54\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n\t\tinitial = initial / 2;\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\twhile ( maxIterations-- ) {\n\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n\t\t\t\tmaxIterations = 0;\n\t\t\t}\n\t\t\tinitialInUnit = initialInUnit / scale;\n\n\t\t}\n\n\t\tinitialInUnit = initialInUnit * 2;\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i );\n\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (trac-11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (trac-14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n\n\t// Support: IE <=9 only\n\t// IE <=9 replaces <option> tags with their contents when inserted outside of\n\t// the select element.\n\tdiv.innerHTML = \"<option></option>\";\n\tsupport.option = !!div.lastChild;\n} )();\n\n\n// We have to close these tags to support XHTML (trac-13200)\nvar wrapMap = {\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n// Support: IE <=9 only\nif ( !support.option ) {\n\twrapMap.optgroup = wrapMap.option = [ 1, \"<select multiple='multiple'>\", \"</select>\" ];\n}\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (trac-15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, attached, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( toType( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (trac-12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tattached = isAttached( elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( attached ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\nvar rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Only attach events to objects that accept data\n\t\tif ( !acceptData( elem ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = Object.create( null );\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\n\t\t\t// Make a writable jQuery.Event from the native event object\n\t\t\tevent = jQuery.event.fix( nativeEvent ),\n\n\t\t\thandlers = (\n\t\t\t\tdataPriv.get( this, \"events\" ) || Object.create( null )\n\t\t\t)[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// If the event is namespaced, then each handler is only invoked if it is\n\t\t\t\t// specially universal or its namespaces are a superset of the event's.\n\t\t\t\tif ( !event.rnamespace || handleObj.namespace === false ||\n\t\t\t\t\tevent.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (trac-13208)\n\t\t\t\t// Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (trac-13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tclick: {\n\n\t\t\t// Utilize native event to ensure correct state for checkable inputs\n\t\t\tsetup: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Claim the first handler\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\t// dataPriv.set( el, \"click\", ... )\n\t\t\t\t\tleverageNative( el, \"click\", true );\n\t\t\t\t}\n\n\t\t\t\t// Return false to allow normal processing in the caller\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\ttrigger: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Force setup before triggering a click\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\tleverageNative( el, \"click\" );\n\t\t\t\t}\n\n\t\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, suppress native .click() on links\n\t\t\t// Also prevent it if we're currently inside a leveraged native-event stack\n\t\t\t_default: function( event ) {\n\t\t\t\tvar target = event.target;\n\t\t\t\treturn rcheckableType.test( target.type ) &&\n\t\t\t\t\ttarget.click && nodeName( target, \"input\" ) &&\n\t\t\t\t\tdataPriv.get( target, \"click\" ) ||\n\t\t\t\t\tnodeName( target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Ensure the presence of an event listener that handles manually-triggered\n// synthetic events by interrupting progress until reinvoked in response to\n// *native* events that it fires directly, ensuring that state changes have\n// already occurred before other listeners are invoked.\nfunction leverageNative( el, type, isSetup ) {\n\n\t// Missing `isSetup` indicates a trigger call, which must force setup through jQuery.event.add\n\tif ( !isSetup ) {\n\t\tif ( dataPriv.get( el, type ) === undefined ) {\n\t\t\tjQuery.event.add( el, type, returnTrue );\n\t\t}\n\t\treturn;\n\t}\n\n\t// Register the controller as a special universal handler for all event namespaces\n\tdataPriv.set( el, type, false );\n\tjQuery.event.add( el, type, {\n\t\tnamespace: false,\n\t\thandler: function( event ) {\n\t\t\tvar result,\n\t\t\t\tsaved = dataPriv.get( this, type );\n\n\t\t\tif ( ( event.isTrigger & 1 ) && this[ type ] ) {\n\n\t\t\t\t// Interrupt processing of the outer synthetic .trigger()ed event\n\t\t\t\tif ( !saved ) {\n\n\t\t\t\t\t// Store arguments for use when handling the inner native event\n\t\t\t\t\t// There will always be at least one argument (an event object), so this array\n\t\t\t\t\t// will not be confused with a leftover capture object.\n\t\t\t\t\tsaved = slice.call( arguments );\n\t\t\t\t\tdataPriv.set( this, type, saved );\n\n\t\t\t\t\t// Trigger the native event and capture its result\n\t\t\t\t\tthis[ type ]();\n\t\t\t\t\tresult = dataPriv.get( this, type );\n\t\t\t\t\tdataPriv.set( this, type, false );\n\n\t\t\t\t\tif ( saved !== result ) {\n\n\t\t\t\t\t\t// Cancel the outer synthetic event\n\t\t\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t// If this is an inner synthetic event for an event with a bubbling surrogate\n\t\t\t\t// (focus or blur), assume that the surrogate already propagated from triggering\n\t\t\t\t// the native event and prevent that from happening again here.\n\t\t\t\t// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n\t\t\t\t// bubbling surrogate propagates *after* the non-bubbling base), but that seems\n\t\t\t\t// less bad than duplication.\n\t\t\t\t} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\n\t\t\t// If this is a native event triggered above, everything is now in order\n\t\t\t// Fire an inner synthetic event with the original arguments\n\t\t\t} else if ( saved ) {\n\n\t\t\t\t// ...and capture the result\n\t\t\t\tdataPriv.set( this, type, jQuery.event.trigger(\n\t\t\t\t\tsaved[ 0 ],\n\t\t\t\t\tsaved.slice( 1 ),\n\t\t\t\t\tthis\n\t\t\t\t) );\n\n\t\t\t\t// Abort handling of the native event by all jQuery handlers while allowing\n\t\t\t\t// native handlers on the same element to run. On target, this is achieved\n\t\t\t\t// by stopping immediate propagation just on the jQuery event. However,\n\t\t\t\t// the native event is re-wrapped by a jQuery one on each level of the\n\t\t\t\t// propagation so the only way to stop it for jQuery is to stop it for\n\t\t\t\t// everyone via native `stopPropagation()`. This is not a problem for\n\t\t\t\t// focus/blur which don't bubble, but it does also stop click on checkboxes\n\t\t\t\t// and radios. We accept this limitation.\n\t\t\t\tevent.stopPropagation();\n\t\t\t\tevent.isImmediatePropagationStopped = returnTrue;\n\t\t\t}\n\t\t}\n\t} );\n}\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (trac-504, trac-13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || Date.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcode: true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\twhich: true\n}, jQuery.event.addProp );\n\njQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( type, delegateType ) {\n\n\tfunction focusMappedHandler( nativeEvent ) {\n\t\tif ( document.documentMode ) {\n\n\t\t\t// Support: IE 11+\n\t\t\t// Attach a single focusin/focusout handler on the document while someone wants\n\t\t\t// focus/blur. This is because the former are synchronous in IE while the latter\n\t\t\t// are async. In other browsers, all those handlers are invoked synchronously.\n\n\t\t\t// `handle` from private data would already wrap the event, but we need\n\t\t\t// to change the `type` here.\n\t\t\tvar handle = dataPriv.get( this, \"handle\" ),\n\t\t\t\tevent = jQuery.event.fix( nativeEvent );\n\t\t\tevent.type = nativeEvent.type === \"focusin\" ? \"focus\" : \"blur\";\n\t\t\tevent.isSimulated = true;\n\n\t\t\t// First, handle focusin/focusout\n\t\t\thandle( nativeEvent );\n\n\t\t\t// ...then, handle focus/blur\n\t\t\t//\n\t\t\t// focus/blur don't bubble while focusin/focusout do; simulate the former by only\n\t\t\t// invoking the handler at the lower level.\n\t\t\tif ( event.target === event.currentTarget ) {\n\n\t\t\t\t// The setup part calls `leverageNative`, which, in turn, calls\n\t\t\t\t// `jQuery.event.add`, so event handle will already have been set\n\t\t\t\t// by this point.\n\t\t\t\thandle( event );\n\t\t\t}\n\t\t} else {\n\n\t\t\t// For non-IE browsers, attach a single capturing handler on the document\n\t\t\t// while someone wants focusin/focusout.\n\t\t\tjQuery.event.simulate( delegateType, nativeEvent.target,\n\t\t\t\tjQuery.event.fix( nativeEvent ) );\n\t\t}\n\t}\n\n\tjQuery.event.special[ type ] = {\n\n\t\t// Utilize native event if possible so blur/focus sequence is correct\n\t\tsetup: function() {\n\n\t\t\tvar attaches;\n\n\t\t\t// Claim the first handler\n\t\t\t// dataPriv.set( this, \"focus\", ... )\n\t\t\t// dataPriv.set( this, \"blur\", ... )\n\t\t\tleverageNative( this, type, true );\n\n\t\t\tif ( document.documentMode ) {\n\n\t\t\t\t// Support: IE 9 - 11+\n\t\t\t\t// We use the same native handler for focusin & focus (and focusout & blur)\n\t\t\t\t// so we need to coordinate setup & teardown parts between those events.\n\t\t\t\t// Use `delegateType` as the key as `type` is already used by `leverageNative`.\n\t\t\t\tattaches = dataPriv.get( this, delegateType );\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tthis.addEventListener( delegateType, focusMappedHandler );\n\t\t\t\t}\n\t\t\t\tdataPriv.set( this, delegateType, ( attaches || 0 ) + 1 );\n\t\t\t} else {\n\n\t\t\t\t// Return false to allow normal processing in the caller\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\ttrigger: function() {\n\n\t\t\t// Force setup before trigger\n\t\t\tleverageNative( this, type );\n\n\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\treturn true;\n\t\t},\n\n\t\tteardown: function() {\n\t\t\tvar attaches;\n\n\t\t\tif ( document.documentMode ) {\n\t\t\t\tattaches = dataPriv.get( this, delegateType ) - 1;\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tthis.removeEventListener( delegateType, focusMappedHandler );\n\t\t\t\t\tdataPriv.remove( this, delegateType );\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.set( this, delegateType, attaches );\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Return false to indicate standard teardown should be applied\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\n\t\t// Suppress native focus or blur if we're currently inside\n\t\t// a leveraged native-event stack\n\t\t_default: function( event ) {\n\t\t\treturn dataPriv.get( event.target, type );\n\t\t},\n\n\t\tdelegateType: delegateType\n\t};\n\n\t// Support: Firefox <=44\n\t// Firefox doesn't have focus(in | out) events\n\t// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n\t//\n\t// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n\t// focus(in | out) events fire after focus & blur events,\n\t// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n\t// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\n\t//\n\t// Support: IE 9 - 11+\n\t// To preserve relative focusin/focus & focusout/blur event order guaranteed on the 3.x branch,\n\t// attach a single handler for both events in IE.\n\tjQuery.event.special[ delegateType ] = {\n\t\tsetup: function() {\n\n\t\t\t// Handle: regular nodes (via `this.ownerDocument`), window\n\t\t\t// (via `this.document`) & document (via `this`).\n\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\tdataHolder = document.documentMode ? this : doc,\n\t\t\t\tattaches = dataPriv.get( dataHolder, delegateType );\n\n\t\t\t// Support: IE 9 - 11+\n\t\t\t// We use the same native handler for focusin & focus (and focusout & blur)\n\t\t\t// so we need to coordinate setup & teardown parts between those events.\n\t\t\t// Use `delegateType` as the key as `type` is already used by `leverageNative`.\n\t\t\tif ( !attaches ) {\n\t\t\t\tif ( document.documentMode ) {\n\t\t\t\t\tthis.addEventListener( delegateType, focusMappedHandler );\n\t\t\t\t} else {\n\t\t\t\t\tdoc.addEventListener( type, focusMappedHandler, true );\n\t\t\t\t}\n\t\t\t}\n\t\t\tdataPriv.set( dataHolder, delegateType, ( attaches || 0 ) + 1 );\n\t\t},\n\t\tteardown: function() {\n\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\tdataHolder = document.documentMode ? this : doc,\n\t\t\t\tattaches = dataPriv.get( dataHolder, delegateType ) - 1;\n\n\t\t\tif ( !attaches ) {\n\t\t\t\tif ( document.documentMode ) {\n\t\t\t\t\tthis.removeEventListener( delegateType, focusMappedHandler );\n\t\t\t\t} else {\n\t\t\t\t\tdoc.removeEventListener( type, focusMappedHandler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( dataHolder, delegateType );\n\t\t\t} else {\n\t\t\t\tdataPriv.set( dataHolder, delegateType, attaches );\n\t\t\t}\n\t\t}\n\t};\n} );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\n\trcleanScript = /^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.get( src );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdataPriv.remove( dest, \"handle events\" );\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = flat( args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (trac-8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Re-enable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl && !node.noModule ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src, {\n\t\t\t\t\t\t\t\t\tnonce: node.nonce || node.getAttribute( \"nonce\" )\n\t\t\t\t\t\t\t\t}, doc );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Unwrap a CDATA section containing script contents. This shouldn't be\n\t\t\t\t\t\t\t// needed as in XML documents they're already not visible when\n\t\t\t\t\t\t\t// inspecting element contents and in HTML documents they have no\n\t\t\t\t\t\t\t// meaning but we're preserving that logic for backwards compatibility.\n\t\t\t\t\t\t\t// This will be removed completely in 4.0. See gh-4904.\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), node, doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && isAttached( node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html;\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = isAttached( elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew jQuery#find here for performance reasons:\n\t\t\t// https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar rcustomProp = /^--/;\n\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar swap = function( elem, options, callback ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.call( elem );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\nvar rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\n\t\t\t\"margin-top:1px;padding:0;border:0\";\n\t\tdiv.style.cssText =\n\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"width:60%;top:1%\";\n\t\tdocumentElement.appendChild( container ).appendChild( div );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.right = \"60%\";\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n\n\t\t// Support: IE 9 - 11 only\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n\n\t\t// Support: IE 9 only\n\t\t// Detect overflow:scroll screwiness (gh-3699)\n\t\t// Support: Chrome <=64\n\t\t// Don't get tricked when zoom affects offsetWidth (gh-4029)\n\t\tdiv.style.position = \"absolute\";\n\t\tscrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tfunction roundPixelMeasures( measure ) {\n\t\treturn Math.round( parseFloat( measure ) );\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n\t\treliableTrDimensionsVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (trac-8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tjQuery.extend( support, {\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelBoxStyles: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelBoxStylesVal;\n\t\t},\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\tscrollboxSize: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn scrollboxSizeVal;\n\t\t},\n\n\t\t// Support: IE 9 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Behavior in IE 9 is more subtle than in newer versions & it passes\n\t\t// some versions of this test; make sure not to make it pass there!\n\t\t//\n\t\t// Support: Firefox 70+\n\t\t// Only Firefox includes border widths\n\t\t// in computed dimensions. (gh-4529)\n\t\treliableTrDimensions: function() {\n\t\t\tvar table, tr, trChild, trStyle;\n\t\t\tif ( reliableTrDimensionsVal == null ) {\n\t\t\t\ttable = document.createElement( \"table\" );\n\t\t\t\ttr = document.createElement( \"tr\" );\n\t\t\t\ttrChild = document.createElement( \"div\" );\n\n\t\t\t\ttable.style.cssText = \"position:absolute;left:-11111px;border-collapse:separate\";\n\t\t\t\ttr.style.cssText = \"box-sizing:content-box;border:1px solid\";\n\n\t\t\t\t// Support: Chrome 86+\n\t\t\t\t// Height set through cssText does not get applied.\n\t\t\t\t// Computed height then comes back as 0.\n\t\t\t\ttr.style.height = \"1px\";\n\t\t\t\ttrChild.style.height = \"9px\";\n\n\t\t\t\t// Support: Android 8 Chrome 86+\n\t\t\t\t// In our bodyBackground.html iframe,\n\t\t\t\t// display for all div elements is set to \"inline\",\n\t\t\t\t// which causes a problem only in Android 8 Chrome 86.\n\t\t\t\t// Ensuring the div is `display: block`\n\t\t\t\t// gets around this issue.\n\t\t\t\ttrChild.style.display = \"block\";\n\n\t\t\t\tdocumentElement\n\t\t\t\t\t.appendChild( table )\n\t\t\t\t\t.appendChild( tr )\n\t\t\t\t\t.appendChild( trChild );\n\n\t\t\t\ttrStyle = window.getComputedStyle( tr );\n\t\t\t\treliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderTopWidth, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;\n\n\t\t\t\tdocumentElement.removeChild( table );\n\t\t\t}\n\t\t\treturn reliableTrDimensionsVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\t\tisCustomProp = rcustomProp.test( name ),\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, trac-12537)\n\t//   .css('--customProperty) (gh-3144)\n\tif ( computed ) {\n\n\t\t// Support: IE <=9 - 11+\n\t\t// IE only supports `\"float\"` in `getPropertyValue`; in computed styles\n\t\t// it's only available as `\"cssFloat\"`. We no longer modify properties\n\t\t// sent to `.css()` apart from camelCasing, so we need to check both.\n\t\t// Normally, this would create difference in behavior: if\n\t\t// `getPropertyValue` returns an empty string, the value returned\n\t\t// by `.css()` would be `undefined`. This is usually the case for\n\t\t// disconnected elements. However, in IE even disconnected elements\n\t\t// with no styles return `\"none\"` for `getPropertyValue( \"float\" )`\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( isCustomProp && ret ) {\n\n\t\t\t// Support: Firefox 105+, Chrome <=105+\n\t\t\t// Spec requires trimming whitespace for custom properties (gh-4926).\n\t\t\t// Firefox only trims leading whitespace. Chrome just collapses\n\t\t\t// both leading & trailing whitespace to a single space.\n\t\t\t//\n\t\t\t// Fall back to `undefined` if empty string returned.\n\t\t\t// This collapses a missing definition with property defined\n\t\t\t// and set to an empty string but there's no standard API\n\t\t\t// allowing us to differentiate them without a performance penalty\n\t\t\t// and returning `undefined` aligns with older jQuery.\n\t\t\t//\n\t\t\t// rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED\n\t\t\t// as whitespace while CSS does not, but this is not a problem\n\t\t\t// because CSS preprocessing replaces them with U+000A LINE FEED\n\t\t\t// (which *is* CSS whitespace)\n\t\t\t// https://www.w3.org/TR/css-syntax-3/#input-preprocessing\n\t\t\tret = ret.replace( rtrimCSS, \"$1\" ) || undefined;\n\t\t}\n\n\t\tif ( ret === \"\" && !isAttached( elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar cssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style,\n\tvendorProps = {};\n\n// Return a vendor-prefixed property or undefined\nfunction vendorPropName( name ) {\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a potentially-mapped jQuery.cssProps or vendor prefixed property\nfunction finalPropName( name ) {\n\tvar final = jQuery.cssProps[ name ] || vendorProps[ name ];\n\n\tif ( final ) {\n\t\treturn final;\n\t}\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\treturn vendorProps[ name ] = vendorPropName( name ) || name;\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t};\n\nfunction setPositiveNumber( _elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n\tvar i = dimension === \"width\" ? 1 : 0,\n\t\textra = 0,\n\t\tdelta = 0,\n\t\tmarginDelta = 0;\n\n\t// Adjustment may not be necessary\n\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\treturn 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin\n\t\t// Count margin delta separately to only add it after scroll gutter adjustment.\n\t\t// This is needed to make negative margins work with `outerHeight( true )` (gh-3982).\n\t\tif ( box === \"margin\" ) {\n\t\t\tmarginDelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\t\tif ( !isBorderBox ) {\n\n\t\t\t// Add padding\n\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// For \"border\" or \"margin\", add border\n\t\t\tif ( box !== \"padding\" ) {\n\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\n\t\t\t// But still keep track of it otherwise\n\t\t\t} else {\n\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\n\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n\t\t// \"padding\" or \"margin\"\n\t\t} else {\n\n\t\t\t// For \"content\", subtract padding\n\t\t\tif ( box === \"content\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// For \"content\" or \"padding\", subtract border\n\t\t\tif ( box !== \"margin\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\n\tif ( !isBorderBox && computedVal >= 0 ) {\n\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\n\t\tdelta += Math.max( 0, Math.ceil(\n\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\tcomputedVal -\n\t\t\tdelta -\n\t\t\textra -\n\t\t\t0.5\n\n\t\t// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\n\t\t// Use an explicit zero to avoid NaN (gh-3964)\n\t\t) ) || 0;\n\t}\n\n\treturn delta + marginDelta;\n}\n\nfunction getWidthOrHeight( elem, dimension, extra ) {\n\n\t// Start with computed style\n\tvar styles = getStyles( elem ),\n\n\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n\t\t// Fake content-box until we know it's needed to know the true value.\n\t\tboxSizingNeeded = !support.boxSizingReliable() || extra,\n\t\tisBorderBox = boxSizingNeeded &&\n\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\tvalueIsBorderBox = isBorderBox,\n\n\t\tval = curCSS( elem, dimension, styles ),\n\t\toffsetProp = \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );\n\n\t// Support: Firefox <=54\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n\tif ( rnumnonpx.test( val ) ) {\n\t\tif ( !extra ) {\n\t\t\treturn val;\n\t\t}\n\t\tval = \"auto\";\n\t}\n\n\n\t// Support: IE 9 - 11 only\n\t// Use offsetWidth/offsetHeight for when box sizing is unreliable.\n\t// In those cases, the computed value can be trusted to be border-box.\n\tif ( ( !support.boxSizingReliable() && isBorderBox ||\n\n\t\t// Support: IE 10 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Interestingly, in some cases IE 9 doesn't suffer from this issue.\n\t\t!support.reliableTrDimensions() && nodeName( elem, \"tr\" ) ||\n\n\t\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n\t\t// This happens for inline elements with no explicit setting (gh-3571)\n\t\tval === \"auto\" ||\n\n\t\t// Support: Android <=4.1 - 4.3 only\n\t\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) &&\n\n\t\t// Make sure the element is visible & connected\n\t\telem.getClientRects().length ) {\n\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t\t// Where available, offsetWidth/offsetHeight approximate border box dimensions.\n\t\t// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n\t\t// retrieved value as a content box dimension.\n\t\tvalueIsBorderBox = offsetProp in elem;\n\t\tif ( valueIsBorderBox ) {\n\t\t\tval = elem[ offsetProp ];\n\t\t}\n\t}\n\n\t// Normalize \"\" and auto\n\tval = parseFloat( val ) || 0;\n\n\t// Adjust for the element's box model\n\treturn ( val +\n\t\tboxModelAdjustment(\n\t\t\telem,\n\t\t\tdimension,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles,\n\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n\t\t\tval\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\tanimationIterationCount: true,\n\t\taspectRatio: true,\n\t\tborderImageSlice: true,\n\t\tcolumnCount: true,\n\t\tflexGrow: true,\n\t\tflexShrink: true,\n\t\tfontWeight: true,\n\t\tgridArea: true,\n\t\tgridColumn: true,\n\t\tgridColumnEnd: true,\n\t\tgridColumnStart: true,\n\t\tgridRow: true,\n\t\tgridRowEnd: true,\n\t\tgridRowStart: true,\n\t\tlineHeight: true,\n\t\topacity: true,\n\t\torder: true,\n\t\torphans: true,\n\t\tscale: true,\n\t\twidows: true,\n\t\tzIndex: true,\n\t\tzoom: true,\n\n\t\t// SVG-related\n\t\tfillOpacity: true,\n\t\tfloodOpacity: true,\n\t\tstopOpacity: true,\n\t\tstrokeMiterlimit: true,\n\t\tstrokeOpacity: true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (trac-7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug trac-9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (trac-7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\t// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n\t\t\t// \"px\" to a few hardcoded values.\n\t\t\tif ( type === \"number\" && !isCustomProp ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( _i, dimension ) {\n\tjQuery.cssHooks[ dimension ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n\t\t\t\t\t} ) :\n\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = getStyles( elem ),\n\n\t\t\t\t// Only read styles.position if the test has a chance to fail\n\t\t\t\t// to avoid forcing a reflow.\n\t\t\t\tscrollboxSizeBuggy = !support.scrollboxSize() &&\n\t\t\t\t\tstyles.position === \"absolute\",\n\n\t\t\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n\t\t\t\tboxSizingNeeded = scrollboxSizeBuggy || extra,\n\t\t\t\tisBorderBox = boxSizingNeeded &&\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\tsubtract = extra ?\n\t\t\t\t\tboxModelAdjustment(\n\t\t\t\t\t\telem,\n\t\t\t\t\t\tdimension,\n\t\t\t\t\t\textra,\n\t\t\t\t\t\tisBorderBox,\n\t\t\t\t\t\tstyles\n\t\t\t\t\t) :\n\t\t\t\t\t0;\n\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n\t\t\t// faking a content-box to get border and padding (gh-3699)\n\t\t\tif ( isBorderBox && scrollboxSizeBuggy ) {\n\t\t\t\tsubtract -= Math.ceil(\n\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\n\t\t\t\t\t0.5\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ dimension ] = value;\n\t\t\t\tvalue = jQuery.css( elem, dimension );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( prefix !== \"margin\" ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 && (\n\t\t\t\tjQuery.cssHooks[ tween.prop ] ||\n\t\t\t\t\ttween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = Date.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n\t\t// the overflowX value there.\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tresult.stop.bind( result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tisFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\n\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( _i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = Date.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( _i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// Use proper attribute retrieval (trac-12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classNames, cur, curValue, className, i, finalValue;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\tif ( classNames.length ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tcurValue = getClass( this );\n\t\t\t\tcur = this.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\t\tclassName = classNames[ i ];\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + className + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += className + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\tthis.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classNames, cur, curValue, className, i, finalValue;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\tif ( classNames.length ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tcurValue = getClass( this );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = this.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\t\tclassName = classNames[ i ];\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + className + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + className + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\tthis.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar classNames, className, i, self,\n\t\t\ttype = typeof value,\n\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\treturn this.each( function() {\n\t\t\tif ( isValidValue ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\tself = jQuery( this );\n\n\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\tclassName = classNames[ i ];\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (trac-14686, trac-14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (trac-2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\nvar location = window.location;\n\nvar nonce = { guid: Date.now() };\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml, parserErrorElem;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {}\n\n\tparserErrorElem = xml && xml.getElementsByTagName( \"parsererror\" )[ 0 ];\n\tif ( !xml || parserErrorElem ) {\n\t\tjQuery.error( \"Invalid XML: \" + (\n\t\t\tparserErrorElem ?\n\t\t\t\tjQuery.map( parserErrorElem.childNodes, function( el ) {\n\t\t\t\t\treturn el.textContent;\n\t\t\t\t} ).join( \"\\n\" ) :\n\t\t\t\tdata\n\t\t) );\n\t}\n\treturn xml;\n};\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\tstopPropagationCallback = function( e ) {\n\t\te.stopPropagation();\n\t};\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = lastElement = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (trac-9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tlastElement = cur;\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || Object.create( null ) )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (trac-6170)\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\telem[ type ]();\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && toType( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\tif ( a == null ) {\n\t\treturn \"\";\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} ).filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} ).map( function( _i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// trac-7653, trac-8125, trac-8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\noriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes trac-9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() + \" \" ] =\n\t\t\t\t\t\t\t\t\t( responseHeaders[ match[ 1 ].toLowerCase() + \" \" ] || [] )\n\t\t\t\t\t\t\t\t\t\t.concat( match[ 2 ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() + \" \" ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match.join( \", \" );\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (trac-10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket trac-12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available and should be processed, append data to url\n\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// trac-9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce.guid++ ) +\n\t\t\t\t\tuncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Use a noop converter for missing script but not if jsonp\n\t\t\tif ( !isSuccess &&\n\t\t\t\tjQuery.inArray( \"script\", s.dataTypes ) > -1 &&\n\t\t\t\tjQuery.inArray( \"json\", s.dataTypes ) < 0 ) {\n\t\t\t\ts.converters[ \"text script\" ] = function() {};\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( _i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\njQuery.ajaxPrefilter( function( s ) {\n\tvar i;\n\tfor ( i in s.headers ) {\n\t\tif ( i.toLowerCase() === \"content-type\" ) {\n\t\t\ts.contentType = s.headers[ i ] || \"\";\n\t\t}\n\t}\n} );\n\n\njQuery._evalUrl = function( url, options, doc ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (trac-11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\n\t\t// Only evaluate the response if it is successful (gh-4126)\n\t\t// dataFilter is not invoked for failure responses, so using it instead\n\t\t// of the default converter is kludgy but it works.\n\t\tconverters: {\n\t\t\t\"text script\": function() {}\n\t\t},\n\t\tdataFilter: function( response ) {\n\t\t\tjQuery.globalEval( response, options, doc );\n\t\t}\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar htmlIsFunction = isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// trac-1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see trac-8605, trac-14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// trac-14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain or forced-by-attrs requests\n\tif ( s.crossDomain || s.scriptAttrs ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" )\n\t\t\t\t\t.attr( s.scriptAttrs || {} )\n\t\t\t\t\t.prop( { charset: s.scriptCharset, src: s.url } )\n\t\t\t\t\t.on( \"load error\", callback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce.guid++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\n\t// offset() relates an element's border box to the document origin\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\t\trect = elem.getBoundingClientRect();\n\t\twin = elem.ownerDocument.defaultView;\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset,\n\t\t\tleft: rect.left + win.pageXOffset\n\t\t};\n\t},\n\n\t// position() relates an element's margin box to its offset parent's padding box\n\t// This corresponds to the behavior of CSS absolute positioning\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset, doc,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\toffset = this.offset();\n\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n\t\t\t// when a statically positioned element is identified\n\t\t\tdoc = elem.ownerDocument;\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n\t\t\twhile ( offsetParent &&\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\n\t\t\t\toffsetParent = offsetParent.parentNode;\n\t\t\t}\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\n\t\t\t}\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( _i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( {\n\t\tpadding: \"inner\" + name,\n\t\tcontent: type,\n\t\t\"\": \"outer\" + name\n\t}, function( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( _i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t},\n\n\thover: function( fnOver, fnOut ) {\n\t\treturn this\n\t\t\t.on( \"mouseenter\", fnOver )\n\t\t\t.on( \"mouseleave\", fnOut || fnOver );\n\t}\n} );\n\njQuery.each(\n\t( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( _i, name ) {\n\n\t\t// Handle event binding\n\t\tjQuery.fn[ name ] = function( data, fn ) {\n\t\t\treturn arguments.length > 0 ?\n\t\t\t\tthis.on( name, null, data, fn ) :\n\t\t\t\tthis.trigger( name );\n\t\t};\n\t}\n);\n\n\n\n\n// Support: Android <=4.0 only\n// Make sure we trim BOM and NBSP\n// Require that the \"whitespace run\" starts from a non-whitespace\n// to avoid O(N^2) behavior when the engine would try matching \"\\s+$\" at each space position.\nvar rtrim = /^[\\s\\uFEFF\\xA0]+|([^\\s\\uFEFF\\xA0])[\\s\\uFEFF\\xA0]+$/g;\n\n// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy = function( fn, context ) {\n\tvar tmp, args, proxy;\n\n\tif ( typeof context === \"string\" ) {\n\t\ttmp = fn[ context ];\n\t\tcontext = fn;\n\t\tfn = tmp;\n\t}\n\n\t// Quick check to determine if target is callable, in the spec\n\t// this throws a TypeError, but we will just return undefined.\n\tif ( !isFunction( fn ) ) {\n\t\treturn undefined;\n\t}\n\n\t// Simulated bind\n\targs = slice.call( arguments, 2 );\n\tproxy = function() {\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t};\n\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\treturn proxy;\n};\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\njQuery.isFunction = isFunction;\njQuery.isWindow = isWindow;\njQuery.camelCase = camelCase;\njQuery.type = toType;\n\njQuery.now = Date.now;\n\njQuery.isNumeric = function( obj ) {\n\n\t// As of jQuery 3.0, isNumeric is limited to\n\t// strings and numbers (primitives or objects)\n\t// that can be coerced to finite numbers (gh-2662)\n\tvar type = jQuery.type( obj );\n\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t!isNaN( obj - parseFloat( obj ) );\n};\n\njQuery.trim = function( text ) {\n\treturn text == null ?\n\t\t\"\" :\n\t\t( text + \"\" ).replace( rtrim, \"$1\" );\n};\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\treturn jQuery;\n\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (trac-13566)\nif ( typeof noGlobal === \"undefined\" ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery/dist/jquery.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\n");

/***/ }),

/***/ "./package/resources/js/app/custom/dropzone.js":
/*!*****************************************************!*\
  !*** ./package/resources/js/app/custom/dropzone.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(jQuery, module, $) {\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (_typeof(call) === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + _typeof(superClass));\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar Emitter = function () {\n  function Emitter() {\n    _classCallCheck(this, Emitter);\n  }\n  _createClass(Emitter, [{\n    key: \"on\",\n    value: function on(event, fn) {\n      this._callbacks = this._callbacks || {};\n      if (!this._callbacks[event]) {\n        this._callbacks[event] = [];\n      }\n      this._callbacks[event].push(fn);\n      return this;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(event) {\n      this._callbacks = this._callbacks || {};\n      var callbacks = this._callbacks[event];\n      if (callbacks) {\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        for (var _iterator = callbacks, _isArray = true, _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          var _ref;\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref = _i.value;\n          }\n          var callback = _ref;\n          callback.apply(this, args);\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"off\",\n    value: function off(event, fn) {\n      if (!this._callbacks || arguments.length === 0) {\n        this._callbacks = {};\n        return this;\n      }\n      var callbacks = this._callbacks[event];\n      if (!callbacks) {\n        return this;\n      }\n      if (arguments.length === 1) {\n        delete this._callbacks[event];\n        return this;\n      }\n      for (var i = 0; i < callbacks.length; i++) {\n        var callback = callbacks[i];\n        if (callback === fn) {\n          callbacks.splice(i, 1);\n          break;\n        }\n      }\n      return this;\n    }\n  }]);\n  return Emitter;\n}();\nvar Dropzone = function (_Emitter) {\n  _inherits(Dropzone, _Emitter);\n  _createClass(Dropzone, null, [{\n    key: \"initClass\",\n    value: function initClass() {\n      this.prototype.Emitter = Emitter;\n      this.prototype.events = [\"drop\", \"dragstart\", \"dragend\", \"dragenter\", \"dragover\", \"dragleave\", \"addedfile\", \"addedfiles\", \"removedfile\", \"thumbnail\", \"error\", \"errormultiple\", \"processing\", \"processingmultiple\", \"uploadprogress\", \"totaluploadprogress\", \"sending\", \"sendingmultiple\", \"success\", \"successmultiple\", \"canceled\", \"canceledmultiple\", \"complete\", \"completemultiple\", \"reset\", \"maxfilesexceeded\", \"maxfilesreached\", \"queuecomplete\"];\n      this.prototype.defaultOptions = {\n        url: null,\n        method: \"post\",\n        withCredentials: false,\n        timeout: 30000,\n        parallelUploads: 2,\n        uploadMultiple: false,\n        chunking: false,\n        forceChunking: false,\n        chunkSize: 2000000,\n        parallelChunkUploads: false,\n        retryChunks: false,\n        retryChunksLimit: 3,\n        maxFilesize: 256,\n        paramName: \"file\",\n        createImageThumbnails: true,\n        maxThumbnailFilesize: 10,\n        thumbnailWidth: 120,\n        thumbnailHeight: 120,\n        thumbnailMethod: 'crop',\n        resizeWidth: null,\n        resizeHeight: null,\n        resizeMimeType: null,\n        resizeQuality: 0.8,\n        resizeMethod: 'contain',\n        filesizeBase: 1000,\n        maxFiles: null,\n        headers: null,\n        clickable: true,\n        ignoreHiddenFiles: true,\n        acceptedFiles: null,\n        acceptedMimeTypes: null,\n        autoProcessQueue: true,\n        autoQueue: true,\n        addRemoveLinks: false,\n        previewsContainer: null,\n        hiddenInputContainer: \"body\",\n        capture: null,\n        renameFilename: null,\n        renameFile: null,\n        forceFallback: false,\n        dictDefaultMessage: \"Drop files here to upload\",\n        dictFallbackMessage: \"Your browser does not support drag'n'drop file uploads.\",\n        dictFallbackText: \"Please use the fallback form below to upload your files like in the olden days.\",\n        dictFileTooBig: \"File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.\",\n        dictInvalidFileType: \"You can't upload files of this type.\",\n        dictResponseError: \"Server responded with {{statusCode}} code.\",\n        dictCancelUpload: \"Cancel upload\",\n        dictCancelUploadConfirmation: \"Are you sure you want to cancel this upload?\",\n        dictRemoveFile: \"Remove file\",\n        dictRemoveFileConfirmation: null,\n        dictMaxFilesExceeded: \"You can not upload any more files.\",\n        dictFileSizeUnits: {\n          tb: \"TB\",\n          gb: \"GB\",\n          mb: \"MB\",\n          kb: \"KB\",\n          b: \"b\"\n        },\n        init: function init() {},\n        params: function params(files, xhr, chunk) {\n          if (chunk) {\n            return {\n              dzuuid: chunk.file.upload.uuid,\n              dzchunkindex: chunk.index,\n              dztotalfilesize: chunk.file.size,\n              dzchunksize: this.options.chunkSize,\n              dztotalchunkcount: chunk.file.upload.totalChunkCount,\n              dzchunkbyteoffset: chunk.index * this.options.chunkSize\n            };\n          }\n        },\n        accept: function accept(file, done) {\n          return done();\n        },\n        chunksUploaded: function chunksUploaded(file, done) {\n          done();\n        },\n        fallback: function fallback() {\n          var messageElement = void 0;\n          this.element.className = this.element.className + \" dz-browser-not-supported\";\n          for (var _iterator2 = this.element.getElementsByTagName(\"div\"), _isArray2 = true, _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n            var _ref2;\n            if (_isArray2) {\n              if (_i2 >= _iterator2.length) break;\n              _ref2 = _iterator2[_i2++];\n            } else {\n              _i2 = _iterator2.next();\n              if (_i2.done) break;\n              _ref2 = _i2.value;\n            }\n            var child = _ref2;\n            if (/(^| )dz-message($| )/.test(child.className)) {\n              messageElement = child;\n              child.className = \"dz-message\";\n              break;\n            }\n          }\n          if (!messageElement) {\n            messageElement = Dropzone.createElement(\"<div class=\\\"dz-message\\\"><span></span></div>\");\n            this.element.appendChild(messageElement);\n          }\n          var span = messageElement.getElementsByTagName(\"span\")[0];\n          if (span) {\n            if (span.textContent != null) {\n              span.textContent = this.options.dictFallbackMessage;\n            } else if (span.innerText != null) {\n              span.innerText = this.options.dictFallbackMessage;\n            }\n          }\n          return this.element.appendChild(this.getFallbackForm());\n        },\n        resize: function resize(file, width, height, resizeMethod) {\n          var info = {\n            srcX: 0,\n            srcY: 0,\n            srcWidth: file.width,\n            srcHeight: file.height\n          };\n          var srcRatio = file.width / file.height;\n          if (width == null && height == null) {\n            width = info.srcWidth;\n            height = info.srcHeight;\n          } else if (width == null) {\n            width = height * srcRatio;\n          } else if (height == null) {\n            height = width / srcRatio;\n          }\n          width = Math.min(width, info.srcWidth);\n          height = Math.min(height, info.srcHeight);\n          var trgRatio = width / height;\n          if (info.srcWidth > width || info.srcHeight > height) {\n            if (resizeMethod === 'crop') {\n              if (srcRatio > trgRatio) {\n                info.srcHeight = file.height;\n                info.srcWidth = info.srcHeight * trgRatio;\n              } else {\n                info.srcWidth = file.width;\n                info.srcHeight = info.srcWidth / trgRatio;\n              }\n            } else if (resizeMethod === 'contain') {\n              if (srcRatio > trgRatio) {\n                height = width / srcRatio;\n              } else {\n                width = height * srcRatio;\n              }\n            } else {\n              throw new Error(\"Unknown resizeMethod '\" + resizeMethod + \"'\");\n            }\n          }\n          info.srcX = (file.width - info.srcWidth) / 2;\n          info.srcY = (file.height - info.srcHeight) / 2;\n          info.trgWidth = width;\n          info.trgHeight = height;\n          return info;\n        },\n        transformFile: function transformFile(file, done) {\n          if ((this.options.resizeWidth || this.options.resizeHeight) && file.type.match(/image.*/)) {\n            return this.resizeImage(file, this.options.resizeWidth, this.options.resizeHeight, this.options.resizeMethod, done);\n          } else {\n            return done(file);\n          }\n        },\n        previewTemplate: \"<div class=\\\"dz-preview dz-file-preview\\\">\\n  <div class=\\\"dz-image\\\"><img data-dz-thumbnail /></div>\\n  <div class=\\\"dz-details\\\">\\n    <div class=\\\"dz-size\\\"><span data-dz-size></span></div>\\n    <div class=\\\"dz-filename\\\"><span data-dz-name></span></div>\\n  </div>\\n  <div class=\\\"dz-progress\\\"><span class=\\\"dz-upload\\\" data-dz-uploadprogress></span></div>\\n  <div class=\\\"dz-error-message\\\"><span data-dz-errormessage></span></div>\\n  <div class=\\\"dz-success-mark\\\">\\n    <svg width=\\\"54px\\\" height=\\\"54px\\\" viewBox=\\\"0 0 54 54\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:sketch=\\\"http://www.bohemiancoding.com/sketch/ns\\\">\\n      <title>Check</title>\\n      <defs></defs>\\n      <g id=\\\"Page-1\\\" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" sketch:type=\\\"MSPage\\\">\\n        <path d=\\\"M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\\\" id=\\\"Oval-2\\\" stroke-opacity=\\\"0.198794158\\\" stroke=\\\"#747474\\\" fill-opacity=\\\"0.816519475\\\" fill=\\\"#FFFFFF\\\" sketch:type=\\\"MSShapeGroup\\\"></path>\\n      </g>\\n    </svg>\\n  </div>\\n  <div class=\\\"dz-error-mark\\\">\\n    <svg width=\\\"54px\\\" height=\\\"54px\\\" viewBox=\\\"0 0 54 54\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:sketch=\\\"http://www.bohemiancoding.com/sketch/ns\\\">\\n      <title>Error</title>\\n      <defs></defs>\\n      <g id=\\\"Page-1\\\" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" sketch:type=\\\"MSPage\\\">\\n        <g id=\\\"Check-+-Oval-2\\\" sketch:type=\\\"MSLayerGroup\\\" stroke=\\\"#747474\\\" stroke-opacity=\\\"0.198794158\\\" fill=\\\"#FFFFFF\\\" fill-opacity=\\\"0.816519475\\\">\\n          <path d=\\\"M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\\\" id=\\\"Oval-2\\\" sketch:type=\\\"MSShapeGroup\\\"></path>\\n        </g>\\n      </g>\\n    </svg>\\n  </div>\\n</div>\",\n        drop: function drop(e) {\n          return this.element.classList.remove(\"dz-drag-hover\");\n        },\n        dragstart: function dragstart(e) {},\n        dragend: function dragend(e) {\n          return this.element.classList.remove(\"dz-drag-hover\");\n        },\n        dragenter: function dragenter(e) {\n          return this.element.classList.add(\"dz-drag-hover\");\n        },\n        dragover: function dragover(e) {\n          return this.element.classList.add(\"dz-drag-hover\");\n        },\n        dragleave: function dragleave(e) {\n          return this.element.classList.remove(\"dz-drag-hover\");\n        },\n        paste: function paste(e) {},\n        reset: function reset() {\n          return this.element.classList.remove(\"dz-started\");\n        },\n        addedfile: function addedfile(file) {\n          var _this2 = this;\n          if (this.element === this.previewsContainer) {\n            this.element.classList.add(\"dz-started\");\n          }\n          if (this.previewsContainer) {\n            file.previewElement = Dropzone.createElement(this.options.previewTemplate.trim());\n            file.previewTemplate = file.previewElement;\n            this.previewsContainer.appendChild(file.previewElement);\n            for (var _iterator3 = file.previewElement.querySelectorAll(\"[data-dz-name]\"), _isArray3 = true, _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n              var _ref3;\n              if (_isArray3) {\n                if (_i3 >= _iterator3.length) break;\n                _ref3 = _iterator3[_i3++];\n              } else {\n                _i3 = _iterator3.next();\n                if (_i3.done) break;\n                _ref3 = _i3.value;\n              }\n              var node = _ref3;\n              node.textContent = file.name;\n            }\n            for (var _iterator4 = file.previewElement.querySelectorAll(\"[data-dz-size]\"), _isArray4 = true, _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n              if (_isArray4) {\n                if (_i4 >= _iterator4.length) break;\n                node = _iterator4[_i4++];\n              } else {\n                _i4 = _iterator4.next();\n                if (_i4.done) break;\n                node = _i4.value;\n              }\n              node.innerHTML = this.filesize(file.size);\n            }\n            if (this.options.addRemoveLinks) {\n              file._removeLink = Dropzone.createElement(\"<a class=\\\"dz-remove\\\" href=\\\"javascript:undefined;\\\" data-dz-remove>\" + this.options.dictRemoveFile + \"</a>\");\n              file.previewElement.appendChild(file._removeLink);\n            }\n            var removeFileEvent = function removeFileEvent(e) {\n              e.preventDefault();\n              e.stopPropagation();\n              if (file.status === Dropzone.UPLOADING) {\n                return Dropzone.confirm(_this2.options.dictCancelUploadConfirmation, function () {\n                  return _this2.removeFile(file);\n                });\n              } else {\n                if (_this2.options.dictRemoveFileConfirmation) {\n                  return Dropzone.confirm(_this2.options.dictRemoveFileConfirmation, function () {\n                    return _this2.removeFile(file);\n                  });\n                } else {\n                  return _this2.removeFile(file);\n                }\n              }\n            };\n            for (var _iterator5 = file.previewElement.querySelectorAll(\"[data-dz-remove]\"), _isArray5 = true, _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n              var _ref4;\n              if (_isArray5) {\n                if (_i5 >= _iterator5.length) break;\n                _ref4 = _iterator5[_i5++];\n              } else {\n                _i5 = _iterator5.next();\n                if (_i5.done) break;\n                _ref4 = _i5.value;\n              }\n              var removeLink = _ref4;\n              removeLink.addEventListener(\"click\", removeFileEvent);\n            }\n          }\n        },\n        removedfile: function removedfile(file) {\n          if (file.previewElement != null && file.previewElement.parentNode != null) {\n            file.previewElement.parentNode.removeChild(file.previewElement);\n          }\n          return this._updateMaxFilesReachedClass();\n        },\n        thumbnail: function thumbnail(file, dataUrl) {\n          if (file.previewElement) {\n            file.previewElement.classList.remove(\"dz-file-preview\");\n            for (var _iterator6 = file.previewElement.querySelectorAll(\"[data-dz-thumbnail]\"), _isArray6 = true, _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {\n              var _ref5;\n              if (_isArray6) {\n                if (_i6 >= _iterator6.length) break;\n                _ref5 = _iterator6[_i6++];\n              } else {\n                _i6 = _iterator6.next();\n                if (_i6.done) break;\n                _ref5 = _i6.value;\n              }\n              var thumbnailElement = _ref5;\n              thumbnailElement.alt = file.name;\n              thumbnailElement.src = dataUrl;\n            }\n            return setTimeout(function () {\n              return file.previewElement.classList.add(\"dz-image-preview\");\n            }, 1);\n          }\n        },\n        error: function error(file, message) {\n          if (file.previewElement) {\n            file.previewElement.classList.add(\"dz-error\");\n            if (typeof message !== \"String\" && message.error) {\n              message = message.error;\n            }\n            for (var _iterator7 = file.previewElement.querySelectorAll(\"[data-dz-errormessage]\"), _isArray7 = true, _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {\n              var _ref6;\n              if (_isArray7) {\n                if (_i7 >= _iterator7.length) break;\n                _ref6 = _iterator7[_i7++];\n              } else {\n                _i7 = _iterator7.next();\n                if (_i7.done) break;\n                _ref6 = _i7.value;\n              }\n              var node = _ref6;\n              node.textContent = message;\n            }\n          }\n        },\n        errormultiple: function errormultiple() {},\n        processing: function processing(file) {\n          if (file.previewElement) {\n            file.previewElement.classList.add(\"dz-processing\");\n            if (file._removeLink) {\n              return file._removeLink.textContent = this.options.dictCancelUpload;\n            }\n          }\n        },\n        processingmultiple: function processingmultiple() {},\n        uploadprogress: function uploadprogress(file, progress, bytesSent) {\n          if (file.previewElement) {\n            for (var _iterator8 = file.previewElement.querySelectorAll(\"[data-dz-uploadprogress]\"), _isArray8 = true, _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _iterator8[Symbol.iterator]();;) {\n              var _ref7;\n              if (_isArray8) {\n                if (_i8 >= _iterator8.length) break;\n                _ref7 = _iterator8[_i8++];\n              } else {\n                _i8 = _iterator8.next();\n                if (_i8.done) break;\n                _ref7 = _i8.value;\n              }\n              var node = _ref7;\n              node.nodeName === 'PROGRESS' ? node.value = progress : node.style.width = progress + \"%\";\n            }\n          }\n        },\n        totaluploadprogress: function totaluploadprogress() {},\n        sending: function sending() {},\n        sendingmultiple: function sendingmultiple() {},\n        success: function success(file) {\n          if (file.previewElement) {\n            return file.previewElement.classList.add(\"dz-success\");\n          }\n        },\n        successmultiple: function successmultiple() {},\n        canceled: function canceled(file) {\n          return this.emit(\"error\", file, \"Upload canceled.\");\n        },\n        canceledmultiple: function canceledmultiple() {},\n        complete: function complete(file) {\n          if (file._removeLink) {\n            file._removeLink.textContent = this.options.dictRemoveFile;\n          }\n          if (file.previewElement) {\n            return file.previewElement.classList.add(\"dz-complete\");\n          }\n        },\n        completemultiple: function completemultiple() {},\n        maxfilesexceeded: function maxfilesexceeded() {},\n        maxfilesreached: function maxfilesreached() {},\n        queuecomplete: function queuecomplete() {},\n        addedfiles: function addedfiles() {}\n      };\n      this.prototype._thumbnailQueue = [];\n      this.prototype._processingThumbnail = false;\n    }\n  }, {\n    key: \"extend\",\n    value: function extend(target) {\n      for (var _len2 = arguments.length, objects = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        objects[_key2 - 1] = arguments[_key2];\n      }\n      for (var _iterator9 = objects, _isArray9 = true, _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _iterator9[Symbol.iterator]();;) {\n        var _ref8;\n        if (_isArray9) {\n          if (_i9 >= _iterator9.length) break;\n          _ref8 = _iterator9[_i9++];\n        } else {\n          _i9 = _iterator9.next();\n          if (_i9.done) break;\n          _ref8 = _i9.value;\n        }\n        var object = _ref8;\n        for (var key in object) {\n          var val = object[key];\n          target[key] = val;\n        }\n      }\n      return target;\n    }\n  }]);\n  function Dropzone(el, options) {\n    _classCallCheck(this, Dropzone);\n    var _this = _possibleConstructorReturn(this, (Dropzone.__proto__ || Object.getPrototypeOf(Dropzone)).call(this));\n    var fallback = void 0,\n      left = void 0;\n    _this.element = el;\n    _this.version = Dropzone.version;\n    _this.defaultOptions.previewTemplate = _this.defaultOptions.previewTemplate.replace(/\\n*/g, \"\");\n    _this.clickableElements = [];\n    _this.listeners = [];\n    _this.files = [];\n    if (typeof _this.element === \"string\") {\n      _this.element = document.querySelector(_this.element);\n    }\n    if (!_this.element || _this.element.nodeType == null) {\n      throw new Error(\"Invalid dropzone element.\");\n    }\n    if (_this.element.dropzone) {\n      throw new Error(\"Dropzone already attached.\");\n    }\n    Dropzone.instances.push(_this);\n    _this.element.dropzone = _this;\n    var elementOptions = (left = Dropzone.optionsForElement(_this.element)) != null ? left : {};\n    _this.options = Dropzone.extend({}, _this.defaultOptions, elementOptions, options != null ? options : {});\n    if (_this.options.forceFallback || !Dropzone.isBrowserSupported()) {\n      var _ret;\n      return _ret = _this.options.fallback.call(_this), _possibleConstructorReturn(_this, _ret);\n    }\n    if (_this.options.url == null) {\n      _this.options.url = _this.element.getAttribute(\"action\");\n    }\n    if (!_this.options.url) {\n      throw new Error(\"No URL provided.\");\n    }\n    if (_this.options.acceptedFiles && _this.options.acceptedMimeTypes) {\n      throw new Error(\"You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.\");\n    }\n    if (_this.options.uploadMultiple && _this.options.chunking) {\n      throw new Error('You cannot set both: uploadMultiple and chunking.');\n    }\n    if (_this.options.acceptedMimeTypes) {\n      _this.options.acceptedFiles = _this.options.acceptedMimeTypes;\n      delete _this.options.acceptedMimeTypes;\n    }\n    if (_this.options.renameFilename != null) {\n      _this.options.renameFile = function (file) {\n        return _this.options.renameFilename.call(_this, file.name, file);\n      };\n    }\n    _this.options.method = _this.options.method.toUpperCase();\n    if ((fallback = _this.getExistingFallback()) && fallback.parentNode) {\n      fallback.parentNode.removeChild(fallback);\n    }\n    if (_this.options.previewsContainer !== false) {\n      if (_this.options.previewsContainer) {\n        _this.previewsContainer = Dropzone.getElement(_this.options.previewsContainer, \"previewsContainer\");\n      } else {\n        _this.previewsContainer = _this.element;\n      }\n    }\n    if (_this.options.clickable) {\n      if (_this.options.clickable === true) {\n        _this.clickableElements = [_this.element];\n      } else {\n        _this.clickableElements = Dropzone.getElements(_this.options.clickable, \"clickable\");\n      }\n    }\n    _this.init();\n    return _this;\n  }\n  _createClass(Dropzone, [{\n    key: \"getAcceptedFiles\",\n    value: function getAcceptedFiles() {\n      return this.files.filter(function (file) {\n        return file.accepted;\n      }).map(function (file) {\n        return file;\n      });\n    }\n  }, {\n    key: \"getRejectedFiles\",\n    value: function getRejectedFiles() {\n      return this.files.filter(function (file) {\n        return !file.accepted;\n      }).map(function (file) {\n        return file;\n      });\n    }\n  }, {\n    key: \"getFilesWithStatus\",\n    value: function getFilesWithStatus(status) {\n      return this.files.filter(function (file) {\n        return file.status === status;\n      }).map(function (file) {\n        return file;\n      });\n    }\n  }, {\n    key: \"getQueuedFiles\",\n    value: function getQueuedFiles() {\n      return this.getFilesWithStatus(Dropzone.QUEUED);\n    }\n  }, {\n    key: \"getUploadingFiles\",\n    value: function getUploadingFiles() {\n      return this.getFilesWithStatus(Dropzone.UPLOADING);\n    }\n  }, {\n    key: \"getAddedFiles\",\n    value: function getAddedFiles() {\n      return this.getFilesWithStatus(Dropzone.ADDED);\n    }\n  }, {\n    key: \"getActiveFiles\",\n    value: function getActiveFiles() {\n      return this.files.filter(function (file) {\n        return file.status === Dropzone.UPLOADING || file.status === Dropzone.QUEUED;\n      }).map(function (file) {\n        return file;\n      });\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this3 = this;\n      if (this.element.tagName === \"form\") {\n        this.element.setAttribute(\"enctype\", \"multipart/form-data\");\n      }\n      if (this.element.classList.contains(\"dropzone\") && !this.element.querySelector(\".dz-message\")) {\n        this.element.appendChild(Dropzone.createElement(\"<div class=\\\"dz-default dz-message\\\"><span>\" + this.options.dictDefaultMessage + \"</span></div>\"));\n      }\n      if (this.clickableElements.length) {\n        var setupHiddenFileInput = function setupHiddenFileInput() {\n          if (_this3.hiddenFileInput) {\n            _this3.hiddenFileInput.parentNode.removeChild(_this3.hiddenFileInput);\n          }\n          _this3.hiddenFileInput = document.createElement(\"input\");\n          _this3.hiddenFileInput.setAttribute(\"type\", \"file\");\n          if (_this3.options.maxFiles === null || _this3.options.maxFiles > 1) {\n            _this3.hiddenFileInput.setAttribute(\"multiple\", \"multiple\");\n          }\n          _this3.hiddenFileInput.className = \"dz-hidden-input\";\n          if (_this3.options.acceptedFiles !== null) {\n            _this3.hiddenFileInput.setAttribute(\"accept\", _this3.options.acceptedFiles);\n          }\n          if (_this3.options.capture !== null) {\n            _this3.hiddenFileInput.setAttribute(\"capture\", _this3.options.capture);\n          }\n          _this3.hiddenFileInput.style.visibility = \"hidden\";\n          _this3.hiddenFileInput.style.position = \"absolute\";\n          _this3.hiddenFileInput.style.top = \"0\";\n          _this3.hiddenFileInput.style.left = \"0\";\n          _this3.hiddenFileInput.style.height = \"0\";\n          _this3.hiddenFileInput.style.width = \"0\";\n          document.querySelector(_this3.options.hiddenInputContainer).appendChild(_this3.hiddenFileInput);\n          return _this3.hiddenFileInput.addEventListener(\"change\", function () {\n            var files = _this3.hiddenFileInput.files;\n            if (files.length) {\n              for (var _iterator10 = files, _isArray10 = true, _i10 = 0, _iterator10 = _isArray10 ? _iterator10 : _iterator10[Symbol.iterator]();;) {\n                var _ref9;\n                if (_isArray10) {\n                  if (_i10 >= _iterator10.length) break;\n                  _ref9 = _iterator10[_i10++];\n                } else {\n                  _i10 = _iterator10.next();\n                  if (_i10.done) break;\n                  _ref9 = _i10.value;\n                }\n                var file = _ref9;\n                _this3.addFile(file);\n              }\n            }\n            _this3.emit(\"addedfiles\", files);\n            return setupHiddenFileInput();\n          });\n        };\n        setupHiddenFileInput();\n      }\n      this.URL = window.URL !== null ? window.URL : window.webkitURL;\n      for (var _iterator11 = this.events, _isArray11 = true, _i11 = 0, _iterator11 = _isArray11 ? _iterator11 : _iterator11[Symbol.iterator]();;) {\n        var _ref10;\n        if (_isArray11) {\n          if (_i11 >= _iterator11.length) break;\n          _ref10 = _iterator11[_i11++];\n        } else {\n          _i11 = _iterator11.next();\n          if (_i11.done) break;\n          _ref10 = _i11.value;\n        }\n        var eventName = _ref10;\n        this.on(eventName, this.options[eventName]);\n      }\n      this.on(\"uploadprogress\", function () {\n        return _this3.updateTotalUploadProgress();\n      });\n      this.on(\"removedfile\", function () {\n        return _this3.updateTotalUploadProgress();\n      });\n      this.on(\"canceled\", function (file) {\n        return _this3.emit(\"complete\", file);\n      });\n      this.on(\"complete\", function (file) {\n        if (_this3.getAddedFiles().length === 0 && _this3.getUploadingFiles().length === 0 && _this3.getQueuedFiles().length === 0) {\n          return setTimeout(function () {\n            return _this3.emit(\"queuecomplete\");\n          }, 0);\n        }\n      });\n      var noPropagation = function noPropagation(e) {\n        e.stopPropagation();\n        if (e.preventDefault) {\n          return e.preventDefault();\n        } else {\n          return e.returnValue = false;\n        }\n      };\n      this.listeners = [{\n        element: this.element,\n        events: {\n          \"dragstart\": function dragstart(e) {\n            return _this3.emit(\"dragstart\", e);\n          },\n          \"dragenter\": function dragenter(e) {\n            noPropagation(e);\n            return _this3.emit(\"dragenter\", e);\n          },\n          \"dragover\": function dragover(e) {\n            var efct = void 0;\n            try {\n              efct = e.dataTransfer.effectAllowed;\n            } catch (error) {}\n            e.dataTransfer.dropEffect = 'move' === efct || 'linkMove' === efct ? 'move' : 'copy';\n            noPropagation(e);\n            return _this3.emit(\"dragover\", e);\n          },\n          \"dragleave\": function dragleave(e) {\n            return _this3.emit(\"dragleave\", e);\n          },\n          \"drop\": function drop(e) {\n            noPropagation(e);\n            return _this3.drop(e);\n          },\n          \"dragend\": function dragend(e) {\n            return _this3.emit(\"dragend\", e);\n          }\n        }\n      }];\n      this.clickableElements.forEach(function (clickableElement) {\n        return _this3.listeners.push({\n          element: clickableElement,\n          events: {\n            \"click\": function click(evt) {\n              if (clickableElement !== _this3.element || evt.target === _this3.element || Dropzone.elementInside(evt.target, _this3.element.querySelector(\".dz-message\"))) {\n                _this3.hiddenFileInput.click();\n              }\n              return true;\n            }\n          }\n        });\n      });\n      this.enable();\n      return this.options.init.call(this);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.disable();\n      this.removeAllFiles(true);\n      if (this.hiddenFileInput != null ? this.hiddenFileInput.parentNode : undefined) {\n        this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput);\n        this.hiddenFileInput = null;\n      }\n      delete this.element.dropzone;\n      return Dropzone.instances.splice(Dropzone.instances.indexOf(this), 1);\n    }\n  }, {\n    key: \"updateTotalUploadProgress\",\n    value: function updateTotalUploadProgress() {\n      var totalUploadProgress = void 0;\n      var totalBytesSent = 0;\n      var totalBytes = 0;\n      var activeFiles = this.getActiveFiles();\n      if (activeFiles.length) {\n        for (var _iterator12 = this.getActiveFiles(), _isArray12 = true, _i12 = 0, _iterator12 = _isArray12 ? _iterator12 : _iterator12[Symbol.iterator]();;) {\n          var _ref11;\n          if (_isArray12) {\n            if (_i12 >= _iterator12.length) break;\n            _ref11 = _iterator12[_i12++];\n          } else {\n            _i12 = _iterator12.next();\n            if (_i12.done) break;\n            _ref11 = _i12.value;\n          }\n          var file = _ref11;\n          totalBytesSent += file.upload.bytesSent;\n          totalBytes += file.upload.total;\n        }\n        totalUploadProgress = 100 * totalBytesSent / totalBytes;\n      } else {\n        totalUploadProgress = 100;\n      }\n      return this.emit(\"totaluploadprogress\", totalUploadProgress, totalBytes, totalBytesSent);\n    }\n  }, {\n    key: \"_getParamName\",\n    value: function _getParamName(n) {\n      if (typeof this.options.paramName === \"function\") {\n        return this.options.paramName(n);\n      } else {\n        return \"\" + this.options.paramName + (this.options.uploadMultiple ? \"[\" + n + \"]\" : \"\");\n      }\n    }\n  }, {\n    key: \"_renameFile\",\n    value: function _renameFile(file) {\n      if (typeof this.options.renameFile !== \"function\") {\n        return file.name;\n      }\n      return this.options.renameFile(file);\n    }\n  }, {\n    key: \"getFallbackForm\",\n    value: function getFallbackForm() {\n      var existingFallback = void 0,\n        form = void 0;\n      if (existingFallback = this.getExistingFallback()) {\n        return existingFallback;\n      }\n      var fieldsString = \"<div class=\\\"dz-fallback\\\">\";\n      if (this.options.dictFallbackText) {\n        fieldsString += \"<p>\" + this.options.dictFallbackText + \"</p>\";\n      }\n      fieldsString += \"<input type=\\\"file\\\" name=\\\"\" + this._getParamName(0) + \"\\\" \" + (this.options.uploadMultiple ? 'multiple=\"multiple\"' : undefined) + \" /><input type=\\\"submit\\\" value=\\\"Upload!\\\"></div>\";\n      var fields = Dropzone.createElement(fieldsString);\n      if (this.element.tagName !== \"FORM\") {\n        form = Dropzone.createElement(\"<form action=\\\"\" + this.options.url + \"\\\" enctype=\\\"multipart/form-data\\\" method=\\\"\" + this.options.method + \"\\\"></form>\");\n        form.appendChild(fields);\n      } else {\n        this.element.setAttribute(\"enctype\", \"multipart/form-data\");\n        this.element.setAttribute(\"method\", this.options.method);\n      }\n      return form != null ? form : fields;\n    }\n  }, {\n    key: \"getExistingFallback\",\n    value: function getExistingFallback() {\n      var getFallback = function getFallback(elements) {\n        for (var _iterator13 = elements, _isArray13 = true, _i13 = 0, _iterator13 = _isArray13 ? _iterator13 : _iterator13[Symbol.iterator]();;) {\n          var _ref12;\n          if (_isArray13) {\n            if (_i13 >= _iterator13.length) break;\n            _ref12 = _iterator13[_i13++];\n          } else {\n            _i13 = _iterator13.next();\n            if (_i13.done) break;\n            _ref12 = _i13.value;\n          }\n          var el = _ref12;\n          if (/(^| )fallback($| )/.test(el.className)) {\n            return el;\n          }\n        }\n      };\n      var _arr = [\"div\", \"form\"];\n      for (var _i14 = 0; _i14 < _arr.length; _i14++) {\n        var tagName = _arr[_i14];\n        var fallback;\n        if (fallback = getFallback(this.element.getElementsByTagName(tagName))) {\n          return fallback;\n        }\n      }\n    }\n  }, {\n    key: \"setupEventListeners\",\n    value: function setupEventListeners() {\n      return this.listeners.map(function (elementListeners) {\n        return function () {\n          var result = [];\n          for (var event in elementListeners.events) {\n            var listener = elementListeners.events[event];\n            result.push(elementListeners.element.addEventListener(event, listener, false));\n          }\n          return result;\n        }();\n      });\n    }\n  }, {\n    key: \"removeEventListeners\",\n    value: function removeEventListeners() {\n      return this.listeners.map(function (elementListeners) {\n        return function () {\n          var result = [];\n          for (var event in elementListeners.events) {\n            var listener = elementListeners.events[event];\n            result.push(elementListeners.element.removeEventListener(event, listener, false));\n          }\n          return result;\n        }();\n      });\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      var _this4 = this;\n      this.clickableElements.forEach(function (element) {\n        return element.classList.remove(\"dz-clickable\");\n      });\n      this.removeEventListeners();\n      return this.files.map(function (file) {\n        return _this4.cancelUpload(file);\n      });\n    }\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      this.clickableElements.forEach(function (element) {\n        return element.classList.add(\"dz-clickable\");\n      });\n      return this.setupEventListeners();\n    }\n  }, {\n    key: \"filesize\",\n    value: function filesize(size) {\n      var selectedSize = 0;\n      var selectedUnit = \"b\";\n      if (size > 0) {\n        var units = ['tb', 'gb', 'mb', 'kb', 'b'];\n        for (var i = 0; i < units.length; i++) {\n          var unit = units[i];\n          var cutoff = Math.pow(this.options.filesizeBase, 4 - i) / 10;\n          if (size >= cutoff) {\n            selectedSize = size / Math.pow(this.options.filesizeBase, 4 - i);\n            selectedUnit = unit;\n            break;\n          }\n        }\n        selectedSize = Math.round(10 * selectedSize) / 10;\n      }\n      return \"<strong>\" + selectedSize + \"</strong> \" + this.options.dictFileSizeUnits[selectedUnit];\n    }\n  }, {\n    key: \"_updateMaxFilesReachedClass\",\n    value: function _updateMaxFilesReachedClass() {\n      if (this.options.maxFiles != null && this.getAcceptedFiles().length >= this.options.maxFiles) {\n        if (this.getAcceptedFiles().length === this.options.maxFiles) {\n          this.emit('maxfilesreached', this.files);\n        }\n        return this.element.classList.add(\"dz-max-files-reached\");\n      } else {\n        return this.element.classList.remove(\"dz-max-files-reached\");\n      }\n    }\n  }, {\n    key: \"drop\",\n    value: function drop(e) {\n      if (!e.dataTransfer) {\n        return;\n      }\n      this.emit(\"drop\", e);\n      var files = e.dataTransfer.files;\n      this.emit(\"addedfiles\", files);\n      if (files.length) {\n        var items = e.dataTransfer.items;\n        if (items && items.length && items[0].webkitGetAsEntry != null) {\n          this._addFilesFromItems(items);\n        } else {\n          this.handleFiles(files);\n        }\n      }\n    }\n  }, {\n    key: \"paste\",\n    value: function paste(e) {\n      if (__guard__(e != null ? e.clipboardData : undefined, function (x) {\n        return x.items;\n      }) == null) {\n        return;\n      }\n      this.emit(\"paste\", e);\n      var items = e.clipboardData.items;\n      if (items.length) {\n        return this._addFilesFromItems(items);\n      }\n    }\n  }, {\n    key: \"handleFiles\",\n    value: function handleFiles(files) {\n      var _this5 = this;\n      return files.map(function (file) {\n        return _this5.addFile(file);\n      });\n    }\n  }, {\n    key: \"_addFilesFromItems\",\n    value: function _addFilesFromItems(items) {\n      var _this6 = this;\n      return function () {\n        var result = [];\n        for (var _iterator14 = items, _isArray14 = true, _i15 = 0, _iterator14 = _isArray14 ? _iterator14 : _iterator14[Symbol.iterator]();;) {\n          var _ref13;\n          if (_isArray14) {\n            if (_i15 >= _iterator14.length) break;\n            _ref13 = _iterator14[_i15++];\n          } else {\n            _i15 = _iterator14.next();\n            if (_i15.done) break;\n            _ref13 = _i15.value;\n          }\n          var item = _ref13;\n          var entry;\n          if (item.webkitGetAsEntry != null && (entry = item.webkitGetAsEntry())) {\n            if (entry.isFile) {\n              result.push(_this6.addFile(item.getAsFile()));\n            } else if (entry.isDirectory) {\n              result.push(_this6._addFilesFromDirectory(entry, entry.name));\n            } else {\n              result.push(undefined);\n            }\n          } else if (item.getAsFile != null) {\n            if (item.kind == null || item.kind === \"file\") {\n              result.push(_this6.addFile(item.getAsFile()));\n            } else {\n              result.push(undefined);\n            }\n          } else {\n            result.push(undefined);\n          }\n        }\n        return result;\n      }();\n    }\n  }, {\n    key: \"_addFilesFromDirectory\",\n    value: function _addFilesFromDirectory(directory, path) {\n      var _this7 = this;\n      var dirReader = directory.createReader();\n      var errorHandler = function errorHandler(error) {\n        return __guardMethod__(console, 'log', function (o) {\n          return o.log(error);\n        });\n      };\n      var readEntries = function readEntries() {\n        return dirReader.readEntries(function (entries) {\n          if (entries.length > 0) {\n            for (var _iterator15 = entries, _isArray15 = true, _i16 = 0, _iterator15 = _isArray15 ? _iterator15 : _iterator15[Symbol.iterator]();;) {\n              var _ref14;\n              if (_isArray15) {\n                if (_i16 >= _iterator15.length) break;\n                _ref14 = _iterator15[_i16++];\n              } else {\n                _i16 = _iterator15.next();\n                if (_i16.done) break;\n                _ref14 = _i16.value;\n              }\n              var entry = _ref14;\n              if (entry.isFile) {\n                entry.file(function (file) {\n                  if (_this7.options.ignoreHiddenFiles && file.name.substring(0, 1) === '.') {\n                    return;\n                  }\n                  file.fullPath = path + \"/\" + file.name;\n                  return _this7.addFile(file);\n                });\n              } else if (entry.isDirectory) {\n                _this7._addFilesFromDirectory(entry, path + \"/\" + entry.name);\n              }\n            }\n            readEntries();\n          }\n          return null;\n        }, errorHandler);\n      };\n      return readEntries();\n    }\n  }, {\n    key: \"accept\",\n    value: function accept(file, done) {\n      if (file.size > this.options.maxFilesize * 1024 * 1024) {\n        return done(this.options.dictFileTooBig.replace(\"{{filesize}}\", Math.round(file.size / 1024 / 10.24) / 100).replace(\"{{maxFilesize}}\", this.options.maxFilesize));\n      } else if (!Dropzone.isValidFile(file, this.options.acceptedFiles)) {\n        return done(this.options.dictInvalidFileType);\n      } else if (this.options.maxFiles != null && this.getAcceptedFiles().length >= this.options.maxFiles) {\n        done(this.options.dictMaxFilesExceeded.replace(\"{{maxFiles}}\", this.options.maxFiles));\n        return this.emit(\"maxfilesexceeded\", file);\n      } else {\n        return this.options.accept.call(this, file, done);\n      }\n    }\n  }, {\n    key: \"addFile\",\n    value: function addFile(file) {\n      var _this8 = this;\n      file.upload = {\n        uuid: Dropzone.uuidv4(),\n        progress: 0,\n        total: file.size,\n        bytesSent: 0,\n        filename: this._renameFile(file),\n        chunked: this.options.chunking && (this.options.forceChunking || file.size > this.options.chunkSize),\n        totalChunkCount: Math.ceil(file.size / this.options.chunkSize)\n      };\n      this.files.push(file);\n      file.status = Dropzone.ADDED;\n      this.emit(\"addedfile\", file);\n      this._enqueueThumbnail(file);\n      return this.accept(file, function (error) {\n        if (error) {\n          file.accepted = false;\n          _this8._errorProcessing([file], error);\n        } else {\n          file.accepted = true;\n          if (_this8.options.autoQueue) {\n            _this8.enqueueFile(file);\n          }\n        }\n        return _this8._updateMaxFilesReachedClass();\n      });\n    }\n  }, {\n    key: \"enqueueFiles\",\n    value: function enqueueFiles(files) {\n      for (var _iterator16 = files, _isArray16 = true, _i17 = 0, _iterator16 = _isArray16 ? _iterator16 : _iterator16[Symbol.iterator]();;) {\n        var _ref15;\n        if (_isArray16) {\n          if (_i17 >= _iterator16.length) break;\n          _ref15 = _iterator16[_i17++];\n        } else {\n          _i17 = _iterator16.next();\n          if (_i17.done) break;\n          _ref15 = _i17.value;\n        }\n        var file = _ref15;\n        this.enqueueFile(file);\n      }\n      return null;\n    }\n  }, {\n    key: \"enqueueFile\",\n    value: function enqueueFile(file) {\n      var _this9 = this;\n      if (file.status === Dropzone.ADDED && file.accepted === true) {\n        file.status = Dropzone.QUEUED;\n        if (this.options.autoProcessQueue) {\n          return setTimeout(function () {\n            return _this9.processQueue();\n          }, 0);\n        }\n      } else {\n        throw new Error(\"This file can't be queued because it has already been processed or was rejected.\");\n      }\n    }\n  }, {\n    key: \"_enqueueThumbnail\",\n    value: function _enqueueThumbnail(file) {\n      var _this10 = this;\n      if (this.options.createImageThumbnails && file.type.match(/image.*/) && file.size <= this.options.maxThumbnailFilesize * 1024 * 1024) {\n        this._thumbnailQueue.push(file);\n        return setTimeout(function () {\n          return _this10._processThumbnailQueue();\n        }, 0);\n      }\n    }\n  }, {\n    key: \"_processThumbnailQueue\",\n    value: function _processThumbnailQueue() {\n      var _this11 = this;\n      if (this._processingThumbnail || this._thumbnailQueue.length === 0) {\n        return;\n      }\n      this._processingThumbnail = true;\n      var file = this._thumbnailQueue.shift();\n      return this.createThumbnail(file, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, true, function (dataUrl) {\n        _this11.emit(\"thumbnail\", file, dataUrl);\n        _this11._processingThumbnail = false;\n        return _this11._processThumbnailQueue();\n      });\n    }\n  }, {\n    key: \"removeFile\",\n    value: function removeFile(file) {\n      if (file.status === Dropzone.UPLOADING) {\n        this.cancelUpload(file);\n      }\n      this.files = without(this.files, file);\n      this.emit(\"removedfile\", file);\n      if (this.files.length === 0) {\n        return this.emit(\"reset\");\n      }\n    }\n  }, {\n    key: \"removeAllFiles\",\n    value: function removeAllFiles(cancelIfNecessary) {\n      if (cancelIfNecessary == null) {\n        cancelIfNecessary = false;\n      }\n      for (var _iterator17 = this.files.slice(), _isArray17 = true, _i18 = 0, _iterator17 = _isArray17 ? _iterator17 : _iterator17[Symbol.iterator]();;) {\n        var _ref16;\n        if (_isArray17) {\n          if (_i18 >= _iterator17.length) break;\n          _ref16 = _iterator17[_i18++];\n        } else {\n          _i18 = _iterator17.next();\n          if (_i18.done) break;\n          _ref16 = _i18.value;\n        }\n        var file = _ref16;\n        if (file.status !== Dropzone.UPLOADING || cancelIfNecessary) {\n          this.removeFile(file);\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"resizeImage\",\n    value: function resizeImage(file, width, height, resizeMethod, callback) {\n      var _this12 = this;\n      return this.createThumbnail(file, width, height, resizeMethod, false, function (dataUrl, canvas) {\n        if (canvas === null) {\n          return callback(file);\n        } else {\n          var resizeMimeType = _this12.options.resizeMimeType;\n          if (resizeMimeType == null) {\n            resizeMimeType = file.type;\n          }\n          var resizedDataURL = canvas.toDataURL(resizeMimeType, _this12.options.resizeQuality);\n          if (resizeMimeType === 'image/jpeg' || resizeMimeType === 'image/jpg') {\n            resizedDataURL = ExifRestore.restore(file.dataURL, resizedDataURL);\n          }\n          return callback(Dropzone.dataURItoBlob(resizedDataURL));\n        }\n      });\n    }\n  }, {\n    key: \"createThumbnail\",\n    value: function createThumbnail(file, width, height, resizeMethod, fixOrientation, callback) {\n      var _this13 = this;\n      var fileReader = new FileReader();\n      fileReader.onload = function () {\n        file.dataURL = fileReader.result;\n        if (file.type === \"image/svg+xml\") {\n          if (callback != null) {\n            callback(fileReader.result);\n          }\n          return;\n        }\n        return _this13.createThumbnailFromUrl(file, width, height, resizeMethod, fixOrientation, callback);\n      };\n      return fileReader.readAsDataURL(file);\n    }\n  }, {\n    key: \"createThumbnailFromUrl\",\n    value: function createThumbnailFromUrl(file, width, height, resizeMethod, fixOrientation, callback, crossOrigin) {\n      var _this14 = this;\n      var img = document.createElement(\"img\");\n      if (crossOrigin) {\n        img.crossOrigin = crossOrigin;\n      }\n      img.onload = function () {\n        var loadExif = function loadExif(callback) {\n          return callback(1);\n        };\n        if (typeof EXIF !== 'undefined' && EXIF !== null && fixOrientation) {\n          loadExif = function loadExif(callback) {\n            return EXIF.getData(img, function () {\n              return callback(EXIF.getTag(this, 'Orientation'));\n            });\n          };\n        }\n        return loadExif(function (orientation) {\n          file.width = img.width;\n          file.height = img.height;\n          var resizeInfo = _this14.options.resize.call(_this14, file, width, height, resizeMethod);\n          var canvas = document.createElement(\"canvas\");\n          var ctx = canvas.getContext(\"2d\");\n          canvas.width = resizeInfo.trgWidth;\n          canvas.height = resizeInfo.trgHeight;\n          if (orientation > 4) {\n            canvas.width = resizeInfo.trgHeight;\n            canvas.height = resizeInfo.trgWidth;\n          }\n          switch (orientation) {\n            case 2:\n              ctx.translate(canvas.width, 0);\n              ctx.scale(-1, 1);\n              break;\n            case 3:\n              ctx.translate(canvas.width, canvas.height);\n              ctx.rotate(Math.PI);\n              break;\n            case 4:\n              ctx.translate(0, canvas.height);\n              ctx.scale(1, -1);\n              break;\n            case 5:\n              ctx.rotate(0.5 * Math.PI);\n              ctx.scale(1, -1);\n              break;\n            case 6:\n              ctx.rotate(0.5 * Math.PI);\n              ctx.translate(0, -canvas.height);\n              break;\n            case 7:\n              ctx.rotate(0.5 * Math.PI);\n              ctx.translate(canvas.width, -canvas.height);\n              ctx.scale(-1, 1);\n              break;\n            case 8:\n              ctx.rotate(-0.5 * Math.PI);\n              ctx.translate(-canvas.width, 0);\n              break;\n          }\n          drawImageIOSFix(ctx, img, resizeInfo.srcX != null ? resizeInfo.srcX : 0, resizeInfo.srcY != null ? resizeInfo.srcY : 0, resizeInfo.srcWidth, resizeInfo.srcHeight, resizeInfo.trgX != null ? resizeInfo.trgX : 0, resizeInfo.trgY != null ? resizeInfo.trgY : 0, resizeInfo.trgWidth, resizeInfo.trgHeight);\n          var thumbnail = canvas.toDataURL(\"image/png\");\n          if (callback != null) {\n            return callback(thumbnail, canvas);\n          }\n        });\n      };\n      if (callback != null) {\n        img.onerror = callback;\n      }\n      return img.src = file.dataURL;\n    }\n  }, {\n    key: \"processQueue\",\n    value: function processQueue() {\n      var parallelUploads = this.options.parallelUploads;\n      var processingLength = this.getUploadingFiles().length;\n      var i = processingLength;\n      if (processingLength >= parallelUploads) {\n        return;\n      }\n      var queuedFiles = this.getQueuedFiles();\n      if (!(queuedFiles.length > 0)) {\n        return;\n      }\n      if (this.options.uploadMultiple) {\n        return this.processFiles(queuedFiles.slice(0, parallelUploads - processingLength));\n      } else {\n        while (i < parallelUploads) {\n          if (!queuedFiles.length) {\n            return;\n          }\n          this.processFile(queuedFiles.shift());\n          i++;\n        }\n      }\n    }\n  }, {\n    key: \"processFile\",\n    value: function processFile(file) {\n      return this.processFiles([file]);\n    }\n  }, {\n    key: \"processFiles\",\n    value: function processFiles(files) {\n      for (var _iterator18 = files, _isArray18 = true, _i19 = 0, _iterator18 = _isArray18 ? _iterator18 : _iterator18[Symbol.iterator]();;) {\n        var _ref17;\n        if (_isArray18) {\n          if (_i19 >= _iterator18.length) break;\n          _ref17 = _iterator18[_i19++];\n        } else {\n          _i19 = _iterator18.next();\n          if (_i19.done) break;\n          _ref17 = _i19.value;\n        }\n        var file = _ref17;\n        file.processing = true;\n        file.status = Dropzone.UPLOADING;\n        this.emit(\"processing\", file);\n      }\n      if (this.options.uploadMultiple) {\n        this.emit(\"processingmultiple\", files);\n      }\n      return this.uploadFiles(files);\n    }\n  }, {\n    key: \"_getFilesWithXhr\",\n    value: function _getFilesWithXhr(xhr) {\n      var files = void 0;\n      return files = this.files.filter(function (file) {\n        return file.xhr === xhr;\n      }).map(function (file) {\n        return file;\n      });\n    }\n  }, {\n    key: \"cancelUpload\",\n    value: function cancelUpload(file) {\n      if (file.status === Dropzone.UPLOADING) {\n        var groupedFiles = this._getFilesWithXhr(file.xhr);\n        for (var _iterator19 = groupedFiles, _isArray19 = true, _i20 = 0, _iterator19 = _isArray19 ? _iterator19 : _iterator19[Symbol.iterator]();;) {\n          var _ref18;\n          if (_isArray19) {\n            if (_i20 >= _iterator19.length) break;\n            _ref18 = _iterator19[_i20++];\n          } else {\n            _i20 = _iterator19.next();\n            if (_i20.done) break;\n            _ref18 = _i20.value;\n          }\n          var groupedFile = _ref18;\n          groupedFile.status = Dropzone.CANCELED;\n        }\n        if (typeof file.xhr !== 'undefined') {\n          file.xhr.abort();\n        }\n        for (var _iterator20 = groupedFiles, _isArray20 = true, _i21 = 0, _iterator20 = _isArray20 ? _iterator20 : _iterator20[Symbol.iterator]();;) {\n          var _ref19;\n          if (_isArray20) {\n            if (_i21 >= _iterator20.length) break;\n            _ref19 = _iterator20[_i21++];\n          } else {\n            _i21 = _iterator20.next();\n            if (_i21.done) break;\n            _ref19 = _i21.value;\n          }\n          var _groupedFile = _ref19;\n          this.emit(\"canceled\", _groupedFile);\n        }\n        if (this.options.uploadMultiple) {\n          this.emit(\"canceledmultiple\", groupedFiles);\n        }\n      } else if (file.status === Dropzone.ADDED || file.status === Dropzone.QUEUED) {\n        file.status = Dropzone.CANCELED;\n        this.emit(\"canceled\", file);\n        if (this.options.uploadMultiple) {\n          this.emit(\"canceledmultiple\", [file]);\n        }\n      }\n      if (this.options.autoProcessQueue) {\n        return this.processQueue();\n      }\n    }\n  }, {\n    key: \"resolveOption\",\n    value: function resolveOption(option) {\n      if (typeof option === 'function') {\n        for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n          args[_key3 - 1] = arguments[_key3];\n        }\n        return option.apply(this, args);\n      }\n      return option;\n    }\n  }, {\n    key: \"uploadFile\",\n    value: function uploadFile(file) {\n      return this.uploadFiles([file]);\n    }\n  }, {\n    key: \"uploadFiles\",\n    value: function uploadFiles(files) {\n      var _this15 = this;\n      this._transformFiles(files, function (transformedFiles) {\n        if (files[0].upload.chunked) {\n          var file = files[0];\n          var transformedFile = transformedFiles[0];\n          var startedChunkCount = 0;\n          file.upload.chunks = [];\n          var handleNextChunk = function handleNextChunk() {\n            var chunkIndex = 0;\n            while (file.upload.chunks[chunkIndex] !== undefined) {\n              chunkIndex++;\n            }\n            if (chunkIndex >= file.upload.totalChunkCount) return;\n            startedChunkCount++;\n            var start = chunkIndex * _this15.options.chunkSize;\n            var end = Math.min(start + _this15.options.chunkSize, file.size);\n            var dataBlock = {\n              name: _this15._getParamName(0),\n              data: transformedFile.webkitSlice ? transformedFile.webkitSlice(start, end) : transformedFile.slice(start, end),\n              filename: file.upload.filename,\n              chunkIndex: chunkIndex\n            };\n            file.upload.chunks[chunkIndex] = {\n              file: file,\n              index: chunkIndex,\n              dataBlock: dataBlock,\n              status: Dropzone.UPLOADING,\n              progress: 0,\n              retries: 0\n            };\n            _this15._uploadData(files, [dataBlock]);\n          };\n          file.upload.finishedChunkUpload = function (chunk) {\n            var allFinished = true;\n            chunk.status = Dropzone.SUCCESS;\n            chunk.dataBlock = null;\n            for (var i = 0; i < file.upload.totalChunkCount; i++) {\n              if (file.upload.chunks[i] === undefined) {\n                return handleNextChunk();\n              }\n              if (file.upload.chunks[i].status !== Dropzone.SUCCESS) {\n                allFinished = false;\n              }\n            }\n            if (allFinished) {\n              _this15.options.chunksUploaded(file, function () {\n                _this15._finished(files, '', null);\n              });\n            }\n          };\n          if (_this15.options.parallelChunkUploads) {\n            for (var i = 0; i < file.upload.totalChunkCount; i++) {\n              handleNextChunk();\n            }\n          } else {\n            handleNextChunk();\n          }\n        } else {\n          var dataBlocks = [];\n          for (var _i22 = 0; _i22 < files.length; _i22++) {\n            dataBlocks[_i22] = {\n              name: _this15._getParamName(_i22),\n              data: transformedFiles[_i22],\n              filename: files[_i22].upload.filename\n            };\n          }\n          _this15._uploadData(files, dataBlocks);\n        }\n      });\n    }\n  }, {\n    key: \"_getChunk\",\n    value: function _getChunk(file, xhr) {\n      for (var i = 0; i < file.upload.totalChunkCount; i++) {\n        if (file.upload.chunks[i] !== undefined && file.upload.chunks[i].xhr === xhr) {\n          return file.upload.chunks[i];\n        }\n      }\n    }\n  }, {\n    key: \"_uploadData\",\n    value: function _uploadData(files, dataBlocks) {\n      var _this16 = this;\n      var xhr = new XMLHttpRequest();\n      for (var _iterator21 = files, _isArray21 = true, _i23 = 0, _iterator21 = _isArray21 ? _iterator21 : _iterator21[Symbol.iterator]();;) {\n        var _ref20;\n        if (_isArray21) {\n          if (_i23 >= _iterator21.length) break;\n          _ref20 = _iterator21[_i23++];\n        } else {\n          _i23 = _iterator21.next();\n          if (_i23.done) break;\n          _ref20 = _i23.value;\n        }\n        var file = _ref20;\n        file.xhr = xhr;\n      }\n      if (files[0].upload.chunked) {\n        files[0].upload.chunks[dataBlocks[0].chunkIndex].xhr = xhr;\n      }\n      var method = this.resolveOption(this.options.method, files);\n      var url = this.resolveOption(this.options.url, files);\n      xhr.open(method, url, true);\n      xhr.timeout = this.resolveOption(this.options.timeout, files);\n      xhr.withCredentials = !!this.options.withCredentials;\n      xhr.onload = function (e) {\n        _this16._finishedUploading(files, xhr, e);\n      };\n      xhr.onerror = function () {\n        _this16._handleUploadError(files, xhr);\n      };\n      var progressObj = xhr.upload != null ? xhr.upload : xhr;\n      progressObj.onprogress = function (e) {\n        return _this16._updateFilesUploadProgress(files, xhr, e);\n      };\n      var headers = {\n        \"Accept\": \"application/json\",\n        \"Cache-Control\": \"no-cache\",\n        \"X-Requested-With\": \"XMLHttpRequest\"\n      };\n      if (this.options.headers) {\n        Dropzone.extend(headers, this.options.headers);\n      }\n      for (var headerName in headers) {\n        var headerValue = headers[headerName];\n        if (headerValue) {\n          xhr.setRequestHeader(headerName, headerValue);\n        }\n      }\n      var formData = new FormData();\n      if (this.options.params) {\n        var additionalParams = this.options.params;\n        if (typeof additionalParams === 'function') {\n          additionalParams = additionalParams.call(this, files, xhr, files[0].upload.chunked ? this._getChunk(files[0], xhr) : null);\n        }\n        for (var key in additionalParams) {\n          var value = additionalParams[key];\n          formData.append(key, value);\n        }\n      }\n      for (var _iterator22 = files, _isArray22 = true, _i24 = 0, _iterator22 = _isArray22 ? _iterator22 : _iterator22[Symbol.iterator]();;) {\n        var _ref21;\n        if (_isArray22) {\n          if (_i24 >= _iterator22.length) break;\n          _ref21 = _iterator22[_i24++];\n        } else {\n          _i24 = _iterator22.next();\n          if (_i24.done) break;\n          _ref21 = _i24.value;\n        }\n        var _file = _ref21;\n        this.emit(\"sending\", _file, xhr, formData);\n      }\n      if (this.options.uploadMultiple) {\n        this.emit(\"sendingmultiple\", files, xhr, formData);\n      }\n      this._addFormElementData(formData);\n      for (var i = 0; i < dataBlocks.length; i++) {\n        var dataBlock = dataBlocks[i];\n        formData.append(dataBlock.name, dataBlock.data, dataBlock.filename);\n      }\n      this.submitRequest(xhr, formData, files);\n    }\n  }, {\n    key: \"_transformFiles\",\n    value: function _transformFiles(files, done) {\n      var _this17 = this;\n      var transformedFiles = [];\n      var doneCounter = 0;\n      var _loop = function _loop(i) {\n        _this17.options.transformFile.call(_this17, files[i], function (transformedFile) {\n          transformedFiles[i] = transformedFile;\n          if (++doneCounter === files.length) {\n            done(transformedFiles);\n          }\n        });\n      };\n      for (var i = 0; i < files.length; i++) {\n        _loop(i);\n      }\n    }\n  }, {\n    key: \"_addFormElementData\",\n    value: function _addFormElementData(formData) {\n      if (this.element.tagName === \"FORM\") {\n        for (var _iterator23 = this.element.querySelectorAll(\"input, textarea, select, button\"), _isArray23 = true, _i25 = 0, _iterator23 = _isArray23 ? _iterator23 : _iterator23[Symbol.iterator]();;) {\n          var _ref22;\n          if (_isArray23) {\n            if (_i25 >= _iterator23.length) break;\n            _ref22 = _iterator23[_i25++];\n          } else {\n            _i25 = _iterator23.next();\n            if (_i25.done) break;\n            _ref22 = _i25.value;\n          }\n          var input = _ref22;\n          var inputName = input.getAttribute(\"name\");\n          var inputType = input.getAttribute(\"type\");\n          if (inputType) inputType = inputType.toLowerCase();\n          if (typeof inputName === 'undefined' || inputName === null) continue;\n          if (input.tagName === \"SELECT\" && input.hasAttribute(\"multiple\")) {\n            for (var _iterator24 = input.options, _isArray24 = true, _i26 = 0, _iterator24 = _isArray24 ? _iterator24 : _iterator24[Symbol.iterator]();;) {\n              var _ref23;\n              if (_isArray24) {\n                if (_i26 >= _iterator24.length) break;\n                _ref23 = _iterator24[_i26++];\n              } else {\n                _i26 = _iterator24.next();\n                if (_i26.done) break;\n                _ref23 = _i26.value;\n              }\n              var option = _ref23;\n              if (option.selected) {\n                formData.append(inputName, option.value);\n              }\n            }\n          } else if (!inputType || inputType !== \"checkbox\" && inputType !== \"radio\" || input.checked) {\n            formData.append(inputName, input.value);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_updateFilesUploadProgress\",\n    value: function _updateFilesUploadProgress(files, xhr, e) {\n      var progress = void 0;\n      if (typeof e !== 'undefined') {\n        progress = 100 * e.loaded / e.total;\n        if (files[0].upload.chunked) {\n          var file = files[0];\n          var chunk = this._getChunk(file, xhr);\n          chunk.progress = progress;\n          chunk.total = e.total;\n          chunk.bytesSent = e.loaded;\n          var fileProgress = 0,\n            fileTotal = void 0,\n            fileBytesSent = void 0;\n          file.upload.progress = 0;\n          file.upload.total = 0;\n          file.upload.bytesSent = 0;\n          for (var i = 0; i < file.upload.totalChunkCount; i++) {\n            if (file.upload.chunks[i] !== undefined && file.upload.chunks[i].progress !== undefined) {\n              file.upload.progress += file.upload.chunks[i].progress;\n              file.upload.total += file.upload.chunks[i].total;\n              file.upload.bytesSent += file.upload.chunks[i].bytesSent;\n            }\n          }\n          file.upload.progress = file.upload.progress / file.upload.totalChunkCount;\n        } else {\n          for (var _iterator25 = files, _isArray25 = true, _i27 = 0, _iterator25 = _isArray25 ? _iterator25 : _iterator25[Symbol.iterator]();;) {\n            var _ref24;\n            if (_isArray25) {\n              if (_i27 >= _iterator25.length) break;\n              _ref24 = _iterator25[_i27++];\n            } else {\n              _i27 = _iterator25.next();\n              if (_i27.done) break;\n              _ref24 = _i27.value;\n            }\n            var _file2 = _ref24;\n            _file2.upload.progress = progress;\n            _file2.upload.total = e.total;\n            _file2.upload.bytesSent = e.loaded;\n          }\n        }\n        for (var _iterator26 = files, _isArray26 = true, _i28 = 0, _iterator26 = _isArray26 ? _iterator26 : _iterator26[Symbol.iterator]();;) {\n          var _ref25;\n          if (_isArray26) {\n            if (_i28 >= _iterator26.length) break;\n            _ref25 = _iterator26[_i28++];\n          } else {\n            _i28 = _iterator26.next();\n            if (_i28.done) break;\n            _ref25 = _i28.value;\n          }\n          var _file3 = _ref25;\n          this.emit(\"uploadprogress\", _file3, _file3.upload.progress, _file3.upload.bytesSent);\n        }\n      } else {\n        var allFilesFinished = true;\n        progress = 100;\n        for (var _iterator27 = files, _isArray27 = true, _i29 = 0, _iterator27 = _isArray27 ? _iterator27 : _iterator27[Symbol.iterator]();;) {\n          var _ref26;\n          if (_isArray27) {\n            if (_i29 >= _iterator27.length) break;\n            _ref26 = _iterator27[_i29++];\n          } else {\n            _i29 = _iterator27.next();\n            if (_i29.done) break;\n            _ref26 = _i29.value;\n          }\n          var _file4 = _ref26;\n          if (_file4.upload.progress !== 100 || _file4.upload.bytesSent !== _file4.upload.total) {\n            allFilesFinished = false;\n          }\n          _file4.upload.progress = progress;\n          _file4.upload.bytesSent = _file4.upload.total;\n        }\n        if (allFilesFinished) {\n          return;\n        }\n        for (var _iterator28 = files, _isArray28 = true, _i30 = 0, _iterator28 = _isArray28 ? _iterator28 : _iterator28[Symbol.iterator]();;) {\n          var _ref27;\n          if (_isArray28) {\n            if (_i30 >= _iterator28.length) break;\n            _ref27 = _iterator28[_i30++];\n          } else {\n            _i30 = _iterator28.next();\n            if (_i30.done) break;\n            _ref27 = _i30.value;\n          }\n          var _file5 = _ref27;\n          this.emit(\"uploadprogress\", _file5, progress, _file5.upload.bytesSent);\n        }\n      }\n    }\n  }, {\n    key: \"_finishedUploading\",\n    value: function _finishedUploading(files, xhr, e) {\n      var response = void 0;\n      if (files[0].status === Dropzone.CANCELED) {\n        return;\n      }\n      if (xhr.readyState !== 4) {\n        return;\n      }\n      if (xhr.responseType !== 'arraybuffer' && xhr.responseType !== 'blob') {\n        response = xhr.responseText;\n        if (xhr.getResponseHeader(\"content-type\") && ~xhr.getResponseHeader(\"content-type\").indexOf(\"application/json\")) {\n          try {\n            response = JSON.parse(response);\n          } catch (error) {\n            e = error;\n            response = \"Invalid JSON response from server.\";\n          }\n        }\n      }\n      this._updateFilesUploadProgress(files);\n      if (!(200 <= xhr.status && xhr.status < 300)) {\n        this._handleUploadError(files, xhr, response);\n      } else {\n        if (files[0].upload.chunked) {\n          files[0].upload.finishedChunkUpload(this._getChunk(files[0], xhr));\n        } else {\n          this._finished(files, response, e);\n        }\n      }\n    }\n  }, {\n    key: \"_handleUploadError\",\n    value: function _handleUploadError(files, xhr, response) {\n      if (files[0].status === Dropzone.CANCELED) {\n        return;\n      }\n      if (files[0].upload.chunked && this.options.retryChunks) {\n        var chunk = this._getChunk(files[0], xhr);\n        if (chunk.retries++ < this.options.retryChunksLimit) {\n          this._uploadData(files, [chunk.dataBlock]);\n          return;\n        } else {\n          console.warn('Retried this chunk too often. Giving up.');\n        }\n      }\n      for (var _iterator29 = files, _isArray29 = true, _i31 = 0, _iterator29 = _isArray29 ? _iterator29 : _iterator29[Symbol.iterator]();;) {\n        var _ref28;\n        if (_isArray29) {\n          if (_i31 >= _iterator29.length) break;\n          _ref28 = _iterator29[_i31++];\n        } else {\n          _i31 = _iterator29.next();\n          if (_i31.done) break;\n          _ref28 = _i31.value;\n        }\n        var file = _ref28;\n        this._errorProcessing(files, response || this.options.dictResponseError.replace(\"{{statusCode}}\", xhr.status), xhr);\n      }\n    }\n  }, {\n    key: \"submitRequest\",\n    value: function submitRequest(xhr, formData, files) {\n      xhr.send(formData);\n    }\n  }, {\n    key: \"_finished\",\n    value: function _finished(files, responseText, e) {\n      for (var _iterator30 = files, _isArray30 = true, _i32 = 0, _iterator30 = _isArray30 ? _iterator30 : _iterator30[Symbol.iterator]();;) {\n        var _ref29;\n        if (_isArray30) {\n          if (_i32 >= _iterator30.length) break;\n          _ref29 = _iterator30[_i32++];\n        } else {\n          _i32 = _iterator30.next();\n          if (_i32.done) break;\n          _ref29 = _i32.value;\n        }\n        var file = _ref29;\n        file.status = Dropzone.SUCCESS;\n        this.emit(\"success\", file, responseText, e);\n        this.emit(\"complete\", file);\n      }\n      if (this.options.uploadMultiple) {\n        this.emit(\"successmultiple\", files, responseText, e);\n        this.emit(\"completemultiple\", files);\n      }\n      if (this.options.autoProcessQueue) {\n        return this.processQueue();\n      }\n    }\n  }, {\n    key: \"_errorProcessing\",\n    value: function _errorProcessing(files, message, xhr) {\n      for (var _iterator31 = files, _isArray31 = true, _i33 = 0, _iterator31 = _isArray31 ? _iterator31 : _iterator31[Symbol.iterator]();;) {\n        var _ref30;\n        if (_isArray31) {\n          if (_i33 >= _iterator31.length) break;\n          _ref30 = _iterator31[_i33++];\n        } else {\n          _i33 = _iterator31.next();\n          if (_i33.done) break;\n          _ref30 = _i33.value;\n        }\n        var file = _ref30;\n        file.status = Dropzone.ERROR;\n        this.emit(\"error\", file, message, xhr);\n        this.emit(\"complete\", file);\n      }\n      if (this.options.uploadMultiple) {\n        this.emit(\"errormultiple\", files, message, xhr);\n        this.emit(\"completemultiple\", files);\n      }\n      if (this.options.autoProcessQueue) {\n        return this.processQueue();\n      }\n    }\n  }], [{\n    key: \"uuidv4\",\n    value: function uuidv4() {\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0,\n          v = c === 'x' ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n      });\n    }\n  }]);\n  return Dropzone;\n}(Emitter);\nDropzone.initClass();\nDropzone.version = \"5.2.0\";\nDropzone.options = {};\nDropzone.optionsForElement = function (element) {\n  if (element.getAttribute(\"id\")) {\n    return Dropzone.options[camelize(element.getAttribute(\"id\"))];\n  } else {\n    return undefined;\n  }\n};\nDropzone.instances = [];\nDropzone.forElement = function (element) {\n  if (typeof element === \"string\") {\n    element = document.querySelector(element);\n  }\n  if ((element != null ? element.dropzone : undefined) == null) {\n    throw new Error(\"No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.\");\n  }\n  return element.dropzone;\n};\nDropzone.autoDiscover = true;\nDropzone.discover = function () {\n  var dropzones = void 0;\n  if (document.querySelectorAll) {\n    dropzones = document.querySelectorAll(\".dropzone\");\n  } else {\n    dropzones = [];\n    var checkElements = function checkElements(elements) {\n      return function () {\n        var result = [];\n        for (var _iterator32 = elements, _isArray32 = true, _i34 = 0, _iterator32 = _isArray32 ? _iterator32 : _iterator32[Symbol.iterator]();;) {\n          var _ref31;\n          if (_isArray32) {\n            if (_i34 >= _iterator32.length) break;\n            _ref31 = _iterator32[_i34++];\n          } else {\n            _i34 = _iterator32.next();\n            if (_i34.done) break;\n            _ref31 = _i34.value;\n          }\n          var el = _ref31;\n          if (/(^| )dropzone($| )/.test(el.className)) {\n            result.push(dropzones.push(el));\n          } else {\n            result.push(undefined);\n          }\n        }\n        return result;\n      }();\n    };\n    checkElements(document.getElementsByTagName(\"div\"));\n    checkElements(document.getElementsByTagName(\"form\"));\n  }\n  return function () {\n    var result = [];\n    for (var _iterator33 = dropzones, _isArray33 = true, _i35 = 0, _iterator33 = _isArray33 ? _iterator33 : _iterator33[Symbol.iterator]();;) {\n      var _ref32;\n      if (_isArray33) {\n        if (_i35 >= _iterator33.length) break;\n        _ref32 = _iterator33[_i35++];\n      } else {\n        _i35 = _iterator33.next();\n        if (_i35.done) break;\n        _ref32 = _i35.value;\n      }\n      var dropzone = _ref32;\n      if (Dropzone.optionsForElement(dropzone) !== false) {\n        result.push(new Dropzone(dropzone));\n      } else {\n        result.push(undefined);\n      }\n    }\n    return result;\n  }();\n};\nDropzone.blacklistedBrowsers = [/opera.*(Macintosh|Windows Phone).*version\\/12/i];\nDropzone.isBrowserSupported = function () {\n  var capableBrowser = true;\n  if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) {\n    if (!(\"classList\" in document.createElement(\"a\"))) {\n      capableBrowser = false;\n    } else {\n      for (var _iterator34 = Dropzone.blacklistedBrowsers, _isArray34 = true, _i36 = 0, _iterator34 = _isArray34 ? _iterator34 : _iterator34[Symbol.iterator]();;) {\n        var _ref33;\n        if (_isArray34) {\n          if (_i36 >= _iterator34.length) break;\n          _ref33 = _iterator34[_i36++];\n        } else {\n          _i36 = _iterator34.next();\n          if (_i36.done) break;\n          _ref33 = _i36.value;\n        }\n        var regex = _ref33;\n        if (regex.test(navigator.userAgent)) {\n          capableBrowser = false;\n          continue;\n        }\n      }\n    }\n  } else {\n    capableBrowser = false;\n  }\n  return capableBrowser;\n};\nDropzone.dataURItoBlob = function (dataURI) {\n  var byteString = atob(dataURI.split(',')[1]);\n  var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n  var ab = new ArrayBuffer(byteString.length);\n  var ia = new Uint8Array(ab);\n  for (var i = 0, end = byteString.length, asc = 0 <= end; asc ? i <= end : i >= end; asc ? i++ : i--) {\n    ia[i] = byteString.charCodeAt(i);\n  }\n  return new Blob([ab], {\n    type: mimeString\n  });\n};\nvar without = function without(list, rejectedItem) {\n  return list.filter(function (item) {\n    return item !== rejectedItem;\n  }).map(function (item) {\n    return item;\n  });\n};\nvar camelize = function camelize(str) {\n  return str.replace(/[\\-_](\\w)/g, function (match) {\n    return match.charAt(1).toUpperCase();\n  });\n};\nDropzone.createElement = function (string) {\n  var div = document.createElement(\"div\");\n  div.innerHTML = string;\n  return div.childNodes[0];\n};\nDropzone.elementInside = function (element, container) {\n  if (element === container) {\n    return true;\n  }\n  while (element = element.parentNode) {\n    if (element === container) {\n      return true;\n    }\n  }\n  return false;\n};\nDropzone.getElement = function (el, name) {\n  var element = void 0;\n  if (typeof el === \"string\") {\n    element = document.querySelector(el);\n  } else if (el.nodeType != null) {\n    element = el;\n  }\n  if (element == null) {\n    throw new Error(\"Invalid `\" + name + \"` option provided. Please provide a CSS selector or a plain HTML element.\");\n  }\n  return element;\n};\nDropzone.getElements = function (els, name) {\n  var el = void 0,\n    elements = void 0;\n  if (els instanceof Array) {\n    elements = [];\n    try {\n      for (var _iterator35 = els, _isArray35 = true, _i37 = 0, _iterator35 = _isArray35 ? _iterator35 : _iterator35[Symbol.iterator]();;) {\n        if (_isArray35) {\n          if (_i37 >= _iterator35.length) break;\n          el = _iterator35[_i37++];\n        } else {\n          _i37 = _iterator35.next();\n          if (_i37.done) break;\n          el = _i37.value;\n        }\n        elements.push(this.getElement(el, name));\n      }\n    } catch (e) {\n      elements = null;\n    }\n  } else if (typeof els === \"string\") {\n    elements = [];\n    for (var _iterator36 = document.querySelectorAll(els), _isArray36 = true, _i38 = 0, _iterator36 = _isArray36 ? _iterator36 : _iterator36[Symbol.iterator]();;) {\n      if (_isArray36) {\n        if (_i38 >= _iterator36.length) break;\n        el = _iterator36[_i38++];\n      } else {\n        _i38 = _iterator36.next();\n        if (_i38.done) break;\n        el = _i38.value;\n      }\n      elements.push(el);\n    }\n  } else if (els.nodeType != null) {\n    elements = [els];\n  }\n  if (elements == null || !elements.length) {\n    throw new Error(\"Invalid `\" + name + \"` option provided. Please provide a CSS selector, a plain HTML element or a list of those.\");\n  }\n  return elements;\n};\nDropzone.confirm = function (question, accepted, rejected) {\n  if (window.confirm(question)) {\n    return accepted();\n  } else if (rejected != null) {\n    return rejected();\n  }\n};\nDropzone.isValidFile = function (file, acceptedFiles) {\n  if (!acceptedFiles) {\n    return true;\n  }\n  acceptedFiles = acceptedFiles.split(\",\");\n  var mimeType = file.type;\n  var baseMimeType = mimeType.replace(/\\/.*$/, \"\");\n  for (var _iterator37 = acceptedFiles, _isArray37 = true, _i39 = 0, _iterator37 = _isArray37 ? _iterator37 : _iterator37[Symbol.iterator]();;) {\n    var _ref34;\n    if (_isArray37) {\n      if (_i39 >= _iterator37.length) break;\n      _ref34 = _iterator37[_i39++];\n    } else {\n      _i39 = _iterator37.next();\n      if (_i39.done) break;\n      _ref34 = _i39.value;\n    }\n    var validType = _ref34;\n    validType = validType.trim();\n    if (validType.charAt(0) === \".\") {\n      if (file.name.toLowerCase().indexOf(validType.toLowerCase(), file.name.length - validType.length) !== -1) {\n        return true;\n      }\n    } else if (/\\/\\*$/.test(validType)) {\n      if (baseMimeType === validType.replace(/\\/.*$/, \"\")) {\n        return true;\n      }\n    } else {\n      if (mimeType === validType) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\nif (typeof jQuery !== 'undefined' && jQuery !== null) {\n  jQuery.fn.dropzone = function (options) {\n    return this.each(function () {\n      return new Dropzone(this, options);\n    });\n  };\n}\nif ( true && module !== null) {\n  module.exports = Dropzone;\n} else {\n  window.Dropzone = Dropzone;\n}\nDropzone.ADDED = \"added\";\nDropzone.QUEUED = \"queued\";\nDropzone.ACCEPTED = Dropzone.QUEUED;\nDropzone.UPLOADING = \"uploading\";\nDropzone.PROCESSING = Dropzone.UPLOADING;\nDropzone.CANCELED = \"canceled\";\nDropzone.ERROR = \"error\";\nDropzone.SUCCESS = \"success\";\nvar detectVerticalSquash = function detectVerticalSquash(img) {\n  var iw = img.naturalWidth;\n  var ih = img.naturalHeight;\n  var canvas = document.createElement(\"canvas\");\n  canvas.width = 1;\n  canvas.height = ih;\n  var ctx = canvas.getContext(\"2d\");\n  ctx.drawImage(img, 0, 0);\n  var _ctx$getImageData = ctx.getImageData(1, 0, 1, ih),\n    data = _ctx$getImageData.data;\n  var sy = 0;\n  var ey = ih;\n  var py = ih;\n  while (py > sy) {\n    var alpha = data[(py - 1) * 4 + 3];\n    if (alpha === 0) {\n      ey = py;\n    } else {\n      sy = py;\n    }\n    py = ey + sy >> 1;\n  }\n  var ratio = py / ih;\n  if (ratio === 0) {\n    return 1;\n  } else {\n    return ratio;\n  }\n};\nvar drawImageIOSFix = function drawImageIOSFix(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {\n  var vertSquashRatio = detectVerticalSquash(img);\n  return ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);\n};\nvar ExifRestore = function () {\n  function ExifRestore() {\n    _classCallCheck(this, ExifRestore);\n  }\n  _createClass(ExifRestore, null, [{\n    key: \"initClass\",\n    value: function initClass() {\n      this.KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    }\n  }, {\n    key: \"encode64\",\n    value: function encode64(input) {\n      var output = '';\n      var chr1 = undefined;\n      var chr2 = undefined;\n      var chr3 = '';\n      var enc1 = undefined;\n      var enc2 = undefined;\n      var enc3 = undefined;\n      var enc4 = '';\n      var i = 0;\n      while (true) {\n        chr1 = input[i++];\n        chr2 = input[i++];\n        chr3 = input[i++];\n        enc1 = chr1 >> 2;\n        enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n        enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n        enc4 = chr3 & 63;\n        if (isNaN(chr2)) {\n          enc3 = enc4 = 64;\n        } else if (isNaN(chr3)) {\n          enc4 = 64;\n        }\n        output = output + this.KEY_STR.charAt(enc1) + this.KEY_STR.charAt(enc2) + this.KEY_STR.charAt(enc3) + this.KEY_STR.charAt(enc4);\n        chr1 = chr2 = chr3 = '';\n        enc1 = enc2 = enc3 = enc4 = '';\n        if (!(i < input.length)) {\n          break;\n        }\n      }\n      return output;\n    }\n  }, {\n    key: \"restore\",\n    value: function restore(origFileBase64, resizedFileBase64) {\n      if (!origFileBase64.match('data:image/jpeg;base64,')) {\n        return resizedFileBase64;\n      }\n      var rawImage = this.decode64(origFileBase64.replace('data:image/jpeg;base64,', ''));\n      var segments = this.slice2Segments(rawImage);\n      var image = this.exifManipulation(resizedFileBase64, segments);\n      return \"data:image/jpeg;base64,\" + this.encode64(image);\n    }\n  }, {\n    key: \"exifManipulation\",\n    value: function exifManipulation(resizedFileBase64, segments) {\n      var exifArray = this.getExifArray(segments);\n      var newImageArray = this.insertExif(resizedFileBase64, exifArray);\n      var aBuffer = new Uint8Array(newImageArray);\n      return aBuffer;\n    }\n  }, {\n    key: \"getExifArray\",\n    value: function getExifArray(segments) {\n      var seg = undefined;\n      var x = 0;\n      while (x < segments.length) {\n        seg = segments[x];\n        if (seg[0] === 255 & seg[1] === 225) {\n          return seg;\n        }\n        x++;\n      }\n      return [];\n    }\n  }, {\n    key: \"insertExif\",\n    value: function insertExif(resizedFileBase64, exifArray) {\n      var imageData = resizedFileBase64.replace('data:image/jpeg;base64,', '');\n      var buf = this.decode64(imageData);\n      var separatePoint = buf.indexOf(255, 3);\n      var mae = buf.slice(0, separatePoint);\n      var ato = buf.slice(separatePoint);\n      var array = mae;\n      array = array.concat(exifArray);\n      array = array.concat(ato);\n      return array;\n    }\n  }, {\n    key: \"slice2Segments\",\n    value: function slice2Segments(rawImageArray) {\n      var head = 0;\n      var segments = [];\n      while (true) {\n        var length;\n        if (rawImageArray[head] === 255 & rawImageArray[head + 1] === 218) {\n          break;\n        }\n        if (rawImageArray[head] === 255 & rawImageArray[head + 1] === 216) {\n          head += 2;\n        } else {\n          length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3];\n          var endPoint = head + length + 2;\n          var seg = rawImageArray.slice(head, endPoint);\n          segments.push(seg);\n          head = endPoint;\n        }\n        if (head > rawImageArray.length) {\n          break;\n        }\n      }\n      return segments;\n    }\n  }, {\n    key: \"decode64\",\n    value: function decode64(input) {\n      var output = '';\n      var chr1 = undefined;\n      var chr2 = undefined;\n      var chr3 = '';\n      var enc1 = undefined;\n      var enc2 = undefined;\n      var enc3 = undefined;\n      var enc4 = '';\n      var i = 0;\n      var buf = [];\n      var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n      if (base64test.exec(input)) {\n        console.warn('There were invalid base64 characters in the input text.\\nValid base64 characters are A-Z, a-z, 0-9, \\'+\\', \\'/\\',and \\'=\\'\\nExpect errors in decoding.');\n      }\n      input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n      while (true) {\n        enc1 = this.KEY_STR.indexOf(input.charAt(i++));\n        enc2 = this.KEY_STR.indexOf(input.charAt(i++));\n        enc3 = this.KEY_STR.indexOf(input.charAt(i++));\n        enc4 = this.KEY_STR.indexOf(input.charAt(i++));\n        chr1 = enc1 << 2 | enc2 >> 4;\n        chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n        chr3 = (enc3 & 3) << 6 | enc4;\n        buf.push(chr1);\n        if (enc3 !== 64) {\n          buf.push(chr2);\n        }\n        if (enc4 !== 64) {\n          buf.push(chr3);\n        }\n        chr1 = chr2 = chr3 = '';\n        enc1 = enc2 = enc3 = enc4 = '';\n        if (!(i < input.length)) {\n          break;\n        }\n      }\n      return buf;\n    }\n  }]);\n  return ExifRestore;\n}();\nExifRestore.initClass();\nvar contentLoaded = function contentLoaded(win, fn) {\n  var done = false;\n  var top = true;\n  var doc = win.document;\n  var root = doc.documentElement;\n  var add = doc.addEventListener ? \"addEventListener\" : \"attachEvent\";\n  var rem = doc.addEventListener ? \"removeEventListener\" : \"detachEvent\";\n  var pre = doc.addEventListener ? \"\" : \"on\";\n  var init = function init(e) {\n    if (e.type === \"readystatechange\" && doc.readyState !== \"complete\") {\n      return;\n    }\n    (e.type === \"load\" ? win : doc)[rem](pre + e.type, init, false);\n    if (!done && (done = true)) {\n      return fn.call(win, e.type || e);\n    }\n  };\n  var poll = function poll() {\n    try {\n      root.doScroll(\"left\");\n    } catch (e) {\n      setTimeout(poll, 50);\n      return;\n    }\n    return init(\"poll\");\n  };\n  if (doc.readyState !== \"complete\") {\n    if (doc.createEventObject && root.doScroll) {\n      try {\n        top = !win.frameElement;\n      } catch (error) {}\n      if (top) {\n        poll();\n      }\n    }\n    doc[add](pre + \"DOMContentLoaded\", init, false);\n    doc[add](pre + \"readystatechange\", init, false);\n    return win[add](pre + \"load\", init, false);\n  }\n};\nDropzone._autoDiscoverFunction = function () {\n  if (Dropzone.autoDiscover) {\n    return Dropzone.discover();\n  }\n};\ncontentLoaded(window, Dropzone._autoDiscoverFunction);\nfunction __guard__(value, transform) {\n  return typeof value !== 'undefined' && value !== null ? transform(value) : undefined;\n}\nfunction __guardMethod__(obj, methodName, transform) {\n  if (typeof obj !== 'undefined' && obj !== null && typeof obj[methodName] === 'function') {\n    return transform(obj, methodName);\n  } else {\n    return undefined;\n  }\n}\n\n/**\n *\n * DROPZONE\n * \n */\n\nDropzone.autoDiscover = false;\n\n/*\n\t//MUTATION OBSERVER (observes changes are made to the dom)\n\tvar MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;\n\t\n\tvar observer = new MutationObserver(function(mutations) {\n\t\tmutations.forEach(function(mutation) {\n\t\t\t//checkAdSteps(); calls a function if change is made to dom\n\t\t});    \n\t});\n\t\n\tvar observerConfig = {\n\t\tattributes: true, \n\t\tchildList: true, \n\t\tcharacterData: true,\n\t};\n\t\n\tvar targetNode = document.querySelector('.dropzone');\n\tobserver.observe(targetNode, observerConfig);\n*/\n$(document).ready(function () {\n  //position FUNCTION\n  function orderImages() {\n    $(\".dz-overlay\").removeClass(\"hidden\");\n    var i = 1;\n    var set = $('.dz-preview:not(.dz-file-preview)');\n    var length = set.length;\n    var list = new Array();\n    set.each(function (index) {\n      $(this).attr('data-position', i);\n      var idVar = $(this).attr('data-id');\n      var fileVar = $(this).attr('data-file');\n      //var positionVar = $(this).attr('data-position');\n\n      var listItem = {\n        item_id: idVar,\n        file: fileVar,\n        position: i\n      };\n      list.push(listItem);\n      if (index === length - 1) {\n        var dataArray = JSON.stringify(list);\n        //console.log(dataArray);\n        $.ajax({\n          url: \"/admin/images/order\",\n          method: 'post',\n          headers: {\n            'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n          },\n          data: {\n            data: dataArray\n          },\n          type: 'POST',\n          success: function success(response) {\n            $(\".dz-overlay\").addClass(\"hidden\");\n          }\n        });\n      }\n      i++;\n    });\n  }\n  ;\n  function checkEmpty() {\n    setTimeout(function () {\n      if ($(\".dz-preview:not(.dz-file-preview)\").length) {\n        $(\"#dropzone__container\").addClass(\"dz-started\");\n      } else {\n        $(\"#dropzone__container\").removeClass(\"dz-started\");\n      }\n    }, 0);\n  }\n  function addfiles(dz) {\n    if ($(\"#dropzone__json\").length) {\n      var images = JSON.parse($(\"#dropzone__json\").html());\n      $.each(images, function (key, value) {\n        // Create the mock file:\n        var addFile = {\n          name: value['file'],\n          size: 1\n        }; //, status: Dropzone.SUCCESS\n\n        // Call the default addedfile event handler\n        Dropzone.forElement(\"#dropzone__container\").emit(\"addedfile\", addFile);\n\n        // And optionally show the thumbnail of the file:\n        Dropzone.forElement(\"#dropzone__container\").emit(\"thumbnail\", addFile, value['url']);\n        Dropzone.forElement(\"#dropzone__container\").emit(\"complete\", addFile);\n      });\n      $(\".dz-preview:not(.dz-file-preview)\").each(function (i) {\n        var position = i + 1;\n        $(this).attr(\"data-id\", images[i]['id']);\n        $(this).attr(\"data-file\", images[i]['file']);\n        $(this).attr(\"data-position\", position);\n        $(this).find(\".dz-overlay\").addClass(\"hidden\");\n      });\n    }\n  }\n\n  //DROPZONE\n\n  window.dropzoneInit = function () {\n    if ($(\".dropzone\").length) {\n      var i = 1; //id counter for upload response\n      $(\"#dropzone__container\").dropzone({\n        url: \"/admin/images/store\",\n        method: 'post',\n        headers: {\n          'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n        },\n        maxFiles: 20,\n        addRemoveLinks: true,\n        clickable: true,\n        dictCancelUpload: decodeURIComponent(''),\n        dictRemoveFile: decodeURIComponent(''),\n        capture: true,\n        uploadMultiple: true,\n        parallelUploads: 10,\n        previewTemplate: document.querySelector('#preview-template').innerHTML,\n        init: function init() {\n          //this.on(\"etcetcetc\"), function(file) { alert(); });\n          //this.on(\"addedfile\", function(file) { new_file_added(file); });\n          //this.on(\"thumbnail\", function(file,fileurl) { new_thumbnail_added(file); });\n          //this.on(\"removedfile\", function(file) { new_file_removed(file); });\n          //this.on(\"totaluploadprogress\", function(progress) { display_progress(progress); });\n          //this.on(\"queuecomplete\", function() { all_files_uploaded(); });\n          //this.on(\"processing\", function(file) { new_file_processed(file); });\n\n          /*\n          \t\t        this.on(\"addedfile\", function(file) {\n          \t\t\t\t    if (this.files.length) {\n          \t\t\t\t        var _i, _len;\n          \t\t\t\t        for (_i = 0, _len = this.files.length; _i < _len - 1; _i++) // -1 to exclude current file\n          \t\t\t\t        {\n          \t\t\t\t            if(this.files[_i].name === file.name && this.files[_i].size === file.size && this.files[_i].lastModifiedDate.toString() === file.lastModifiedDate.toString())\n          \t\t\t\t            {\n          \t\t\t\t                this.removeFile(file);\n          \t\t\t\t            }\n          \t\t\t\t        }\n          \t\t\t\t    }\n          \t\t\t\t});\n          */\n          var dz = this;\n          addfiles(dz);\n        },\n        removedfile: function removedfile(file) {\n          //console.log(file.previewElement.childNodes[1].classList);\n          file.previewElement.childNodes[1].classList.remove(\"hidden\");\n          //console.log(file.previewElement.childNodes[1].classList);\n          //HANDELING DELETION FILE\n          var name = file.name; //nodig?\n\n          var idVar = file.previewElement.attributes[1].value;\n          var fileVar = file.previewElement.attributes[2].value;\n          var data = {\n            item_id: idVar,\n            file: fileVar\n          };\n          var dataArray = JSON.stringify(data);\n          $.ajax({\n            type: 'POST',\n            url: '/admin/images/destroy',\n            headers: {\n              'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n            },\n            data: {\n              data: dataArray\n            },\n            success: function success(response) {\n              var _ref;\n              //(_ref = file.previewElement) != null ? _ref.parentNode.removeChild(file.previewElement) : void 0;\n              //console.log(response);\n              if ((_ref = file.previewElement) != null) {\n                _ref.parentNode.removeChild(file.previewElement);\n                orderImages();\n                file.previewElement.childNodes[1].classList.add(\"hidden\");\n              } else {\n                void 0;\n              }\n            }\n          });\n          checkEmpty(); //fixes the display of the dz message (sleep ja afbeeldingen hierheen)        \n        },\n        success: function success(file, response) {\n          //SETTING position NUMBERING\n          $(\".dz-preview:not(.dz-file-preview)\").each(function (index) {\n            var id = parseInt($(this).attr(\"data-position\"));\n            $('.dz-preview:not(.dz-file-preview)[data-position=\"' + id + '\"]').insertAfter('.dz-preview:not(.dz-file-preview)[data-position=\"' + (id - 1) + '\"]');\n          });\n          var result = response;\n          //console.log(result);\n          //var result = JSON.parse(response); // this was a bugfix verify it works correctly\n          file.previewElement.setAttribute(\"data-id\", result[i].item_id);\n          file.previewElement.setAttribute(\"data-file\", result[i].file);\n          file.previewElement.setAttribute(\"data-position\", result[i].position);\n\n          //FIX AGAINST FIRST UPLOAD BATCH MOVING TO PREVIEW CONTAINER AFTER A DELETION OR SORTING\n          $(\".dz-complete\").insertAfter(\"#preview-template\");\n          $(\".dz-preview:not(.dz-file-preview) .dz-overlay\").addClass(\"hidden\");\n          /*\n          \t\t        setTimeout(function(){\n          \t\t        \t$(\".dz-preview:not(.dz-file-preview) .dz-overlay\").addClass(\"hidden\");\n          \t\t        }, 10);\n          */\n          $(\".dz-upload\").css(\"opacity\", \"0\");\n          orderImages();\n          i++;\n        },\n        error: function error(file, message) {\n          //$(file.previewElement).addClass(\"dz-error\").find('.dz-error-message').text(message.Message);\n          console.log(message.Message);\n        },\n        complete: function complete() {}\n      });\n    }\n\n    //DRAG AND DROP\n    $(function () {\n      var startIndex, changeIndex, uiHeight, uiWidth;\n      $(\"#dropzone__container\").sortable({\n        items: '.dz-preview',\n        cursor: 'move',\n        opacity: 0.5,\n        connectWith: \"#dropzone__container\",\n        containment: '#dropzone__container',\n        distance: 20,\n        tolerance: 'pointer',\n        placeholder: 'marker',\n        animation: 200,\n        update: function update(e, ui) {\n          orderImages();\n        }\n      }); //.disableSelection()\n    });\n  };\n  dropzoneInit();\n  $(document).on('click', '.dz-rotate', function () {\n    $(this).parent().parent().find(\".dz-overlay\").removeClass(\"hidden\");\n    var e = $(this).parent().parent();\n    var idVar = e.attr('data-id');\n    var fileVar = e.attr('data-file');\n    var data = {\n      item_id: idVar,\n      file: fileVar\n    };\n    var dataArray = JSON.stringify(data);\n    $.ajax({\n      url: \"/admin/images/rotate\",\n      headers: {\n        'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n      },\n      data: {\n        data: dataArray\n      },\n      type: 'POST',\n      async: true,\n      //prevents firing multiple times?\n      success: function success(response) {\n        var img = e.find(\".dz-image img\");\n        var angle = img.attr(\"data-angle\");\n        if (_typeof(angle) !== ( true ? \"undefined\" : undefined) && angle !== false) {\n          angle = parseInt(angle);\n        } else {\n          var angle = 0;\n        }\n        angle += 90;\n        img.attr(\"data-angle\", angle);\n        var css = '-webkit-transform: rotate(' + angle + 'deg);-moz-transform:rotate(' + angle + 'deg);-ms-transform:rotate(' + angle + 'deg);-o-transform:rotate(' + angle + 'deg);transform:rotate(' + angle + 'deg);';\n        img.attr(\"style\", css);\n\n        //REMOVES OVERLAY\n        e.find(\".dz-overlay\").addClass(\"hidden\");\n      }\n    });\n  });\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\"), __webpack_require__(/*! ./../../../../../node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module), __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./package/resources/js/app/custom/dropzone.js\n");

/***/ }),

/***/ "./package/resources/js/app/custom/jquery-ui.js":
/*!******************************************************!*\
  !*** ./package/resources/js/app/custom/jquery-ui.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! jQuery UI - v1.12.1 - 2017-10-15\n* http://jqueryui.com\n* Includes: widget.js, data.js, scroll-parent.js, widgets/sortable.js, widgets/mouse.js\n* Copyright jQuery Foundation and other contributors; Licensed MIT */\n\n(function (t) {\n   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;\n})(function (t) {\n  t.ui = t.ui || {}, t.ui.version = \"1.12.1\";\n  var e = 0,\n    i = Array.prototype.slice;\n  t.cleanData = function (e) {\n    return function (i) {\n      var s, n, o;\n      for (o = 0; null != (n = i[o]); o++) try {\n        s = t._data(n, \"events\"), s && s.remove && t(n).triggerHandler(\"remove\");\n      } catch (a) {}\n      e(i);\n    };\n  }(t.cleanData), t.widget = function (e, i, s) {\n    var n,\n      o,\n      a,\n      r = {},\n      h = e.split(\".\")[0];\n    e = e.split(\".\")[1];\n    var l = h + \"-\" + e;\n    return s || (s = i, i = t.Widget), t.isArray(s) && (s = t.extend.apply(null, [{}].concat(s))), t.expr[\":\"][l.toLowerCase()] = function (e) {\n      return !!t.data(e, l);\n    }, t[h] = t[h] || {}, n = t[h][e], o = t[h][e] = function (t, e) {\n      return this._createWidget ? (arguments.length && this._createWidget(t, e), void 0) : new o(t, e);\n    }, t.extend(o, n, {\n      version: s.version,\n      _proto: t.extend({}, s),\n      _childConstructors: []\n    }), a = new i(), a.options = t.widget.extend({}, a.options), t.each(s, function (e, s) {\n      return t.isFunction(s) ? (r[e] = function () {\n        function t() {\n          return i.prototype[e].apply(this, arguments);\n        }\n        function n(t) {\n          return i.prototype[e].apply(this, t);\n        }\n        return function () {\n          var e,\n            i = this._super,\n            o = this._superApply;\n          return this._super = t, this._superApply = n, e = s.apply(this, arguments), this._super = i, this._superApply = o, e;\n        };\n      }(), void 0) : (r[e] = s, void 0);\n    }), o.prototype = t.widget.extend(a, {\n      widgetEventPrefix: n ? a.widgetEventPrefix || e : e\n    }, r, {\n      constructor: o,\n      namespace: h,\n      widgetName: e,\n      widgetFullName: l\n    }), n ? (t.each(n._childConstructors, function (e, i) {\n      var s = i.prototype;\n      t.widget(s.namespace + \".\" + s.widgetName, o, i._proto);\n    }), delete n._childConstructors) : i._childConstructors.push(o), t.widget.bridge(e, o), o;\n  }, t.widget.extend = function (e) {\n    for (var s, n, o = i.call(arguments, 1), a = 0, r = o.length; r > a; a++) for (s in o[a]) n = o[a][s], o[a].hasOwnProperty(s) && void 0 !== n && (e[s] = t.isPlainObject(n) ? t.isPlainObject(e[s]) ? t.widget.extend({}, e[s], n) : t.widget.extend({}, n) : n);\n    return e;\n  }, t.widget.bridge = function (e, s) {\n    var n = s.prototype.widgetFullName || e;\n    t.fn[e] = function (o) {\n      var a = \"string\" == typeof o,\n        r = i.call(arguments, 1),\n        h = this;\n      return a ? this.length || \"instance\" !== o ? this.each(function () {\n        var i,\n          s = t.data(this, n);\n        return \"instance\" === o ? (h = s, !1) : s ? t.isFunction(s[o]) && \"_\" !== o.charAt(0) ? (i = s[o].apply(s, r), i !== s && void 0 !== i ? (h = i && i.jquery ? h.pushStack(i.get()) : i, !1) : void 0) : t.error(\"no such method '\" + o + \"' for \" + e + \" widget instance\") : t.error(\"cannot call methods on \" + e + \" prior to initialization; \" + \"attempted to call method '\" + o + \"'\");\n      }) : h = void 0 : (r.length && (o = t.widget.extend.apply(null, [o].concat(r))), this.each(function () {\n        var e = t.data(this, n);\n        e ? (e.option(o || {}), e._init && e._init()) : t.data(this, n, new s(o, this));\n      })), h;\n    };\n  }, t.Widget = function () {}, t.Widget._childConstructors = [], t.Widget.prototype = {\n    widgetName: \"widget\",\n    widgetEventPrefix: \"\",\n    defaultElement: \"<div>\",\n    options: {\n      classes: {},\n      disabled: !1,\n      create: null\n    },\n    _createWidget: function _createWidget(i, s) {\n      s = t(s || this.defaultElement || this)[0], this.element = t(s), this.uuid = e++, this.eventNamespace = \".\" + this.widgetName + this.uuid, this.bindings = t(), this.hoverable = t(), this.focusable = t(), this.classesElementLookup = {}, s !== this && (t.data(s, this.widgetFullName, this), this._on(!0, this.element, {\n        remove: function remove(t) {\n          t.target === s && this.destroy();\n        }\n      }), this.document = t(s.style ? s.ownerDocument : s.document || s), this.window = t(this.document[0].defaultView || this.document[0].parentWindow)), this.options = t.widget.extend({}, this.options, this._getCreateOptions(), i), this._create(), this.options.disabled && this._setOptionDisabled(this.options.disabled), this._trigger(\"create\", null, this._getCreateEventData()), this._init();\n    },\n    _getCreateOptions: function _getCreateOptions() {\n      return {};\n    },\n    _getCreateEventData: t.noop,\n    _create: t.noop,\n    _init: t.noop,\n    destroy: function destroy() {\n      var e = this;\n      this._destroy(), t.each(this.classesElementLookup, function (t, i) {\n        e._removeClass(i, t);\n      }), this.element.off(this.eventNamespace).removeData(this.widgetFullName), this.widget().off(this.eventNamespace).removeAttr(\"aria-disabled\"), this.bindings.off(this.eventNamespace);\n    },\n    _destroy: t.noop,\n    widget: function widget() {\n      return this.element;\n    },\n    option: function option(e, i) {\n      var s,\n        n,\n        o,\n        a = e;\n      if (0 === arguments.length) return t.widget.extend({}, this.options);\n      if (\"string\" == typeof e) if (a = {}, s = e.split(\".\"), e = s.shift(), s.length) {\n        for (n = a[e] = t.widget.extend({}, this.options[e]), o = 0; s.length - 1 > o; o++) n[s[o]] = n[s[o]] || {}, n = n[s[o]];\n        if (e = s.pop(), 1 === arguments.length) return void 0 === n[e] ? null : n[e];\n        n[e] = i;\n      } else {\n        if (1 === arguments.length) return void 0 === this.options[e] ? null : this.options[e];\n        a[e] = i;\n      }\n      return this._setOptions(a), this;\n    },\n    _setOptions: function _setOptions(t) {\n      var e;\n      for (e in t) this._setOption(e, t[e]);\n      return this;\n    },\n    _setOption: function _setOption(t, e) {\n      return \"classes\" === t && this._setOptionClasses(e), this.options[t] = e, \"disabled\" === t && this._setOptionDisabled(e), this;\n    },\n    _setOptionClasses: function _setOptionClasses(e) {\n      var i, s, n;\n      for (i in e) n = this.classesElementLookup[i], e[i] !== this.options.classes[i] && n && n.length && (s = t(n.get()), this._removeClass(n, i), s.addClass(this._classes({\n        element: s,\n        keys: i,\n        classes: e,\n        add: !0\n      })));\n    },\n    _setOptionDisabled: function _setOptionDisabled(t) {\n      this._toggleClass(this.widget(), this.widgetFullName + \"-disabled\", null, !!t), t && (this._removeClass(this.hoverable, null, \"ui-state-hover\"), this._removeClass(this.focusable, null, \"ui-state-focus\"));\n    },\n    enable: function enable() {\n      return this._setOptions({\n        disabled: !1\n      });\n    },\n    disable: function disable() {\n      return this._setOptions({\n        disabled: !0\n      });\n    },\n    _classes: function _classes(e) {\n      function i(i, o) {\n        var a, r;\n        for (r = 0; i.length > r; r++) a = n.classesElementLookup[i[r]] || t(), a = e.add ? t(t.unique(a.get().concat(e.element.get()))) : t(a.not(e.element).get()), n.classesElementLookup[i[r]] = a, s.push(i[r]), o && e.classes[i[r]] && s.push(e.classes[i[r]]);\n      }\n      var s = [],\n        n = this;\n      return e = t.extend({\n        element: this.element,\n        classes: this.options.classes || {}\n      }, e), this._on(e.element, {\n        remove: \"_untrackClassesElement\"\n      }), e.keys && i(e.keys.match(/\\S+/g) || [], !0), e.extra && i(e.extra.match(/\\S+/g) || []), s.join(\" \");\n    },\n    _untrackClassesElement: function _untrackClassesElement(e) {\n      var i = this;\n      t.each(i.classesElementLookup, function (s, n) {\n        -1 !== t.inArray(e.target, n) && (i.classesElementLookup[s] = t(n.not(e.target).get()));\n      });\n    },\n    _removeClass: function _removeClass(t, e, i) {\n      return this._toggleClass(t, e, i, !1);\n    },\n    _addClass: function _addClass(t, e, i) {\n      return this._toggleClass(t, e, i, !0);\n    },\n    _toggleClass: function _toggleClass(t, e, i, s) {\n      s = \"boolean\" == typeof s ? s : i;\n      var n = \"string\" == typeof t || null === t,\n        o = {\n          extra: n ? e : i,\n          keys: n ? t : e,\n          element: n ? this.element : t,\n          add: s\n        };\n      return o.element.toggleClass(this._classes(o), s), this;\n    },\n    _on: function _on(e, i, s) {\n      var n,\n        o = this;\n      \"boolean\" != typeof e && (s = i, i = e, e = !1), s ? (i = n = t(i), this.bindings = this.bindings.add(i)) : (s = i, i = this.element, n = this.widget()), t.each(s, function (s, a) {\n        function r() {\n          return e || o.options.disabled !== !0 && !t(this).hasClass(\"ui-state-disabled\") ? (\"string\" == typeof a ? o[a] : a).apply(o, arguments) : void 0;\n        }\n        \"string\" != typeof a && (r.guid = a.guid = a.guid || r.guid || t.guid++);\n        var h = s.match(/^([\\w:-]*)\\s*(.*)$/),\n          l = h[1] + o.eventNamespace,\n          c = h[2];\n        c ? n.on(l, c, r) : i.on(l, r);\n      });\n    },\n    _off: function _off(e, i) {\n      i = (i || \"\").split(\" \").join(this.eventNamespace + \" \") + this.eventNamespace, e.off(i).off(i), this.bindings = t(this.bindings.not(e).get()), this.focusable = t(this.focusable.not(e).get()), this.hoverable = t(this.hoverable.not(e).get());\n    },\n    _delay: function _delay(t, e) {\n      function i() {\n        return (\"string\" == typeof t ? s[t] : t).apply(s, arguments);\n      }\n      var s = this;\n      return setTimeout(i, e || 0);\n    },\n    _hoverable: function _hoverable(e) {\n      this.hoverable = this.hoverable.add(e), this._on(e, {\n        mouseenter: function mouseenter(e) {\n          this._addClass(t(e.currentTarget), null, \"ui-state-hover\");\n        },\n        mouseleave: function mouseleave(e) {\n          this._removeClass(t(e.currentTarget), null, \"ui-state-hover\");\n        }\n      });\n    },\n    _focusable: function _focusable(e) {\n      this.focusable = this.focusable.add(e), this._on(e, {\n        focusin: function focusin(e) {\n          this._addClass(t(e.currentTarget), null, \"ui-state-focus\");\n        },\n        focusout: function focusout(e) {\n          this._removeClass(t(e.currentTarget), null, \"ui-state-focus\");\n        }\n      });\n    },\n    _trigger: function _trigger(e, i, s) {\n      var n,\n        o,\n        a = this.options[e];\n      if (s = s || {}, i = t.Event(i), i.type = (e === this.widgetEventPrefix ? e : this.widgetEventPrefix + e).toLowerCase(), i.target = this.element[0], o = i.originalEvent) for (n in o) n in i || (i[n] = o[n]);\n      return this.element.trigger(i, s), !(t.isFunction(a) && a.apply(this.element[0], [i].concat(s)) === !1 || i.isDefaultPrevented());\n    }\n  }, t.each({\n    show: \"fadeIn\",\n    hide: \"fadeOut\"\n  }, function (e, i) {\n    t.Widget.prototype[\"_\" + e] = function (s, n, o) {\n      \"string\" == typeof n && (n = {\n        effect: n\n      });\n      var a,\n        r = n ? n === !0 || \"number\" == typeof n ? i : n.effect || i : e;\n      n = n || {}, \"number\" == typeof n && (n = {\n        duration: n\n      }), a = !t.isEmptyObject(n), n.complete = o, n.delay && s.delay(n.delay), a && t.effects && t.effects.effect[r] ? s[e](n) : r !== e && s[r] ? s[r](n.duration, n.easing, o) : s.queue(function (i) {\n        t(this)[e](), o && o.call(s[0]), i();\n      });\n    };\n  }), t.widget, t.extend(t.expr[\":\"], {\n    data: t.expr.createPseudo ? t.expr.createPseudo(function (e) {\n      return function (i) {\n        return !!t.data(i, e);\n      };\n    }) : function (e, i, s) {\n      return !!t.data(e, s[3]);\n    }\n  }), t.fn.scrollParent = function (e) {\n    var i = this.css(\"position\"),\n      s = \"absolute\" === i,\n      n = e ? /(auto|scroll|hidden)/ : /(auto|scroll)/,\n      o = this.parents().filter(function () {\n        var e = t(this);\n        return s && \"static\" === e.css(\"position\") ? !1 : n.test(e.css(\"overflow\") + e.css(\"overflow-y\") + e.css(\"overflow-x\"));\n      }).eq(0);\n    return \"fixed\" !== i && o.length ? o : t(this[0].ownerDocument || document);\n  }, t.ui.ie = !!/msie [\\w.]+/.exec(navigator.userAgent.toLowerCase());\n  var s = !1;\n  t(document).on(\"mouseup\", function () {\n    s = !1;\n  }), t.widget(\"ui.mouse\", {\n    version: \"1.12.1\",\n    options: {\n      cancel: \"input, textarea, button, select, option\",\n      distance: 1,\n      delay: 0\n    },\n    _mouseInit: function _mouseInit() {\n      var e = this;\n      this.element.on(\"mousedown.\" + this.widgetName, function (t) {\n        return e._mouseDown(t);\n      }).on(\"click.\" + this.widgetName, function (i) {\n        return !0 === t.data(i.target, e.widgetName + \".preventClickEvent\") ? (t.removeData(i.target, e.widgetName + \".preventClickEvent\"), i.stopImmediatePropagation(), !1) : void 0;\n      }), this.started = !1;\n    },\n    _mouseDestroy: function _mouseDestroy() {\n      this.element.off(\".\" + this.widgetName), this._mouseMoveDelegate && this.document.off(\"mousemove.\" + this.widgetName, this._mouseMoveDelegate).off(\"mouseup.\" + this.widgetName, this._mouseUpDelegate);\n    },\n    _mouseDown: function _mouseDown(e) {\n      if (!s) {\n        this._mouseMoved = !1, this._mouseStarted && this._mouseUp(e), this._mouseDownEvent = e;\n        var i = this,\n          n = 1 === e.which,\n          o = \"string\" == typeof this.options.cancel && e.target.nodeName ? t(e.target).closest(this.options.cancel).length : !1;\n        return n && !o && this._mouseCapture(e) ? (this.mouseDelayMet = !this.options.delay, this.mouseDelayMet || (this._mouseDelayTimer = setTimeout(function () {\n          i.mouseDelayMet = !0;\n        }, this.options.delay)), this._mouseDistanceMet(e) && this._mouseDelayMet(e) && (this._mouseStarted = this._mouseStart(e) !== !1, !this._mouseStarted) ? (e.preventDefault(), !0) : (!0 === t.data(e.target, this.widgetName + \".preventClickEvent\") && t.removeData(e.target, this.widgetName + \".preventClickEvent\"), this._mouseMoveDelegate = function (t) {\n          return i._mouseMove(t);\n        }, this._mouseUpDelegate = function (t) {\n          return i._mouseUp(t);\n        }, this.document.on(\"mousemove.\" + this.widgetName, this._mouseMoveDelegate).on(\"mouseup.\" + this.widgetName, this._mouseUpDelegate), e.preventDefault(), s = !0, !0)) : !0;\n      }\n    },\n    _mouseMove: function _mouseMove(e) {\n      if (this._mouseMoved) {\n        if (t.ui.ie && (!document.documentMode || 9 > document.documentMode) && !e.button) return this._mouseUp(e);\n        if (!e.which) if (e.originalEvent.altKey || e.originalEvent.ctrlKey || e.originalEvent.metaKey || e.originalEvent.shiftKey) this.ignoreMissingWhich = !0;else if (!this.ignoreMissingWhich) return this._mouseUp(e);\n      }\n      return (e.which || e.button) && (this._mouseMoved = !0), this._mouseStarted ? (this._mouseDrag(e), e.preventDefault()) : (this._mouseDistanceMet(e) && this._mouseDelayMet(e) && (this._mouseStarted = this._mouseStart(this._mouseDownEvent, e) !== !1, this._mouseStarted ? this._mouseDrag(e) : this._mouseUp(e)), !this._mouseStarted);\n    },\n    _mouseUp: function _mouseUp(e) {\n      this.document.off(\"mousemove.\" + this.widgetName, this._mouseMoveDelegate).off(\"mouseup.\" + this.widgetName, this._mouseUpDelegate), this._mouseStarted && (this._mouseStarted = !1, e.target === this._mouseDownEvent.target && t.data(e.target, this.widgetName + \".preventClickEvent\", !0), this._mouseStop(e)), this._mouseDelayTimer && (clearTimeout(this._mouseDelayTimer), delete this._mouseDelayTimer), this.ignoreMissingWhich = !1, s = !1, e.preventDefault();\n    },\n    _mouseDistanceMet: function _mouseDistanceMet(t) {\n      return Math.max(Math.abs(this._mouseDownEvent.pageX - t.pageX), Math.abs(this._mouseDownEvent.pageY - t.pageY)) >= this.options.distance;\n    },\n    _mouseDelayMet: function _mouseDelayMet() {\n      return this.mouseDelayMet;\n    },\n    _mouseStart: function _mouseStart() {},\n    _mouseDrag: function _mouseDrag() {},\n    _mouseStop: function _mouseStop() {},\n    _mouseCapture: function _mouseCapture() {\n      return !0;\n    }\n  }), t.widget(\"ui.sortable\", t.ui.mouse, {\n    version: \"1.12.1\",\n    widgetEventPrefix: \"sort\",\n    ready: !1,\n    options: {\n      appendTo: \"parent\",\n      axis: !1,\n      connectWith: !1,\n      containment: !1,\n      cursor: \"auto\",\n      cursorAt: !1,\n      dropOnEmpty: !0,\n      forcePlaceholderSize: !1,\n      forceHelperSize: !1,\n      grid: !1,\n      handle: !1,\n      helper: \"original\",\n      items: \"> *\",\n      opacity: !1,\n      placeholder: !1,\n      revert: !1,\n      scroll: !0,\n      scrollSensitivity: 20,\n      scrollSpeed: 20,\n      scope: \"default\",\n      tolerance: \"intersect\",\n      zIndex: 1e3,\n      activate: null,\n      beforeStop: null,\n      change: null,\n      deactivate: null,\n      out: null,\n      over: null,\n      receive: null,\n      remove: null,\n      sort: null,\n      start: null,\n      stop: null,\n      update: null\n    },\n    _isOverAxis: function _isOverAxis(t, e, i) {\n      return t >= e && e + i > t;\n    },\n    _isFloating: function _isFloating(t) {\n      return /left|right/.test(t.css(\"float\")) || /inline|table-cell/.test(t.css(\"display\"));\n    },\n    _create: function _create() {\n      this.containerCache = {}, this._addClass(\"ui-sortable\"), this.refresh(), this.offset = this.element.offset(), this._mouseInit(), this._setHandleClassName(), this.ready = !0;\n    },\n    _setOption: function _setOption(t, e) {\n      this._super(t, e), \"handle\" === t && this._setHandleClassName();\n    },\n    _setHandleClassName: function _setHandleClassName() {\n      var e = this;\n      this._removeClass(this.element.find(\".ui-sortable-handle\"), \"ui-sortable-handle\"), t.each(this.items, function () {\n        e._addClass(this.instance.options.handle ? this.item.find(this.instance.options.handle) : this.item, \"ui-sortable-handle\");\n      });\n    },\n    _destroy: function _destroy() {\n      this._mouseDestroy();\n      for (var t = this.items.length - 1; t >= 0; t--) this.items[t].item.removeData(this.widgetName + \"-item\");\n      return this;\n    },\n    _mouseCapture: function _mouseCapture(e, i) {\n      var s = null,\n        n = !1,\n        o = this;\n      return this.reverting ? !1 : this.options.disabled || \"static\" === this.options.type ? !1 : (this._refreshItems(e), t(e.target).parents().each(function () {\n        return t.data(this, o.widgetName + \"-item\") === o ? (s = t(this), !1) : void 0;\n      }), t.data(e.target, o.widgetName + \"-item\") === o && (s = t(e.target)), s ? !this.options.handle || i || (t(this.options.handle, s).find(\"*\").addBack().each(function () {\n        this === e.target && (n = !0);\n      }), n) ? (this.currentItem = s, this._removeCurrentsFromItems(), !0) : !1 : !1);\n    },\n    _mouseStart: function _mouseStart(e, i, s) {\n      var n,\n        o,\n        a = this.options;\n      if (this.currentContainer = this, this.refreshPositions(), this.helper = this._createHelper(e), this._cacheHelperProportions(), this._cacheMargins(), this.scrollParent = this.helper.scrollParent(), this.offset = this.currentItem.offset(), this.offset = {\n        top: this.offset.top - this.margins.top,\n        left: this.offset.left - this.margins.left\n      }, t.extend(this.offset, {\n        click: {\n          left: e.pageX - this.offset.left,\n          top: e.pageY - this.offset.top\n        },\n        parent: this._getParentOffset(),\n        relative: this._getRelativeOffset()\n      }), this.helper.css(\"position\", \"absolute\"), this.cssPosition = this.helper.css(\"position\"), this.originalPosition = this._generatePosition(e), this.originalPageX = e.pageX, this.originalPageY = e.pageY, a.cursorAt && this._adjustOffsetFromHelper(a.cursorAt), this.domPosition = {\n        prev: this.currentItem.prev()[0],\n        parent: this.currentItem.parent()[0]\n      }, this.helper[0] !== this.currentItem[0] && this.currentItem.hide(), this._createPlaceholder(), a.containment && this._setContainment(), a.cursor && \"auto\" !== a.cursor && (o = this.document.find(\"body\"), this.storedCursor = o.css(\"cursor\"), o.css(\"cursor\", a.cursor), this.storedStylesheet = t(\"<style>*{ cursor: \" + a.cursor + \" !important; }</style>\").appendTo(o)), a.opacity && (this.helper.css(\"opacity\") && (this._storedOpacity = this.helper.css(\"opacity\")), this.helper.css(\"opacity\", a.opacity)), a.zIndex && (this.helper.css(\"zIndex\") && (this._storedZIndex = this.helper.css(\"zIndex\")), this.helper.css(\"zIndex\", a.zIndex)), this.scrollParent[0] !== this.document[0] && \"HTML\" !== this.scrollParent[0].tagName && (this.overflowOffset = this.scrollParent.offset()), this._trigger(\"start\", e, this._uiHash()), this._preserveHelperProportions || this._cacheHelperProportions(), !s) for (n = this.containers.length - 1; n >= 0; n--) this.containers[n]._trigger(\"activate\", e, this._uiHash(this));\n      return t.ui.ddmanager && (t.ui.ddmanager.current = this), t.ui.ddmanager && !a.dropBehaviour && t.ui.ddmanager.prepareOffsets(this, e), this.dragging = !0, this._addClass(this.helper, \"ui-sortable-helper\"), this._mouseDrag(e), !0;\n    },\n    _mouseDrag: function _mouseDrag(e) {\n      var i,\n        s,\n        n,\n        o,\n        a = this.options,\n        r = !1;\n      for (this.position = this._generatePosition(e), this.positionAbs = this._convertPositionTo(\"absolute\"), this.lastPositionAbs || (this.lastPositionAbs = this.positionAbs), this.options.scroll && (this.scrollParent[0] !== this.document[0] && \"HTML\" !== this.scrollParent[0].tagName ? (this.overflowOffset.top + this.scrollParent[0].offsetHeight - e.pageY < a.scrollSensitivity ? this.scrollParent[0].scrollTop = r = this.scrollParent[0].scrollTop + a.scrollSpeed : e.pageY - this.overflowOffset.top < a.scrollSensitivity && (this.scrollParent[0].scrollTop = r = this.scrollParent[0].scrollTop - a.scrollSpeed), this.overflowOffset.left + this.scrollParent[0].offsetWidth - e.pageX < a.scrollSensitivity ? this.scrollParent[0].scrollLeft = r = this.scrollParent[0].scrollLeft + a.scrollSpeed : e.pageX - this.overflowOffset.left < a.scrollSensitivity && (this.scrollParent[0].scrollLeft = r = this.scrollParent[0].scrollLeft - a.scrollSpeed)) : (e.pageY - this.document.scrollTop() < a.scrollSensitivity ? r = this.document.scrollTop(this.document.scrollTop() - a.scrollSpeed) : this.window.height() - (e.pageY - this.document.scrollTop()) < a.scrollSensitivity && (r = this.document.scrollTop(this.document.scrollTop() + a.scrollSpeed)), e.pageX - this.document.scrollLeft() < a.scrollSensitivity ? r = this.document.scrollLeft(this.document.scrollLeft() - a.scrollSpeed) : this.window.width() - (e.pageX - this.document.scrollLeft()) < a.scrollSensitivity && (r = this.document.scrollLeft(this.document.scrollLeft() + a.scrollSpeed))), r !== !1 && t.ui.ddmanager && !a.dropBehaviour && t.ui.ddmanager.prepareOffsets(this, e)), this.positionAbs = this._convertPositionTo(\"absolute\"), this.options.axis && \"y\" === this.options.axis || (this.helper[0].style.left = this.position.left + \"px\"), this.options.axis && \"x\" === this.options.axis || (this.helper[0].style.top = this.position.top + \"px\"), i = this.items.length - 1; i >= 0; i--) if (s = this.items[i], n = s.item[0], o = this._intersectsWithPointer(s), o && s.instance === this.currentContainer && n !== this.currentItem[0] && this.placeholder[1 === o ? \"next\" : \"prev\"]()[0] !== n && !t.contains(this.placeholder[0], n) && (\"semi-dynamic\" === this.options.type ? !t.contains(this.element[0], n) : !0)) {\n        if (this.direction = 1 === o ? \"down\" : \"up\", \"pointer\" !== this.options.tolerance && !this._intersectsWithSides(s)) break;\n        this._rearrange(e, s), this._trigger(\"change\", e, this._uiHash());\n        break;\n      }\n      return this._contactContainers(e), t.ui.ddmanager && t.ui.ddmanager.drag(this, e), this._trigger(\"sort\", e, this._uiHash()), this.lastPositionAbs = this.positionAbs, !1;\n    },\n    _mouseStop: function _mouseStop(e, i) {\n      if (e) {\n        if (t.ui.ddmanager && !this.options.dropBehaviour && t.ui.ddmanager.drop(this, e), this.options.revert) {\n          var s = this,\n            n = this.placeholder.offset(),\n            o = this.options.axis,\n            a = {};\n          o && \"x\" !== o || (a.left = n.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollLeft)), o && \"y\" !== o || (a.top = n.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollTop)), this.reverting = !0, t(this.helper).animate(a, parseInt(this.options.revert, 10) || 500, function () {\n            s._clear(e);\n          });\n        } else this._clear(e, i);\n        return !1;\n      }\n    },\n    cancel: function cancel() {\n      if (this.dragging) {\n        this._mouseUp(new t.Event(\"mouseup\", {\n          target: null\n        })), \"original\" === this.options.helper ? (this.currentItem.css(this._storedCSS), this._removeClass(this.currentItem, \"ui-sortable-helper\")) : this.currentItem.show();\n        for (var e = this.containers.length - 1; e >= 0; e--) this.containers[e]._trigger(\"deactivate\", null, this._uiHash(this)), this.containers[e].containerCache.over && (this.containers[e]._trigger(\"out\", null, this._uiHash(this)), this.containers[e].containerCache.over = 0);\n      }\n      return this.placeholder && (this.placeholder[0].parentNode && this.placeholder[0].parentNode.removeChild(this.placeholder[0]), \"original\" !== this.options.helper && this.helper && this.helper[0].parentNode && this.helper.remove(), t.extend(this, {\n        helper: null,\n        dragging: !1,\n        reverting: !1,\n        _noFinalSort: null\n      }), this.domPosition.prev ? t(this.domPosition.prev).after(this.currentItem) : t(this.domPosition.parent).prepend(this.currentItem)), this;\n    },\n    serialize: function serialize(e) {\n      var i = this._getItemsAsjQuery(e && e.connected),\n        s = [];\n      return e = e || {}, t(i).each(function () {\n        var i = (t(e.item || this).attr(e.attribute || \"id\") || \"\").match(e.expression || /(.+)[\\-=_](.+)/);\n        i && s.push((e.key || i[1] + \"[]\") + \"=\" + (e.key && e.expression ? i[1] : i[2]));\n      }), !s.length && e.key && s.push(e.key + \"=\"), s.join(\"&\");\n    },\n    toArray: function toArray(e) {\n      var i = this._getItemsAsjQuery(e && e.connected),\n        s = [];\n      return e = e || {}, i.each(function () {\n        s.push(t(e.item || this).attr(e.attribute || \"id\") || \"\");\n      }), s;\n    },\n    _intersectsWith: function _intersectsWith(t) {\n      var e = this.positionAbs.left,\n        i = e + this.helperProportions.width,\n        s = this.positionAbs.top,\n        n = s + this.helperProportions.height,\n        o = t.left,\n        a = o + t.width,\n        r = t.top,\n        h = r + t.height,\n        l = this.offset.click.top,\n        c = this.offset.click.left,\n        u = \"x\" === this.options.axis || s + l > r && h > s + l,\n        d = \"y\" === this.options.axis || e + c > o && a > e + c,\n        p = u && d;\n      return \"pointer\" === this.options.tolerance || this.options.forcePointerForContainers || \"pointer\" !== this.options.tolerance && this.helperProportions[this.floating ? \"width\" : \"height\"] > t[this.floating ? \"width\" : \"height\"] ? p : e + this.helperProportions.width / 2 > o && a > i - this.helperProportions.width / 2 && s + this.helperProportions.height / 2 > r && h > n - this.helperProportions.height / 2;\n    },\n    _intersectsWithPointer: function _intersectsWithPointer(t) {\n      var e,\n        i,\n        s = \"x\" === this.options.axis || this._isOverAxis(this.positionAbs.top + this.offset.click.top, t.top, t.height),\n        n = \"y\" === this.options.axis || this._isOverAxis(this.positionAbs.left + this.offset.click.left, t.left, t.width),\n        o = s && n;\n      return o ? (e = this._getDragVerticalDirection(), i = this._getDragHorizontalDirection(), this.floating ? \"right\" === i || \"down\" === e ? 2 : 1 : e && (\"down\" === e ? 2 : 1)) : !1;\n    },\n    _intersectsWithSides: function _intersectsWithSides(t) {\n      var e = this._isOverAxis(this.positionAbs.top + this.offset.click.top, t.top + t.height / 2, t.height),\n        i = this._isOverAxis(this.positionAbs.left + this.offset.click.left, t.left + t.width / 2, t.width),\n        s = this._getDragVerticalDirection(),\n        n = this._getDragHorizontalDirection();\n      return this.floating && n ? \"right\" === n && i || \"left\" === n && !i : s && (\"down\" === s && e || \"up\" === s && !e);\n    },\n    _getDragVerticalDirection: function _getDragVerticalDirection() {\n      var t = this.positionAbs.top - this.lastPositionAbs.top;\n      return 0 !== t && (t > 0 ? \"down\" : \"up\");\n    },\n    _getDragHorizontalDirection: function _getDragHorizontalDirection() {\n      var t = this.positionAbs.left - this.lastPositionAbs.left;\n      return 0 !== t && (t > 0 ? \"right\" : \"left\");\n    },\n    refresh: function refresh(t) {\n      return this._refreshItems(t), this._setHandleClassName(), this.refreshPositions(), this;\n    },\n    _connectWith: function _connectWith() {\n      var t = this.options;\n      return t.connectWith.constructor === String ? [t.connectWith] : t.connectWith;\n    },\n    _getItemsAsjQuery: function _getItemsAsjQuery(e) {\n      function i() {\n        r.push(this);\n      }\n      var s,\n        n,\n        o,\n        a,\n        r = [],\n        h = [],\n        l = this._connectWith();\n      if (l && e) for (s = l.length - 1; s >= 0; s--) for (o = t(l[s], this.document[0]), n = o.length - 1; n >= 0; n--) a = t.data(o[n], this.widgetFullName), a && a !== this && !a.options.disabled && h.push([t.isFunction(a.options.items) ? a.options.items.call(a.element) : t(a.options.items, a.element).not(\".ui-sortable-helper\").not(\".ui-sortable-placeholder\"), a]);\n      for (h.push([t.isFunction(this.options.items) ? this.options.items.call(this.element, null, {\n        options: this.options,\n        item: this.currentItem\n      }) : t(this.options.items, this.element).not(\".ui-sortable-helper\").not(\".ui-sortable-placeholder\"), this]), s = h.length - 1; s >= 0; s--) h[s][0].each(i);\n      return t(r);\n    },\n    _removeCurrentsFromItems: function _removeCurrentsFromItems() {\n      var e = this.currentItem.find(\":data(\" + this.widgetName + \"-item)\");\n      this.items = t.grep(this.items, function (t) {\n        for (var i = 0; e.length > i; i++) if (e[i] === t.item[0]) return !1;\n        return !0;\n      });\n    },\n    _refreshItems: function _refreshItems(e) {\n      this.items = [], this.containers = [this];\n      var i,\n        s,\n        n,\n        o,\n        a,\n        r,\n        h,\n        l,\n        c = this.items,\n        u = [[t.isFunction(this.options.items) ? this.options.items.call(this.element[0], e, {\n          item: this.currentItem\n        }) : t(this.options.items, this.element), this]],\n        d = this._connectWith();\n      if (d && this.ready) for (i = d.length - 1; i >= 0; i--) for (n = t(d[i], this.document[0]), s = n.length - 1; s >= 0; s--) o = t.data(n[s], this.widgetFullName), o && o !== this && !o.options.disabled && (u.push([t.isFunction(o.options.items) ? o.options.items.call(o.element[0], e, {\n        item: this.currentItem\n      }) : t(o.options.items, o.element), o]), this.containers.push(o));\n      for (i = u.length - 1; i >= 0; i--) for (a = u[i][1], r = u[i][0], s = 0, l = r.length; l > s; s++) h = t(r[s]), h.data(this.widgetName + \"-item\", a), c.push({\n        item: h,\n        instance: a,\n        width: 0,\n        height: 0,\n        left: 0,\n        top: 0\n      });\n    },\n    refreshPositions: function refreshPositions(e) {\n      this.floating = this.items.length ? \"x\" === this.options.axis || this._isFloating(this.items[0].item) : !1, this.offsetParent && this.helper && (this.offset.parent = this._getParentOffset());\n      var i, s, n, o;\n      for (i = this.items.length - 1; i >= 0; i--) s = this.items[i], s.instance !== this.currentContainer && this.currentContainer && s.item[0] !== this.currentItem[0] || (n = this.options.toleranceElement ? t(this.options.toleranceElement, s.item) : s.item, e || (s.width = n.outerWidth(), s.height = n.outerHeight()), o = n.offset(), s.left = o.left, s.top = o.top);\n      if (this.options.custom && this.options.custom.refreshContainers) this.options.custom.refreshContainers.call(this);else for (i = this.containers.length - 1; i >= 0; i--) o = this.containers[i].element.offset(), this.containers[i].containerCache.left = o.left, this.containers[i].containerCache.top = o.top, this.containers[i].containerCache.width = this.containers[i].element.outerWidth(), this.containers[i].containerCache.height = this.containers[i].element.outerHeight();\n      return this;\n    },\n    _createPlaceholder: function _createPlaceholder(e) {\n      e = e || this;\n      var i,\n        s = e.options;\n      s.placeholder && s.placeholder.constructor !== String || (i = s.placeholder, s.placeholder = {\n        element: function element() {\n          var s = e.currentItem[0].nodeName.toLowerCase(),\n            n = t(\"<\" + s + \">\", e.document[0]);\n          return e._addClass(n, \"ui-sortable-placeholder\", i || e.currentItem[0].className)._removeClass(n, \"ui-sortable-helper\"), \"tbody\" === s ? e._createTrPlaceholder(e.currentItem.find(\"tr\").eq(0), t(\"<tr>\", e.document[0]).appendTo(n)) : \"tr\" === s ? e._createTrPlaceholder(e.currentItem, n) : \"img\" === s && n.attr(\"src\", e.currentItem.attr(\"src\")), i || n.css(\"visibility\", \"hidden\"), n;\n        },\n        update: function update(t, n) {\n          (!i || s.forcePlaceholderSize) && (n.height() || n.height(e.currentItem.innerHeight() - parseInt(e.currentItem.css(\"paddingTop\") || 0, 10) - parseInt(e.currentItem.css(\"paddingBottom\") || 0, 10)), n.width() || n.width(e.currentItem.innerWidth() - parseInt(e.currentItem.css(\"paddingLeft\") || 0, 10) - parseInt(e.currentItem.css(\"paddingRight\") || 0, 10)));\n        }\n      }), e.placeholder = t(s.placeholder.element.call(e.element, e.currentItem)), e.currentItem.after(e.placeholder), s.placeholder.update(e, e.placeholder);\n    },\n    _createTrPlaceholder: function _createTrPlaceholder(e, i) {\n      var s = this;\n      e.children().each(function () {\n        t(\"<td>&#160;</td>\", s.document[0]).attr(\"colspan\", t(this).attr(\"colspan\") || 1).appendTo(i);\n      });\n    },\n    _contactContainers: function _contactContainers(e) {\n      var i,\n        s,\n        n,\n        o,\n        a,\n        r,\n        h,\n        l,\n        c,\n        u,\n        d = null,\n        p = null;\n      for (i = this.containers.length - 1; i >= 0; i--) if (!t.contains(this.currentItem[0], this.containers[i].element[0])) if (this._intersectsWith(this.containers[i].containerCache)) {\n        if (d && t.contains(this.containers[i].element[0], d.element[0])) continue;\n        d = this.containers[i], p = i;\n      } else this.containers[i].containerCache.over && (this.containers[i]._trigger(\"out\", e, this._uiHash(this)), this.containers[i].containerCache.over = 0);\n      if (d) if (1 === this.containers.length) this.containers[p].containerCache.over || (this.containers[p]._trigger(\"over\", e, this._uiHash(this)), this.containers[p].containerCache.over = 1);else {\n        for (n = 1e4, o = null, c = d.floating || this._isFloating(this.currentItem), a = c ? \"left\" : \"top\", r = c ? \"width\" : \"height\", u = c ? \"pageX\" : \"pageY\", s = this.items.length - 1; s >= 0; s--) t.contains(this.containers[p].element[0], this.items[s].item[0]) && this.items[s].item[0] !== this.currentItem[0] && (h = this.items[s].item.offset()[a], l = !1, e[u] - h > this.items[s][r] / 2 && (l = !0), n > Math.abs(e[u] - h) && (n = Math.abs(e[u] - h), o = this.items[s], this.direction = l ? \"up\" : \"down\"));\n        if (!o && !this.options.dropOnEmpty) return;\n        if (this.currentContainer === this.containers[p]) return this.currentContainer.containerCache.over || (this.containers[p]._trigger(\"over\", e, this._uiHash()), this.currentContainer.containerCache.over = 1), void 0;\n        o ? this._rearrange(e, o, null, !0) : this._rearrange(e, null, this.containers[p].element, !0), this._trigger(\"change\", e, this._uiHash()), this.containers[p]._trigger(\"change\", e, this._uiHash(this)), this.currentContainer = this.containers[p], this.options.placeholder.update(this.currentContainer, this.placeholder), this.containers[p]._trigger(\"over\", e, this._uiHash(this)), this.containers[p].containerCache.over = 1;\n      }\n    },\n    _createHelper: function _createHelper(e) {\n      var i = this.options,\n        s = t.isFunction(i.helper) ? t(i.helper.apply(this.element[0], [e, this.currentItem])) : \"clone\" === i.helper ? this.currentItem.clone() : this.currentItem;\n      return s.parents(\"body\").length || t(\"parent\" !== i.appendTo ? i.appendTo : this.currentItem[0].parentNode)[0].appendChild(s[0]), s[0] === this.currentItem[0] && (this._storedCSS = {\n        width: this.currentItem[0].style.width,\n        height: this.currentItem[0].style.height,\n        position: this.currentItem.css(\"position\"),\n        top: this.currentItem.css(\"top\"),\n        left: this.currentItem.css(\"left\")\n      }), (!s[0].style.width || i.forceHelperSize) && s.width(this.currentItem.width()), (!s[0].style.height || i.forceHelperSize) && s.height(this.currentItem.height()), s;\n    },\n    _adjustOffsetFromHelper: function _adjustOffsetFromHelper(e) {\n      \"string\" == typeof e && (e = e.split(\" \")), t.isArray(e) && (e = {\n        left: +e[0],\n        top: +e[1] || 0\n      }), \"left\" in e && (this.offset.click.left = e.left + this.margins.left), \"right\" in e && (this.offset.click.left = this.helperProportions.width - e.right + this.margins.left), \"top\" in e && (this.offset.click.top = e.top + this.margins.top), \"bottom\" in e && (this.offset.click.top = this.helperProportions.height - e.bottom + this.margins.top);\n    },\n    _getParentOffset: function _getParentOffset() {\n      this.offsetParent = this.helper.offsetParent();\n      var e = this.offsetParent.offset();\n      return \"absolute\" === this.cssPosition && this.scrollParent[0] !== this.document[0] && t.contains(this.scrollParent[0], this.offsetParent[0]) && (e.left += this.scrollParent.scrollLeft(), e.top += this.scrollParent.scrollTop()), (this.offsetParent[0] === this.document[0].body || this.offsetParent[0].tagName && \"html\" === this.offsetParent[0].tagName.toLowerCase() && t.ui.ie) && (e = {\n        top: 0,\n        left: 0\n      }), {\n        top: e.top + (parseInt(this.offsetParent.css(\"borderTopWidth\"), 10) || 0),\n        left: e.left + (parseInt(this.offsetParent.css(\"borderLeftWidth\"), 10) || 0)\n      };\n    },\n    _getRelativeOffset: function _getRelativeOffset() {\n      if (\"relative\" === this.cssPosition) {\n        var t = this.currentItem.position();\n        return {\n          top: t.top - (parseInt(this.helper.css(\"top\"), 10) || 0) + this.scrollParent.scrollTop(),\n          left: t.left - (parseInt(this.helper.css(\"left\"), 10) || 0) + this.scrollParent.scrollLeft()\n        };\n      }\n      return {\n        top: 0,\n        left: 0\n      };\n    },\n    _cacheMargins: function _cacheMargins() {\n      this.margins = {\n        left: parseInt(this.currentItem.css(\"marginLeft\"), 10) || 0,\n        top: parseInt(this.currentItem.css(\"marginTop\"), 10) || 0\n      };\n    },\n    _cacheHelperProportions: function _cacheHelperProportions() {\n      this.helperProportions = {\n        width: this.helper.outerWidth(),\n        height: this.helper.outerHeight()\n      };\n    },\n    _setContainment: function _setContainment() {\n      var e,\n        i,\n        s,\n        n = this.options;\n      \"parent\" === n.containment && (n.containment = this.helper[0].parentNode), (\"document\" === n.containment || \"window\" === n.containment) && (this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, \"document\" === n.containment ? this.document.width() : this.window.width() - this.helperProportions.width - this.margins.left, (\"document\" === n.containment ? this.document.height() || document.body.parentNode.scrollHeight : this.window.height() || this.document[0].body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]), /^(document|window|parent)$/.test(n.containment) || (e = t(n.containment)[0], i = t(n.containment).offset(), s = \"hidden\" !== t(e).css(\"overflow\"), this.containment = [i.left + (parseInt(t(e).css(\"borderLeftWidth\"), 10) || 0) + (parseInt(t(e).css(\"paddingLeft\"), 10) || 0) - this.margins.left, i.top + (parseInt(t(e).css(\"borderTopWidth\"), 10) || 0) + (parseInt(t(e).css(\"paddingTop\"), 10) || 0) - this.margins.top, i.left + (s ? Math.max(e.scrollWidth, e.offsetWidth) : e.offsetWidth) - (parseInt(t(e).css(\"borderLeftWidth\"), 10) || 0) - (parseInt(t(e).css(\"paddingRight\"), 10) || 0) - this.helperProportions.width - this.margins.left, i.top + (s ? Math.max(e.scrollHeight, e.offsetHeight) : e.offsetHeight) - (parseInt(t(e).css(\"borderTopWidth\"), 10) || 0) - (parseInt(t(e).css(\"paddingBottom\"), 10) || 0) - this.helperProportions.height - this.margins.top]);\n    },\n    _convertPositionTo: function _convertPositionTo(e, i) {\n      i || (i = this.position);\n      var s = \"absolute\" === e ? 1 : -1,\n        n = \"absolute\" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && t.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent,\n        o = /(html|body)/i.test(n[0].tagName);\n      return {\n        top: i.top + this.offset.relative.top * s + this.offset.parent.top * s - (\"fixed\" === this.cssPosition ? -this.scrollParent.scrollTop() : o ? 0 : n.scrollTop()) * s,\n        left: i.left + this.offset.relative.left * s + this.offset.parent.left * s - (\"fixed\" === this.cssPosition ? -this.scrollParent.scrollLeft() : o ? 0 : n.scrollLeft()) * s\n      };\n    },\n    _generatePosition: function _generatePosition(e) {\n      var i,\n        s,\n        n = this.options,\n        o = e.pageX,\n        a = e.pageY,\n        r = \"absolute\" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && t.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent,\n        h = /(html|body)/i.test(r[0].tagName);\n      return \"relative\" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && this.scrollParent[0] !== this.offsetParent[0] || (this.offset.relative = this._getRelativeOffset()), this.originalPosition && (this.containment && (e.pageX - this.offset.click.left < this.containment[0] && (o = this.containment[0] + this.offset.click.left), e.pageY - this.offset.click.top < this.containment[1] && (a = this.containment[1] + this.offset.click.top), e.pageX - this.offset.click.left > this.containment[2] && (o = this.containment[2] + this.offset.click.left), e.pageY - this.offset.click.top > this.containment[3] && (a = this.containment[3] + this.offset.click.top)), n.grid && (i = this.originalPageY + Math.round((a - this.originalPageY) / n.grid[1]) * n.grid[1], a = this.containment ? i - this.offset.click.top >= this.containment[1] && i - this.offset.click.top <= this.containment[3] ? i : i - this.offset.click.top >= this.containment[1] ? i - n.grid[1] : i + n.grid[1] : i, s = this.originalPageX + Math.round((o - this.originalPageX) / n.grid[0]) * n.grid[0], o = this.containment ? s - this.offset.click.left >= this.containment[0] && s - this.offset.click.left <= this.containment[2] ? s : s - this.offset.click.left >= this.containment[0] ? s - n.grid[0] : s + n.grid[0] : s)), {\n        top: a - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + (\"fixed\" === this.cssPosition ? -this.scrollParent.scrollTop() : h ? 0 : r.scrollTop()),\n        left: o - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + (\"fixed\" === this.cssPosition ? -this.scrollParent.scrollLeft() : h ? 0 : r.scrollLeft())\n      };\n    },\n    _rearrange: function _rearrange(t, e, i, s) {\n      i ? i[0].appendChild(this.placeholder[0]) : e.item[0].parentNode.insertBefore(this.placeholder[0], \"down\" === this.direction ? e.item[0] : e.item[0].nextSibling), this.counter = this.counter ? ++this.counter : 1;\n      var n = this.counter;\n      this._delay(function () {\n        n === this.counter && this.refreshPositions(!s);\n      });\n    },\n    _clear: function _clear(t, e) {\n      function i(t, e, i) {\n        return function (s) {\n          i._trigger(t, s, e._uiHash(e));\n        };\n      }\n      this.reverting = !1;\n      var s,\n        n = [];\n      if (!this._noFinalSort && this.currentItem.parent().length && this.placeholder.before(this.currentItem), this._noFinalSort = null, this.helper[0] === this.currentItem[0]) {\n        for (s in this._storedCSS) (\"auto\" === this._storedCSS[s] || \"static\" === this._storedCSS[s]) && (this._storedCSS[s] = \"\");\n        this.currentItem.css(this._storedCSS), this._removeClass(this.currentItem, \"ui-sortable-helper\");\n      } else this.currentItem.show();\n      for (this.fromOutside && !e && n.push(function (t) {\n        this._trigger(\"receive\", t, this._uiHash(this.fromOutside));\n      }), !this.fromOutside && this.domPosition.prev === this.currentItem.prev().not(\".ui-sortable-helper\")[0] && this.domPosition.parent === this.currentItem.parent()[0] || e || n.push(function (t) {\n        this._trigger(\"update\", t, this._uiHash());\n      }), this !== this.currentContainer && (e || (n.push(function (t) {\n        this._trigger(\"remove\", t, this._uiHash());\n      }), n.push(function (t) {\n        return function (e) {\n          t._trigger(\"receive\", e, this._uiHash(this));\n        };\n      }.call(this, this.currentContainer)), n.push(function (t) {\n        return function (e) {\n          t._trigger(\"update\", e, this._uiHash(this));\n        };\n      }.call(this, this.currentContainer)))), s = this.containers.length - 1; s >= 0; s--) e || n.push(i(\"deactivate\", this, this.containers[s])), this.containers[s].containerCache.over && (n.push(i(\"out\", this, this.containers[s])), this.containers[s].containerCache.over = 0);\n      if (this.storedCursor && (this.document.find(\"body\").css(\"cursor\", this.storedCursor), this.storedStylesheet.remove()), this._storedOpacity && this.helper.css(\"opacity\", this._storedOpacity), this._storedZIndex && this.helper.css(\"zIndex\", \"auto\" === this._storedZIndex ? \"\" : this._storedZIndex), this.dragging = !1, e || this._trigger(\"beforeStop\", t, this._uiHash()), this.placeholder[0].parentNode.removeChild(this.placeholder[0]), this.cancelHelperRemoval || (this.helper[0] !== this.currentItem[0] && this.helper.remove(), this.helper = null), !e) {\n        for (s = 0; n.length > s; s++) n[s].call(this, t);\n        this._trigger(\"stop\", t, this._uiHash());\n      }\n      return this.fromOutside = !1, !this.cancelHelperRemoval;\n    },\n    _trigger: function _trigger() {\n      t.Widget.prototype._trigger.apply(this, arguments) === !1 && this.cancel();\n    },\n    _uiHash: function _uiHash(e) {\n      var i = e || this;\n      return {\n        helper: i.helper,\n        placeholder: i.placeholder || t([]),\n        position: i.position,\n        originalPosition: i.originalPosition,\n        offset: i.positionAbs,\n        item: i.currentItem,\n        sender: e ? e.element : null\n      };\n    }\n  });\n});\n/*!\n * jQuery UI Sortable Animation 0.0.1\n *\n * Copyright 2015, Egor Sharapov\n * Licensed under the MIT license.\n *\n * Depends:\n *  jquery.ui.sortable.js\n */\n(function (factory) {\n  if (true) {\n    // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\"), __webpack_require__(/*! jquery-ui */ \"./node_modules/jquery-ui/ui/widget.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(function ($) {\n  var supports = {},\n    testProp = function testProp(prefixes) {\n      var test_el = document.createElement('div'),\n        i,\n        l;\n      for (i = 0; l = prefixes.length, i < l; i++) {\n        if (test_el.style[prefixes[i]] != undefined) {\n          return prefixes[i];\n        }\n      }\n      return '';\n    },\n    use_css_animation = false;\n\n  // check for css-transforms support\n  supports['transform'] = testProp(['transform', 'WebkitTransform', 'MozTransform', 'OTransform', 'msTransform']);\n\n  // check for css-transitions support\n  supports['transition'] = testProp(['transition', 'WebkitTransition', 'MozTransition', 'OTransition', 'msTransition']);\n  use_css_animation = supports['transform'] && supports['transition'];\n  $.widget(\"ui.sortable\", $.ui.sortable, {\n    options: {\n      // adds the new `animation` option, turned off by default.\n      animation: 0\n    },\n    // called internally by sortable when sortable\n    // items are rearranged.\n    _rearrange: function _rearrange(e, item) {\n      var $item,\n        props = {},\n        reset_props = {},\n        offset,\n        axis = $.trim(this.options.axis);\n\n      // just call the original implementation of _rearrange()\n      // if option `animation` is turned off\n      // `currentContainer` used for animating received items\n      // from another sortable container (`connectWith` option)\n      if (!parseInt(this.currentContainer.options.animation) || !axis) {\n        return this._superApply(arguments);\n      }\n      $item = $(item.item[0]);\n      // if moved up, then move item up to its height,\n      // if moved down, then move item down\n      offset = (this.direction == 'up' ? '' : '-') + $item[axis == 'x' ? 'width' : 'height']() + 'px';\n\n      // call original _rearrange() at first\n      this._superApply(arguments);\n\n      // prepare starting css props\n      if (use_css_animation) {\n        props[supports['transform']] = (axis == 'x' ? 'translateX' : 'translateY') + '(' + offset + ')';\n      } else {\n        props = {\n          position: 'relative'\n        };\n        props[axis == 'x' ? 'left' : 'top'] = offset;\n      }\n\n      // set starting css props on item\n      $item.css(props);\n\n      // if css animations are not supported\n      // use jQuery animations\n      if (use_css_animation) {\n        props[supports['transition']] = supports['transform'] + ' ' + this.options.animation + 'ms';\n        props[supports['transform']] = '';\n        reset_props[supports['transform']] = '';\n        reset_props[supports['transition']] = '';\n        setTimeout(function () {\n          $item.css(props);\n        }, 0);\n      } else {\n        reset_props.top = '';\n        reset_props.position = '';\n        $item.animate({\n          top: '',\n          position: ''\n        }, this.options.animation);\n      }\n\n      // after animation ends\n      // clear changed for animation props\n      setTimeout(function () {\n        $item.css(reset_props);\n      }, this.options.animation);\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWNrYWdlL3Jlc291cmNlcy9qcy9hcHAvY3VzdG9tL2pxdWVyeS11aS5qcz85M2NmIl0sIm5hbWVzIjpbInQiLCJkZWZpbmUiLCJ1aSIsInZlcnNpb24iLCJlIiwiaSIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjbGVhbkRhdGEiLCJzIiwibiIsIm8iLCJfZGF0YSIsInJlbW92ZSIsInRyaWdnZXJIYW5kbGVyIiwiYSIsIndpZGdldCIsInIiLCJoIiwic3BsaXQiLCJsIiwiV2lkZ2V0IiwiaXNBcnJheSIsImV4dGVuZCIsImFwcGx5IiwiY29uY2F0IiwiZXhwciIsInRvTG93ZXJDYXNlIiwiZGF0YSIsIl9jcmVhdGVXaWRnZXQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJfcHJvdG8iLCJfY2hpbGRDb25zdHJ1Y3RvcnMiLCJvcHRpb25zIiwiZWFjaCIsImlzRnVuY3Rpb24iLCJfc3VwZXIiLCJfc3VwZXJBcHBseSIsIndpZGdldEV2ZW50UHJlZml4IiwiY29uc3RydWN0b3IiLCJuYW1lc3BhY2UiLCJ3aWRnZXROYW1lIiwid2lkZ2V0RnVsbE5hbWUiLCJwdXNoIiwiYnJpZGdlIiwiY2FsbCIsImhhc093blByb3BlcnR5IiwiaXNQbGFpbk9iamVjdCIsImZuIiwiY2hhckF0IiwianF1ZXJ5IiwicHVzaFN0YWNrIiwiZ2V0IiwiZXJyb3IiLCJvcHRpb24iLCJfaW5pdCIsImRlZmF1bHRFbGVtZW50IiwiY2xhc3NlcyIsImRpc2FibGVkIiwiY3JlYXRlIiwiZWxlbWVudCIsInV1aWQiLCJldmVudE5hbWVzcGFjZSIsImJpbmRpbmdzIiwiaG92ZXJhYmxlIiwiZm9jdXNhYmxlIiwiY2xhc3Nlc0VsZW1lbnRMb29rdXAiLCJfb24iLCJ0YXJnZXQiLCJkZXN0cm95IiwiZG9jdW1lbnQiLCJzdHlsZSIsIm93bmVyRG9jdW1lbnQiLCJ3aW5kb3ciLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsIl9nZXRDcmVhdGVPcHRpb25zIiwiX2NyZWF0ZSIsIl9zZXRPcHRpb25EaXNhYmxlZCIsIl90cmlnZ2VyIiwiX2dldENyZWF0ZUV2ZW50RGF0YSIsIm5vb3AiLCJfZGVzdHJveSIsIl9yZW1vdmVDbGFzcyIsIm9mZiIsInJlbW92ZURhdGEiLCJyZW1vdmVBdHRyIiwic2hpZnQiLCJwb3AiLCJfc2V0T3B0aW9ucyIsIl9zZXRPcHRpb24iLCJfc2V0T3B0aW9uQ2xhc3NlcyIsImFkZENsYXNzIiwiX2NsYXNzZXMiLCJrZXlzIiwiYWRkIiwiX3RvZ2dsZUNsYXNzIiwiZW5hYmxlIiwiZGlzYWJsZSIsInVuaXF1ZSIsIm5vdCIsIm1hdGNoIiwiZXh0cmEiLCJqb2luIiwiX3VudHJhY2tDbGFzc2VzRWxlbWVudCIsImluQXJyYXkiLCJfYWRkQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsImhhc0NsYXNzIiwiZ3VpZCIsImMiLCJvbiIsIl9vZmYiLCJfZGVsYXkiLCJzZXRUaW1lb3V0IiwiX2hvdmVyYWJsZSIsIm1vdXNlZW50ZXIiLCJjdXJyZW50VGFyZ2V0IiwibW91c2VsZWF2ZSIsIl9mb2N1c2FibGUiLCJmb2N1c2luIiwiZm9jdXNvdXQiLCJFdmVudCIsInR5cGUiLCJvcmlnaW5hbEV2ZW50IiwidHJpZ2dlciIsImlzRGVmYXVsdFByZXZlbnRlZCIsInNob3ciLCJoaWRlIiwiZWZmZWN0IiwiZHVyYXRpb24iLCJpc0VtcHR5T2JqZWN0IiwiY29tcGxldGUiLCJkZWxheSIsImVmZmVjdHMiLCJlYXNpbmciLCJxdWV1ZSIsImNyZWF0ZVBzZXVkbyIsInNjcm9sbFBhcmVudCIsImNzcyIsInBhcmVudHMiLCJmaWx0ZXIiLCJ0ZXN0IiwiZXEiLCJpZSIsImV4ZWMiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJjYW5jZWwiLCJkaXN0YW5jZSIsIl9tb3VzZUluaXQiLCJfbW91c2VEb3duIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwic3RhcnRlZCIsIl9tb3VzZURlc3Ryb3kiLCJfbW91c2VNb3ZlRGVsZWdhdGUiLCJfbW91c2VVcERlbGVnYXRlIiwiX21vdXNlTW92ZWQiLCJfbW91c2VTdGFydGVkIiwiX21vdXNlVXAiLCJfbW91c2VEb3duRXZlbnQiLCJ3aGljaCIsIm5vZGVOYW1lIiwiY2xvc2VzdCIsIl9tb3VzZUNhcHR1cmUiLCJtb3VzZURlbGF5TWV0IiwiX21vdXNlRGVsYXlUaW1lciIsIl9tb3VzZURpc3RhbmNlTWV0IiwiX21vdXNlRGVsYXlNZXQiLCJfbW91c2VTdGFydCIsInByZXZlbnREZWZhdWx0IiwiX21vdXNlTW92ZSIsImRvY3VtZW50TW9kZSIsImJ1dHRvbiIsImFsdEtleSIsImN0cmxLZXkiLCJtZXRhS2V5Iiwic2hpZnRLZXkiLCJpZ25vcmVNaXNzaW5nV2hpY2giLCJfbW91c2VEcmFnIiwiX21vdXNlU3RvcCIsImNsZWFyVGltZW91dCIsIk1hdGgiLCJtYXgiLCJhYnMiLCJwYWdlWCIsInBhZ2VZIiwibW91c2UiLCJyZWFkeSIsImFwcGVuZFRvIiwiYXhpcyIsImNvbm5lY3RXaXRoIiwiY29udGFpbm1lbnQiLCJjdXJzb3IiLCJjdXJzb3JBdCIsImRyb3BPbkVtcHR5IiwiZm9yY2VQbGFjZWhvbGRlclNpemUiLCJmb3JjZUhlbHBlclNpemUiLCJncmlkIiwiaGFuZGxlIiwiaGVscGVyIiwiaXRlbXMiLCJvcGFjaXR5IiwicGxhY2Vob2xkZXIiLCJyZXZlcnQiLCJzY3JvbGwiLCJzY3JvbGxTZW5zaXRpdml0eSIsInNjcm9sbFNwZWVkIiwic2NvcGUiLCJ0b2xlcmFuY2UiLCJ6SW5kZXgiLCJhY3RpdmF0ZSIsImJlZm9yZVN0b3AiLCJjaGFuZ2UiLCJkZWFjdGl2YXRlIiwib3V0Iiwib3ZlciIsInJlY2VpdmUiLCJzb3J0Iiwic3RhcnQiLCJzdG9wIiwidXBkYXRlIiwiX2lzT3ZlckF4aXMiLCJfaXNGbG9hdGluZyIsImNvbnRhaW5lckNhY2hlIiwicmVmcmVzaCIsIm9mZnNldCIsIl9zZXRIYW5kbGVDbGFzc05hbWUiLCJmaW5kIiwiaW5zdGFuY2UiLCJpdGVtIiwicmV2ZXJ0aW5nIiwiX3JlZnJlc2hJdGVtcyIsImFkZEJhY2siLCJjdXJyZW50SXRlbSIsIl9yZW1vdmVDdXJyZW50c0Zyb21JdGVtcyIsImN1cnJlbnRDb250YWluZXIiLCJyZWZyZXNoUG9zaXRpb25zIiwiX2NyZWF0ZUhlbHBlciIsIl9jYWNoZUhlbHBlclByb3BvcnRpb25zIiwiX2NhY2hlTWFyZ2lucyIsInRvcCIsIm1hcmdpbnMiLCJsZWZ0IiwiY2xpY2siLCJwYXJlbnQiLCJfZ2V0UGFyZW50T2Zmc2V0IiwicmVsYXRpdmUiLCJfZ2V0UmVsYXRpdmVPZmZzZXQiLCJjc3NQb3NpdGlvbiIsIm9yaWdpbmFsUG9zaXRpb24iLCJfZ2VuZXJhdGVQb3NpdGlvbiIsIm9yaWdpbmFsUGFnZVgiLCJvcmlnaW5hbFBhZ2VZIiwiX2FkanVzdE9mZnNldEZyb21IZWxwZXIiLCJkb21Qb3NpdGlvbiIsInByZXYiLCJfY3JlYXRlUGxhY2Vob2xkZXIiLCJfc2V0Q29udGFpbm1lbnQiLCJzdG9yZWRDdXJzb3IiLCJzdG9yZWRTdHlsZXNoZWV0IiwiX3N0b3JlZE9wYWNpdHkiLCJfc3RvcmVkWkluZGV4IiwidGFnTmFtZSIsIm92ZXJmbG93T2Zmc2V0IiwiX3VpSGFzaCIsIl9wcmVzZXJ2ZUhlbHBlclByb3BvcnRpb25zIiwiY29udGFpbmVycyIsImRkbWFuYWdlciIsImN1cnJlbnQiLCJkcm9wQmVoYXZpb3VyIiwicHJlcGFyZU9mZnNldHMiLCJkcmFnZ2luZyIsInBvc2l0aW9uIiwicG9zaXRpb25BYnMiLCJfY29udmVydFBvc2l0aW9uVG8iLCJsYXN0UG9zaXRpb25BYnMiLCJvZmZzZXRIZWlnaHQiLCJzY3JvbGxUb3AiLCJvZmZzZXRXaWR0aCIsInNjcm9sbExlZnQiLCJoZWlnaHQiLCJ3aWR0aCIsIl9pbnRlcnNlY3RzV2l0aFBvaW50ZXIiLCJjb250YWlucyIsImRpcmVjdGlvbiIsIl9pbnRlcnNlY3RzV2l0aFNpZGVzIiwiX3JlYXJyYW5nZSIsIl9jb250YWN0Q29udGFpbmVycyIsImRyYWciLCJkcm9wIiwib2Zmc2V0UGFyZW50IiwiYm9keSIsImFuaW1hdGUiLCJwYXJzZUludCIsIl9jbGVhciIsIl9zdG9yZWRDU1MiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJfbm9GaW5hbFNvcnQiLCJhZnRlciIsInByZXBlbmQiLCJzZXJpYWxpemUiLCJfZ2V0SXRlbXNBc2pRdWVyeSIsImNvbm5lY3RlZCIsImF0dHIiLCJhdHRyaWJ1dGUiLCJleHByZXNzaW9uIiwia2V5IiwidG9BcnJheSIsIl9pbnRlcnNlY3RzV2l0aCIsImhlbHBlclByb3BvcnRpb25zIiwidSIsImQiLCJwIiwiZm9yY2VQb2ludGVyRm9yQ29udGFpbmVycyIsImZsb2F0aW5nIiwiX2dldERyYWdWZXJ0aWNhbERpcmVjdGlvbiIsIl9nZXREcmFnSG9yaXpvbnRhbERpcmVjdGlvbiIsIl9jb25uZWN0V2l0aCIsIlN0cmluZyIsImdyZXAiLCJ0b2xlcmFuY2VFbGVtZW50Iiwib3V0ZXJXaWR0aCIsIm91dGVySGVpZ2h0IiwiY3VzdG9tIiwicmVmcmVzaENvbnRhaW5lcnMiLCJjbGFzc05hbWUiLCJfY3JlYXRlVHJQbGFjZWhvbGRlciIsImlubmVySGVpZ2h0IiwiaW5uZXJXaWR0aCIsImNoaWxkcmVuIiwiY2xvbmUiLCJhcHBlbmRDaGlsZCIsInJpZ2h0IiwiYm90dG9tIiwic2Nyb2xsSGVpZ2h0Iiwic2Nyb2xsV2lkdGgiLCJyb3VuZCIsImluc2VydEJlZm9yZSIsIm5leHRTaWJsaW5nIiwiY291bnRlciIsImJlZm9yZSIsImZyb21PdXRzaWRlIiwiY2FuY2VsSGVscGVyUmVtb3ZhbCIsInNlbmRlciIsImZhY3RvcnkiLCIkIiwic3VwcG9ydHMiLCJ0ZXN0UHJvcCIsInByZWZpeGVzIiwidGVzdF9lbCIsImNyZWF0ZUVsZW1lbnQiLCJ1bmRlZmluZWQiLCJ1c2VfY3NzX2FuaW1hdGlvbiIsInNvcnRhYmxlIiwiYW5pbWF0aW9uIiwiJGl0ZW0iLCJwcm9wcyIsInJlc2V0X3Byb3BzIiwidHJpbSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsQ0FBQyxVQUFT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U0FBUyxHQUFHLElBQUk7UUFDM0ZFLEtBQUssQ0FBQ1YsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsRUFBRTtRQUNqQ1csV0FBVyxDQUFDWCxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxFQUFFO1FBQ3ZDVyxXQUFXLENBQUNYLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxHQUFHLEVBQUU7UUFFeEMxTyxVQUFVLENBQUMsWUFBWTtVQUNyQm1QLEtBQUssQ0FBQzFOLEdBQUcsQ0FBQzJOLEtBQUssQ0FBQztRQUNsQixDQUFDLEVBQUUsQ0FBQyxDQUFDO01BQ1AsQ0FBQyxNQUFNO1FBQ0xDLFdBQVcsQ0FBQ3RILEdBQUcsR0FBRyxFQUFFO1FBQ3BCc0gsV0FBVyxDQUFDdEYsUUFBUSxHQUFHLEVBQUU7UUFFekJvRixLQUFLLENBQUNoRSxPQUFPLENBQUM7VUFDWnBELEdBQUcsRUFBRSxFQUFFO1VBQ1BnQyxRQUFRLEVBQUU7UUFDWixDQUFDLEVBQUUsSUFBSSxDQUFDaFAsT0FBTyxDQUFDbVUsU0FBUyxDQUFDO01BQzVCOztNQUVBO01BQ0E7TUFDQWxQLFVBQVUsQ0FBQyxZQUFZO1FBQ3JCbVAsS0FBSyxDQUFDMU4sR0FBRyxDQUFDNE4sV0FBVyxDQUFDO01BQ3hCLENBQUMsRUFBRSxJQUFJLENBQUN0VSxPQUFPLENBQUNtVSxTQUFTLENBQUM7SUFDNUI7RUFDRixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJmaWxlIjoiLi9wYWNrYWdlL3Jlc291cmNlcy9qcy9hcHAvY3VzdG9tL2pxdWVyeS11aS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qISBqUXVlcnkgVUkgLSB2MS4xMi4xIC0gMjAxNy0xMC0xNVxuKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4qIEluY2x1ZGVzOiB3aWRnZXQuanMsIGRhdGEuanMsIHNjcm9sbC1wYXJlbnQuanMsIHdpZGdldHMvc29ydGFibGUuanMsIHdpZGdldHMvbW91c2UuanNcbiogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnM7IExpY2Vuc2VkIE1JVCAqL1xuXG4oZnVuY3Rpb24odCl7XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJqcXVlcnlcIl0sdCk6dChqUXVlcnkpfSkoZnVuY3Rpb24odCl7dC51aT10LnVpfHx7fSx0LnVpLnZlcnNpb249XCIxLjEyLjFcIjt2YXIgZT0wLGk9QXJyYXkucHJvdG90eXBlLnNsaWNlO3QuY2xlYW5EYXRhPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihpKXt2YXIgcyxuLG87Zm9yKG89MDtudWxsIT0obj1pW29dKTtvKyspdHJ5e3M9dC5fZGF0YShuLFwiZXZlbnRzXCIpLHMmJnMucmVtb3ZlJiZ0KG4pLnRyaWdnZXJIYW5kbGVyKFwicmVtb3ZlXCIpfWNhdGNoKGEpe31lKGkpfX0odC5jbGVhbkRhdGEpLHQud2lkZ2V0PWZ1bmN0aW9uKGUsaSxzKXt2YXIgbixvLGEscj17fSxoPWUuc3BsaXQoXCIuXCIpWzBdO2U9ZS5zcGxpdChcIi5cIilbMV07dmFyIGw9aCtcIi1cIitlO3JldHVybiBzfHwocz1pLGk9dC5XaWRnZXQpLHQuaXNBcnJheShzKSYmKHM9dC5leHRlbmQuYXBwbHkobnVsbCxbe31dLmNvbmNhdChzKSkpLHQuZXhwcltcIjpcIl1bbC50b0xvd2VyQ2FzZSgpXT1mdW5jdGlvbihlKXtyZXR1cm4hIXQuZGF0YShlLGwpfSx0W2hdPXRbaF18fHt9LG49dFtoXVtlXSxvPXRbaF1bZV09ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5fY3JlYXRlV2lkZ2V0Pyhhcmd1bWVudHMubGVuZ3RoJiZ0aGlzLl9jcmVhdGVXaWRnZXQodCxlKSx2b2lkIDApOm5ldyBvKHQsZSl9LHQuZXh0ZW5kKG8sbix7dmVyc2lvbjpzLnZlcnNpb24sX3Byb3RvOnQuZXh0ZW5kKHt9LHMpLF9jaGlsZENvbnN0cnVjdG9yczpbXX0pLGE9bmV3IGksYS5vcHRpb25zPXQud2lkZ2V0LmV4dGVuZCh7fSxhLm9wdGlvbnMpLHQuZWFjaChzLGZ1bmN0aW9uKGUscyl7cmV0dXJuIHQuaXNGdW5jdGlvbihzKT8ocltlXT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXtyZXR1cm4gaS5wcm90b3R5cGVbZV0uYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIG4odCl7cmV0dXJuIGkucHJvdG90eXBlW2VdLmFwcGx5KHRoaXMsdCl9cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUsaT10aGlzLl9zdXBlcixvPXRoaXMuX3N1cGVyQXBwbHk7cmV0dXJuIHRoaXMuX3N1cGVyPXQsdGhpcy5fc3VwZXJBcHBseT1uLGU9cy5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy5fc3VwZXI9aSx0aGlzLl9zdXBlckFwcGx5PW8sZX19KCksdm9pZCAwKToocltlXT1zLHZvaWQgMCl9KSxvLnByb3RvdHlwZT10LndpZGdldC5leHRlbmQoYSx7d2lkZ2V0RXZlbnRQcmVmaXg6bj9hLndpZGdldEV2ZW50UHJlZml4fHxlOmV9LHIse2NvbnN0cnVjdG9yOm8sbmFtZXNwYWNlOmgsd2lkZ2V0TmFtZTplLHdpZGdldEZ1bGxOYW1lOmx9KSxuPyh0LmVhY2gobi5fY2hpbGRDb25zdHJ1Y3RvcnMsZnVuY3Rpb24oZSxpKXt2YXIgcz1pLnByb3RvdHlwZTt0LndpZGdldChzLm5hbWVzcGFjZStcIi5cIitzLndpZGdldE5hbWUsbyxpLl9wcm90byl9KSxkZWxldGUgbi5fY2hpbGRDb25zdHJ1Y3RvcnMpOmkuX2NoaWxkQ29uc3RydWN0b3JzLnB1c2gobyksdC53aWRnZXQuYnJpZGdlKGUsbyksb30sdC53aWRnZXQuZXh0ZW5kPWZ1bmN0aW9uKGUpe2Zvcih2YXIgcyxuLG89aS5jYWxsKGFyZ3VtZW50cywxKSxhPTAscj1vLmxlbmd0aDtyPmE7YSsrKWZvcihzIGluIG9bYV0pbj1vW2FdW3NdLG9bYV0uaGFzT3duUHJvcGVydHkocykmJnZvaWQgMCE9PW4mJihlW3NdPXQuaXNQbGFpbk9iamVjdChuKT90LmlzUGxhaW5PYmplY3QoZVtzXSk/dC53aWRnZXQuZXh0ZW5kKHt9LGVbc10sbik6dC53aWRnZXQuZXh0ZW5kKHt9LG4pOm4pO3JldHVybiBlfSx0LndpZGdldC5icmlkZ2U9ZnVuY3Rpb24oZSxzKXt2YXIgbj1zLnByb3RvdHlwZS53aWRnZXRGdWxsTmFtZXx8ZTt0LmZuW2VdPWZ1bmN0aW9uKG8pe3ZhciBhPVwic3RyaW5nXCI9PXR5cGVvZiBvLHI9aS5jYWxsKGFyZ3VtZW50cywxKSxoPXRoaXM7cmV0dXJuIGE/dGhpcy5sZW5ndGh8fFwiaW5zdGFuY2VcIiE9PW8/dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGkscz10LmRhdGEodGhpcyxuKTtyZXR1cm5cImluc3RhbmNlXCI9PT1vPyhoPXMsITEpOnM/dC5pc0Z1bmN0aW9uKHNbb10pJiZcIl9cIiE9PW8uY2hhckF0KDApPyhpPXNbb10uYXBwbHkocyxyKSxpIT09cyYmdm9pZCAwIT09aT8oaD1pJiZpLmpxdWVyeT9oLnB1c2hTdGFjayhpLmdldCgpKTppLCExKTp2b2lkIDApOnQuZXJyb3IoXCJubyBzdWNoIG1ldGhvZCAnXCIrbytcIicgZm9yIFwiK2UrXCIgd2lkZ2V0IGluc3RhbmNlXCIpOnQuZXJyb3IoXCJjYW5ub3QgY2FsbCBtZXRob2RzIG9uIFwiK2UrXCIgcHJpb3IgdG8gaW5pdGlhbGl6YXRpb247IFwiK1wiYXR0ZW1wdGVkIHRvIGNhbGwgbWV0aG9kICdcIitvK1wiJ1wiKX0pOmg9dm9pZCAwOihyLmxlbmd0aCYmKG89dC53aWRnZXQuZXh0ZW5kLmFwcGx5KG51bGwsW29dLmNvbmNhdChyKSkpLHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBlPXQuZGF0YSh0aGlzLG4pO2U/KGUub3B0aW9uKG98fHt9KSxlLl9pbml0JiZlLl9pbml0KCkpOnQuZGF0YSh0aGlzLG4sbmV3IHMobyx0aGlzKSl9KSksaH19LHQuV2lkZ2V0PWZ1bmN0aW9uKCl7fSx0LldpZGdldC5fY2hpbGRDb25zdHJ1Y3RvcnM9W10sdC5XaWRnZXQucHJvdG90eXBlPXt3aWRnZXROYW1lOlwid2lkZ2V0XCIsd2lkZ2V0RXZlbnRQcmVmaXg6XCJcIixkZWZhdWx0RWxlbWVudDpcIjxkaXY+XCIsb3B0aW9uczp7Y2xhc3Nlczp7fSxkaXNhYmxlZDohMSxjcmVhdGU6bnVsbH0sX2NyZWF0ZVdpZGdldDpmdW5jdGlvbihpLHMpe3M9dChzfHx0aGlzLmRlZmF1bHRFbGVtZW50fHx0aGlzKVswXSx0aGlzLmVsZW1lbnQ9dChzKSx0aGlzLnV1aWQ9ZSsrLHRoaXMuZXZlbnROYW1lc3BhY2U9XCIuXCIrdGhpcy53aWRnZXROYW1lK3RoaXMudXVpZCx0aGlzLmJpbmRpbmdzPXQoKSx0aGlzLmhvdmVyYWJsZT10KCksdGhpcy5mb2N1c2FibGU9dCgpLHRoaXMuY2xhc3Nlc0VsZW1lbnRMb29rdXA9e30scyE9PXRoaXMmJih0LmRhdGEocyx0aGlzLndpZGdldEZ1bGxOYW1lLHRoaXMpLHRoaXMuX29uKCEwLHRoaXMuZWxlbWVudCx7cmVtb3ZlOmZ1bmN0aW9uKHQpe3QudGFyZ2V0PT09cyYmdGhpcy5kZXN0cm95KCl9fSksdGhpcy5kb2N1bWVudD10KHMuc3R5bGU/cy5vd25lckRvY3VtZW50OnMuZG9jdW1lbnR8fHMpLHRoaXMud2luZG93PXQodGhpcy5kb2N1bWVudFswXS5kZWZhdWx0Vmlld3x8dGhpcy5kb2N1bWVudFswXS5wYXJlbnRXaW5kb3cpKSx0aGlzLm9wdGlvbnM9dC53aWRnZXQuZXh0ZW5kKHt9LHRoaXMub3B0aW9ucyx0aGlzLl9nZXRDcmVhdGVPcHRpb25zKCksaSksdGhpcy5fY3JlYXRlKCksdGhpcy5vcHRpb25zLmRpc2FibGVkJiZ0aGlzLl9zZXRPcHRpb25EaXNhYmxlZCh0aGlzLm9wdGlvbnMuZGlzYWJsZWQpLHRoaXMuX3RyaWdnZXIoXCJjcmVhdGVcIixudWxsLHRoaXMuX2dldENyZWF0ZUV2ZW50RGF0YSgpKSx0aGlzLl9pbml0KCl9LF9nZXRDcmVhdGVPcHRpb25zOmZ1bmN0aW9uKCl7cmV0dXJue319LF9nZXRDcmVhdGVFdmVudERhdGE6dC5ub29wLF9jcmVhdGU6dC5ub29wLF9pbml0OnQubm9vcCxkZXN0cm95OmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLl9kZXN0cm95KCksdC5lYWNoKHRoaXMuY2xhc3Nlc0VsZW1lbnRMb29rdXAsZnVuY3Rpb24odCxpKXtlLl9yZW1vdmVDbGFzcyhpLHQpfSksdGhpcy5lbGVtZW50Lm9mZih0aGlzLmV2ZW50TmFtZXNwYWNlKS5yZW1vdmVEYXRhKHRoaXMud2lkZ2V0RnVsbE5hbWUpLHRoaXMud2lkZ2V0KCkub2ZmKHRoaXMuZXZlbnROYW1lc3BhY2UpLnJlbW92ZUF0dHIoXCJhcmlhLWRpc2FibGVkXCIpLHRoaXMuYmluZGluZ3Mub2ZmKHRoaXMuZXZlbnROYW1lc3BhY2UpfSxfZGVzdHJveTp0Lm5vb3Asd2lkZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWxlbWVudH0sb3B0aW9uOmZ1bmN0aW9uKGUsaSl7dmFyIHMsbixvLGE9ZTtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdC53aWRnZXQuZXh0ZW5kKHt9LHRoaXMub3B0aW9ucyk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpaWYoYT17fSxzPWUuc3BsaXQoXCIuXCIpLGU9cy5zaGlmdCgpLHMubGVuZ3RoKXtmb3Iobj1hW2VdPXQud2lkZ2V0LmV4dGVuZCh7fSx0aGlzLm9wdGlvbnNbZV0pLG89MDtzLmxlbmd0aC0xPm87bysrKW5bc1tvXV09bltzW29dXXx8e30sbj1uW3Nbb11dO2lmKGU9cy5wb3AoKSwxPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdm9pZCAwPT09bltlXT9udWxsOm5bZV07bltlXT1pfWVsc2V7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHZvaWQgMD09PXRoaXMub3B0aW9uc1tlXT9udWxsOnRoaXMub3B0aW9uc1tlXTthW2VdPWl9cmV0dXJuIHRoaXMuX3NldE9wdGlvbnMoYSksdGhpc30sX3NldE9wdGlvbnM6ZnVuY3Rpb24odCl7dmFyIGU7Zm9yKGUgaW4gdCl0aGlzLl9zZXRPcHRpb24oZSx0W2VdKTtyZXR1cm4gdGhpc30sX3NldE9wdGlvbjpmdW5jdGlvbih0LGUpe3JldHVyblwiY2xhc3Nlc1wiPT09dCYmdGhpcy5fc2V0T3B0aW9uQ2xhc3NlcyhlKSx0aGlzLm9wdGlvbnNbdF09ZSxcImRpc2FibGVkXCI9PT10JiZ0aGlzLl9zZXRPcHRpb25EaXNhYmxlZChlKSx0aGlzfSxfc2V0T3B0aW9uQ2xhc3NlczpmdW5jdGlvbihlKXt2YXIgaSxzLG47Zm9yKGkgaW4gZSluPXRoaXMuY2xhc3Nlc0VsZW1lbnRMb29rdXBbaV0sZVtpXSE9PXRoaXMub3B0aW9ucy5jbGFzc2VzW2ldJiZuJiZuLmxlbmd0aCYmKHM9dChuLmdldCgpKSx0aGlzLl9yZW1vdmVDbGFzcyhuLGkpLHMuYWRkQ2xhc3ModGhpcy5fY2xhc3Nlcyh7ZWxlbWVudDpzLGtleXM6aSxjbGFzc2VzOmUsYWRkOiEwfSkpKX0sX3NldE9wdGlvbkRpc2FibGVkOmZ1bmN0aW9uKHQpe3RoaXMuX3RvZ2dsZUNsYXNzKHRoaXMud2lkZ2V0KCksdGhpcy53aWRnZXRGdWxsTmFtZStcIi1kaXNhYmxlZFwiLG51bGwsISF0KSx0JiYodGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5ob3ZlcmFibGUsbnVsbCxcInVpLXN0YXRlLWhvdmVyXCIpLHRoaXMuX3JlbW92ZUNsYXNzKHRoaXMuZm9jdXNhYmxlLG51bGwsXCJ1aS1zdGF0ZS1mb2N1c1wiKSl9LGVuYWJsZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zZXRPcHRpb25zKHtkaXNhYmxlZDohMX0pfSxkaXNhYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3NldE9wdGlvbnMoe2Rpc2FibGVkOiEwfSl9LF9jbGFzc2VzOmZ1bmN0aW9uKGUpe2Z1bmN0aW9uIGkoaSxvKXt2YXIgYSxyO2ZvcihyPTA7aS5sZW5ndGg+cjtyKyspYT1uLmNsYXNzZXNFbGVtZW50TG9va3VwW2lbcl1dfHx0KCksYT1lLmFkZD90KHQudW5pcXVlKGEuZ2V0KCkuY29uY2F0KGUuZWxlbWVudC5nZXQoKSkpKTp0KGEubm90KGUuZWxlbWVudCkuZ2V0KCkpLG4uY2xhc3Nlc0VsZW1lbnRMb29rdXBbaVtyXV09YSxzLnB1c2goaVtyXSksbyYmZS5jbGFzc2VzW2lbcl1dJiZzLnB1c2goZS5jbGFzc2VzW2lbcl1dKX12YXIgcz1bXSxuPXRoaXM7cmV0dXJuIGU9dC5leHRlbmQoe2VsZW1lbnQ6dGhpcy5lbGVtZW50LGNsYXNzZXM6dGhpcy5vcHRpb25zLmNsYXNzZXN8fHt9fSxlKSx0aGlzLl9vbihlLmVsZW1lbnQse3JlbW92ZTpcIl91bnRyYWNrQ2xhc3Nlc0VsZW1lbnRcIn0pLGUua2V5cyYmaShlLmtleXMubWF0Y2goL1xcUysvZyl8fFtdLCEwKSxlLmV4dHJhJiZpKGUuZXh0cmEubWF0Y2goL1xcUysvZyl8fFtdKSxzLmpvaW4oXCIgXCIpfSxfdW50cmFja0NsYXNzZXNFbGVtZW50OmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXM7dC5lYWNoKGkuY2xhc3Nlc0VsZW1lbnRMb29rdXAsZnVuY3Rpb24ocyxuKXstMSE9PXQuaW5BcnJheShlLnRhcmdldCxuKSYmKGkuY2xhc3Nlc0VsZW1lbnRMb29rdXBbc109dChuLm5vdChlLnRhcmdldCkuZ2V0KCkpKX0pfSxfcmVtb3ZlQ2xhc3M6ZnVuY3Rpb24odCxlLGkpe3JldHVybiB0aGlzLl90b2dnbGVDbGFzcyh0LGUsaSwhMSl9LF9hZGRDbGFzczpmdW5jdGlvbih0LGUsaSl7cmV0dXJuIHRoaXMuX3RvZ2dsZUNsYXNzKHQsZSxpLCEwKX0sX3RvZ2dsZUNsYXNzOmZ1bmN0aW9uKHQsZSxpLHMpe3M9XCJib29sZWFuXCI9PXR5cGVvZiBzP3M6aTt2YXIgbj1cInN0cmluZ1wiPT10eXBlb2YgdHx8bnVsbD09PXQsbz17ZXh0cmE6bj9lOmksa2V5czpuP3Q6ZSxlbGVtZW50Om4/dGhpcy5lbGVtZW50OnQsYWRkOnN9O3JldHVybiBvLmVsZW1lbnQudG9nZ2xlQ2xhc3ModGhpcy5fY2xhc3NlcyhvKSxzKSx0aGlzfSxfb246ZnVuY3Rpb24oZSxpLHMpe3ZhciBuLG89dGhpcztcImJvb2xlYW5cIiE9dHlwZW9mIGUmJihzPWksaT1lLGU9ITEpLHM/KGk9bj10KGkpLHRoaXMuYmluZGluZ3M9dGhpcy5iaW5kaW5ncy5hZGQoaSkpOihzPWksaT10aGlzLmVsZW1lbnQsbj10aGlzLndpZGdldCgpKSx0LmVhY2gocyxmdW5jdGlvbihzLGEpe2Z1bmN0aW9uIHIoKXtyZXR1cm4gZXx8by5vcHRpb25zLmRpc2FibGVkIT09ITAmJiF0KHRoaXMpLmhhc0NsYXNzKFwidWktc3RhdGUtZGlzYWJsZWRcIik/KFwic3RyaW5nXCI9PXR5cGVvZiBhP29bYV06YSkuYXBwbHkobyxhcmd1bWVudHMpOnZvaWQgMH1cInN0cmluZ1wiIT10eXBlb2YgYSYmKHIuZ3VpZD1hLmd1aWQ9YS5ndWlkfHxyLmd1aWR8fHQuZ3VpZCsrKTt2YXIgaD1zLm1hdGNoKC9eKFtcXHc6LV0qKVxccyooLiopJC8pLGw9aFsxXStvLmV2ZW50TmFtZXNwYWNlLGM9aFsyXTtjP24ub24obCxjLHIpOmkub24obCxyKX0pfSxfb2ZmOmZ1bmN0aW9uKGUsaSl7aT0oaXx8XCJcIikuc3BsaXQoXCIgXCIpLmpvaW4odGhpcy5ldmVudE5hbWVzcGFjZStcIiBcIikrdGhpcy5ldmVudE5hbWVzcGFjZSxlLm9mZihpKS5vZmYoaSksdGhpcy5iaW5kaW5ncz10KHRoaXMuYmluZGluZ3Mubm90KGUpLmdldCgpKSx0aGlzLmZvY3VzYWJsZT10KHRoaXMuZm9jdXNhYmxlLm5vdChlKS5nZXQoKSksdGhpcy5ob3ZlcmFibGU9dCh0aGlzLmhvdmVyYWJsZS5ub3QoZSkuZ2V0KCkpfSxfZGVsYXk6ZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBpKCl7cmV0dXJuKFwic3RyaW5nXCI9PXR5cGVvZiB0P3NbdF06dCkuYXBwbHkocyxhcmd1bWVudHMpfXZhciBzPXRoaXM7cmV0dXJuIHNldFRpbWVvdXQoaSxlfHwwKX0sX2hvdmVyYWJsZTpmdW5jdGlvbihlKXt0aGlzLmhvdmVyYWJsZT10aGlzLmhvdmVyYWJsZS5hZGQoZSksdGhpcy5fb24oZSx7bW91c2VlbnRlcjpmdW5jdGlvbihlKXt0aGlzLl9hZGRDbGFzcyh0KGUuY3VycmVudFRhcmdldCksbnVsbCxcInVpLXN0YXRlLWhvdmVyXCIpfSxtb3VzZWxlYXZlOmZ1bmN0aW9uKGUpe3RoaXMuX3JlbW92ZUNsYXNzKHQoZS5jdXJyZW50VGFyZ2V0KSxudWxsLFwidWktc3RhdGUtaG92ZXJcIil9fSl9LF9mb2N1c2FibGU6ZnVuY3Rpb24oZSl7dGhpcy5mb2N1c2FibGU9dGhpcy5mb2N1c2FibGUuYWRkKGUpLHRoaXMuX29uKGUse2ZvY3VzaW46ZnVuY3Rpb24oZSl7dGhpcy5fYWRkQ2xhc3ModChlLmN1cnJlbnRUYXJnZXQpLG51bGwsXCJ1aS1zdGF0ZS1mb2N1c1wiKX0sZm9jdXNvdXQ6ZnVuY3Rpb24oZSl7dGhpcy5fcmVtb3ZlQ2xhc3ModChlLmN1cnJlbnRUYXJnZXQpLG51bGwsXCJ1aS1zdGF0ZS1mb2N1c1wiKX19KX0sX3RyaWdnZXI6ZnVuY3Rpb24oZSxpLHMpe3ZhciBuLG8sYT10aGlzLm9wdGlvbnNbZV07aWYocz1zfHx7fSxpPXQuRXZlbnQoaSksaS50eXBlPShlPT09dGhpcy53aWRnZXRFdmVudFByZWZpeD9lOnRoaXMud2lkZ2V0RXZlbnRQcmVmaXgrZSkudG9Mb3dlckNhc2UoKSxpLnRhcmdldD10aGlzLmVsZW1lbnRbMF0sbz1pLm9yaWdpbmFsRXZlbnQpZm9yKG4gaW4gbyluIGluIGl8fChpW25dPW9bbl0pO3JldHVybiB0aGlzLmVsZW1lbnQudHJpZ2dlcihpLHMpLCEodC5pc0Z1bmN0aW9uKGEpJiZhLmFwcGx5KHRoaXMuZWxlbWVudFswXSxbaV0uY29uY2F0KHMpKT09PSExfHxpLmlzRGVmYXVsdFByZXZlbnRlZCgpKX19LHQuZWFjaCh7c2hvdzpcImZhZGVJblwiLGhpZGU6XCJmYWRlT3V0XCJ9LGZ1bmN0aW9uKGUsaSl7dC5XaWRnZXQucHJvdG90eXBlW1wiX1wiK2VdPWZ1bmN0aW9uKHMsbixvKXtcInN0cmluZ1wiPT10eXBlb2YgbiYmKG49e2VmZmVjdDpufSk7dmFyIGEscj1uP249PT0hMHx8XCJudW1iZXJcIj09dHlwZW9mIG4/aTpuLmVmZmVjdHx8aTplO249bnx8e30sXCJudW1iZXJcIj09dHlwZW9mIG4mJihuPXtkdXJhdGlvbjpufSksYT0hdC5pc0VtcHR5T2JqZWN0KG4pLG4uY29tcGxldGU9byxuLmRlbGF5JiZzLmRlbGF5KG4uZGVsYXkpLGEmJnQuZWZmZWN0cyYmdC5lZmZlY3RzLmVmZmVjdFtyXT9zW2VdKG4pOnIhPT1lJiZzW3JdP3Nbcl0obi5kdXJhdGlvbixuLmVhc2luZyxvKTpzLnF1ZXVlKGZ1bmN0aW9uKGkpe3QodGhpcylbZV0oKSxvJiZvLmNhbGwoc1swXSksaSgpfSl9fSksdC53aWRnZXQsdC5leHRlbmQodC5leHByW1wiOlwiXSx7ZGF0YTp0LmV4cHIuY3JlYXRlUHNldWRvP3QuZXhwci5jcmVhdGVQc2V1ZG8oZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKGkpe3JldHVybiEhdC5kYXRhKGksZSl9fSk6ZnVuY3Rpb24oZSxpLHMpe3JldHVybiEhdC5kYXRhKGUsc1szXSl9fSksdC5mbi5zY3JvbGxQYXJlbnQ9ZnVuY3Rpb24oZSl7dmFyIGk9dGhpcy5jc3MoXCJwb3NpdGlvblwiKSxzPVwiYWJzb2x1dGVcIj09PWksbj1lPy8oYXV0b3xzY3JvbGx8aGlkZGVuKS86LyhhdXRvfHNjcm9sbCkvLG89dGhpcy5wYXJlbnRzKCkuZmlsdGVyKGZ1bmN0aW9uKCl7dmFyIGU9dCh0aGlzKTtyZXR1cm4gcyYmXCJzdGF0aWNcIj09PWUuY3NzKFwicG9zaXRpb25cIik/ITE6bi50ZXN0KGUuY3NzKFwib3ZlcmZsb3dcIikrZS5jc3MoXCJvdmVyZmxvdy15XCIpK2UuY3NzKFwib3ZlcmZsb3cteFwiKSl9KS5lcSgwKTtyZXR1cm5cImZpeGVkXCIhPT1pJiZvLmxlbmd0aD9vOnQodGhpc1swXS5vd25lckRvY3VtZW50fHxkb2N1bWVudCl9LHQudWkuaWU9ISEvbXNpZSBbXFx3Ll0rLy5leGVjKG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSk7dmFyIHM9ITE7dChkb2N1bWVudCkub24oXCJtb3VzZXVwXCIsZnVuY3Rpb24oKXtzPSExfSksdC53aWRnZXQoXCJ1aS5tb3VzZVwiLHt2ZXJzaW9uOlwiMS4xMi4xXCIsb3B0aW9uczp7Y2FuY2VsOlwiaW5wdXQsIHRleHRhcmVhLCBidXR0b24sIHNlbGVjdCwgb3B0aW9uXCIsZGlzdGFuY2U6MSxkZWxheTowfSxfbW91c2VJbml0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLmVsZW1lbnQub24oXCJtb3VzZWRvd24uXCIrdGhpcy53aWRnZXROYW1lLGZ1bmN0aW9uKHQpe3JldHVybiBlLl9tb3VzZURvd24odCl9KS5vbihcImNsaWNrLlwiK3RoaXMud2lkZ2V0TmFtZSxmdW5jdGlvbihpKXtyZXR1cm4hMD09PXQuZGF0YShpLnRhcmdldCxlLndpZGdldE5hbWUrXCIucHJldmVudENsaWNrRXZlbnRcIik/KHQucmVtb3ZlRGF0YShpLnRhcmdldCxlLndpZGdldE5hbWUrXCIucHJldmVudENsaWNrRXZlbnRcIiksaS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSwhMSk6dm9pZCAwfSksdGhpcy5zdGFydGVkPSExfSxfbW91c2VEZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50Lm9mZihcIi5cIit0aGlzLndpZGdldE5hbWUpLHRoaXMuX21vdXNlTW92ZURlbGVnYXRlJiZ0aGlzLmRvY3VtZW50Lm9mZihcIm1vdXNlbW92ZS5cIit0aGlzLndpZGdldE5hbWUsdGhpcy5fbW91c2VNb3ZlRGVsZWdhdGUpLm9mZihcIm1vdXNldXAuXCIrdGhpcy53aWRnZXROYW1lLHRoaXMuX21vdXNlVXBEZWxlZ2F0ZSl9LF9tb3VzZURvd246ZnVuY3Rpb24oZSl7aWYoIXMpe3RoaXMuX21vdXNlTW92ZWQ9ITEsdGhpcy5fbW91c2VTdGFydGVkJiZ0aGlzLl9tb3VzZVVwKGUpLHRoaXMuX21vdXNlRG93bkV2ZW50PWU7dmFyIGk9dGhpcyxuPTE9PT1lLndoaWNoLG89XCJzdHJpbmdcIj09dHlwZW9mIHRoaXMub3B0aW9ucy5jYW5jZWwmJmUudGFyZ2V0Lm5vZGVOYW1lP3QoZS50YXJnZXQpLmNsb3Nlc3QodGhpcy5vcHRpb25zLmNhbmNlbCkubGVuZ3RoOiExO3JldHVybiBuJiYhbyYmdGhpcy5fbW91c2VDYXB0dXJlKGUpPyh0aGlzLm1vdXNlRGVsYXlNZXQ9IXRoaXMub3B0aW9ucy5kZWxheSx0aGlzLm1vdXNlRGVsYXlNZXR8fCh0aGlzLl9tb3VzZURlbGF5VGltZXI9c2V0VGltZW91dChmdW5jdGlvbigpe2kubW91c2VEZWxheU1ldD0hMH0sdGhpcy5vcHRpb25zLmRlbGF5KSksdGhpcy5fbW91c2VEaXN0YW5jZU1ldChlKSYmdGhpcy5fbW91c2VEZWxheU1ldChlKSYmKHRoaXMuX21vdXNlU3RhcnRlZD10aGlzLl9tb3VzZVN0YXJ0KGUpIT09ITEsIXRoaXMuX21vdXNlU3RhcnRlZCk/KGUucHJldmVudERlZmF1bHQoKSwhMCk6KCEwPT09dC5kYXRhKGUudGFyZ2V0LHRoaXMud2lkZ2V0TmFtZStcIi5wcmV2ZW50Q2xpY2tFdmVudFwiKSYmdC5yZW1vdmVEYXRhKGUudGFyZ2V0LHRoaXMud2lkZ2V0TmFtZStcIi5wcmV2ZW50Q2xpY2tFdmVudFwiKSx0aGlzLl9tb3VzZU1vdmVEZWxlZ2F0ZT1mdW5jdGlvbih0KXtyZXR1cm4gaS5fbW91c2VNb3ZlKHQpfSx0aGlzLl9tb3VzZVVwRGVsZWdhdGU9ZnVuY3Rpb24odCl7cmV0dXJuIGkuX21vdXNlVXAodCl9LHRoaXMuZG9jdW1lbnQub24oXCJtb3VzZW1vdmUuXCIrdGhpcy53aWRnZXROYW1lLHRoaXMuX21vdXNlTW92ZURlbGVnYXRlKS5vbihcIm1vdXNldXAuXCIrdGhpcy53aWRnZXROYW1lLHRoaXMuX21vdXNlVXBEZWxlZ2F0ZSksZS5wcmV2ZW50RGVmYXVsdCgpLHM9ITAsITApKTohMH19LF9tb3VzZU1vdmU6ZnVuY3Rpb24oZSl7aWYodGhpcy5fbW91c2VNb3ZlZCl7aWYodC51aS5pZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk+ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSYmIWUuYnV0dG9uKXJldHVybiB0aGlzLl9tb3VzZVVwKGUpO2lmKCFlLndoaWNoKWlmKGUub3JpZ2luYWxFdmVudC5hbHRLZXl8fGUub3JpZ2luYWxFdmVudC5jdHJsS2V5fHxlLm9yaWdpbmFsRXZlbnQubWV0YUtleXx8ZS5vcmlnaW5hbEV2ZW50LnNoaWZ0S2V5KXRoaXMuaWdub3JlTWlzc2luZ1doaWNoPSEwO2Vsc2UgaWYoIXRoaXMuaWdub3JlTWlzc2luZ1doaWNoKXJldHVybiB0aGlzLl9tb3VzZVVwKGUpfXJldHVybihlLndoaWNofHxlLmJ1dHRvbikmJih0aGlzLl9tb3VzZU1vdmVkPSEwKSx0aGlzLl9tb3VzZVN0YXJ0ZWQ/KHRoaXMuX21vdXNlRHJhZyhlKSxlLnByZXZlbnREZWZhdWx0KCkpOih0aGlzLl9tb3VzZURpc3RhbmNlTWV0KGUpJiZ0aGlzLl9tb3VzZURlbGF5TWV0KGUpJiYodGhpcy5fbW91c2VTdGFydGVkPXRoaXMuX21vdXNlU3RhcnQodGhpcy5fbW91c2VEb3duRXZlbnQsZSkhPT0hMSx0aGlzLl9tb3VzZVN0YXJ0ZWQ/dGhpcy5fbW91c2VEcmFnKGUpOnRoaXMuX21vdXNlVXAoZSkpLCF0aGlzLl9tb3VzZVN0YXJ0ZWQpfSxfbW91c2VVcDpmdW5jdGlvbihlKXt0aGlzLmRvY3VtZW50Lm9mZihcIm1vdXNlbW92ZS5cIit0aGlzLndpZGdldE5hbWUsdGhpcy5fbW91c2VNb3ZlRGVsZWdhdGUpLm9mZihcIm1vdXNldXAuXCIrdGhpcy53aWRnZXROYW1lLHRoaXMuX21vdXNlVXBEZWxlZ2F0ZSksdGhpcy5fbW91c2VTdGFydGVkJiYodGhpcy5fbW91c2VTdGFydGVkPSExLGUudGFyZ2V0PT09dGhpcy5fbW91c2VEb3duRXZlbnQudGFyZ2V0JiZ0LmRhdGEoZS50YXJnZXQsdGhpcy53aWRnZXROYW1lK1wiLnByZXZlbnRDbGlja0V2ZW50XCIsITApLHRoaXMuX21vdXNlU3RvcChlKSksdGhpcy5fbW91c2VEZWxheVRpbWVyJiYoY2xlYXJUaW1lb3V0KHRoaXMuX21vdXNlRGVsYXlUaW1lciksZGVsZXRlIHRoaXMuX21vdXNlRGVsYXlUaW1lciksdGhpcy5pZ25vcmVNaXNzaW5nV2hpY2g9ITEscz0hMSxlLnByZXZlbnREZWZhdWx0KCl9LF9tb3VzZURpc3RhbmNlTWV0OmZ1bmN0aW9uKHQpe3JldHVybiBNYXRoLm1heChNYXRoLmFicyh0aGlzLl9tb3VzZURvd25FdmVudC5wYWdlWC10LnBhZ2VYKSxNYXRoLmFicyh0aGlzLl9tb3VzZURvd25FdmVudC5wYWdlWS10LnBhZ2VZKSk+PXRoaXMub3B0aW9ucy5kaXN0YW5jZX0sX21vdXNlRGVsYXlNZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tb3VzZURlbGF5TWV0fSxfbW91c2VTdGFydDpmdW5jdGlvbigpe30sX21vdXNlRHJhZzpmdW5jdGlvbigpe30sX21vdXNlU3RvcDpmdW5jdGlvbigpe30sX21vdXNlQ2FwdHVyZTpmdW5jdGlvbigpe3JldHVybiEwfX0pLHQud2lkZ2V0KFwidWkuc29ydGFibGVcIix0LnVpLm1vdXNlLHt2ZXJzaW9uOlwiMS4xMi4xXCIsd2lkZ2V0RXZlbnRQcmVmaXg6XCJzb3J0XCIscmVhZHk6ITEsb3B0aW9uczp7YXBwZW5kVG86XCJwYXJlbnRcIixheGlzOiExLGNvbm5lY3RXaXRoOiExLGNvbnRhaW5tZW50OiExLGN1cnNvcjpcImF1dG9cIixjdXJzb3JBdDohMSxkcm9wT25FbXB0eTohMCxmb3JjZVBsYWNlaG9sZGVyU2l6ZTohMSxmb3JjZUhlbHBlclNpemU6ITEsZ3JpZDohMSxoYW5kbGU6ITEsaGVscGVyOlwib3JpZ2luYWxcIixpdGVtczpcIj4gKlwiLG9wYWNpdHk6ITEscGxhY2Vob2xkZXI6ITEscmV2ZXJ0OiExLHNjcm9sbDohMCxzY3JvbGxTZW5zaXRpdml0eToyMCxzY3JvbGxTcGVlZDoyMCxzY29wZTpcImRlZmF1bHRcIix0b2xlcmFuY2U6XCJpbnRlcnNlY3RcIix6SW5kZXg6MWUzLGFjdGl2YXRlOm51bGwsYmVmb3JlU3RvcDpudWxsLGNoYW5nZTpudWxsLGRlYWN0aXZhdGU6bnVsbCxvdXQ6bnVsbCxvdmVyOm51bGwscmVjZWl2ZTpudWxsLHJlbW92ZTpudWxsLHNvcnQ6bnVsbCxzdGFydDpudWxsLHN0b3A6bnVsbCx1cGRhdGU6bnVsbH0sX2lzT3ZlckF4aXM6ZnVuY3Rpb24odCxlLGkpe3JldHVybiB0Pj1lJiZlK2k+dH0sX2lzRmxvYXRpbmc6ZnVuY3Rpb24odCl7cmV0dXJuL2xlZnR8cmlnaHQvLnRlc3QodC5jc3MoXCJmbG9hdFwiKSl8fC9pbmxpbmV8dGFibGUtY2VsbC8udGVzdCh0LmNzcyhcImRpc3BsYXlcIikpfSxfY3JlYXRlOmZ1bmN0aW9uKCl7dGhpcy5jb250YWluZXJDYWNoZT17fSx0aGlzLl9hZGRDbGFzcyhcInVpLXNvcnRhYmxlXCIpLHRoaXMucmVmcmVzaCgpLHRoaXMub2Zmc2V0PXRoaXMuZWxlbWVudC5vZmZzZXQoKSx0aGlzLl9tb3VzZUluaXQoKSx0aGlzLl9zZXRIYW5kbGVDbGFzc05hbWUoKSx0aGlzLnJlYWR5PSEwfSxfc2V0T3B0aW9uOmZ1bmN0aW9uKHQsZSl7dGhpcy5fc3VwZXIodCxlKSxcImhhbmRsZVwiPT09dCYmdGhpcy5fc2V0SGFuZGxlQ2xhc3NOYW1lKCl9LF9zZXRIYW5kbGVDbGFzc05hbWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuX3JlbW92ZUNsYXNzKHRoaXMuZWxlbWVudC5maW5kKFwiLnVpLXNvcnRhYmxlLWhhbmRsZVwiKSxcInVpLXNvcnRhYmxlLWhhbmRsZVwiKSx0LmVhY2godGhpcy5pdGVtcyxmdW5jdGlvbigpe2UuX2FkZENsYXNzKHRoaXMuaW5zdGFuY2Uub3B0aW9ucy5oYW5kbGU/dGhpcy5pdGVtLmZpbmQodGhpcy5pbnN0YW5jZS5vcHRpb25zLmhhbmRsZSk6dGhpcy5pdGVtLFwidWktc29ydGFibGUtaGFuZGxlXCIpfSl9LF9kZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy5fbW91c2VEZXN0cm95KCk7Zm9yKHZhciB0PXRoaXMuaXRlbXMubGVuZ3RoLTE7dD49MDt0LS0pdGhpcy5pdGVtc1t0XS5pdGVtLnJlbW92ZURhdGEodGhpcy53aWRnZXROYW1lK1wiLWl0ZW1cIik7cmV0dXJuIHRoaXN9LF9tb3VzZUNhcHR1cmU6ZnVuY3Rpb24oZSxpKXt2YXIgcz1udWxsLG49ITEsbz10aGlzO3JldHVybiB0aGlzLnJldmVydGluZz8hMTp0aGlzLm9wdGlvbnMuZGlzYWJsZWR8fFwic3RhdGljXCI9PT10aGlzLm9wdGlvbnMudHlwZT8hMToodGhpcy5fcmVmcmVzaEl0ZW1zKGUpLHQoZS50YXJnZXQpLnBhcmVudHMoKS5lYWNoKGZ1bmN0aW9uKCl7cmV0dXJuIHQuZGF0YSh0aGlzLG8ud2lkZ2V0TmFtZStcIi1pdGVtXCIpPT09bz8ocz10KHRoaXMpLCExKTp2b2lkIDB9KSx0LmRhdGEoZS50YXJnZXQsby53aWRnZXROYW1lK1wiLWl0ZW1cIik9PT1vJiYocz10KGUudGFyZ2V0KSkscz8hdGhpcy5vcHRpb25zLmhhbmRsZXx8aXx8KHQodGhpcy5vcHRpb25zLmhhbmRsZSxzKS5maW5kKFwiKlwiKS5hZGRCYWNrKCkuZWFjaChmdW5jdGlvbigpe3RoaXM9PT1lLnRhcmdldCYmKG49ITApfSksbik/KHRoaXMuY3VycmVudEl0ZW09cyx0aGlzLl9yZW1vdmVDdXJyZW50c0Zyb21JdGVtcygpLCEwKTohMTohMSl9LF9tb3VzZVN0YXJ0OmZ1bmN0aW9uKGUsaSxzKXt2YXIgbixvLGE9dGhpcy5vcHRpb25zO2lmKHRoaXMuY3VycmVudENvbnRhaW5lcj10aGlzLHRoaXMucmVmcmVzaFBvc2l0aW9ucygpLHRoaXMuaGVscGVyPXRoaXMuX2NyZWF0ZUhlbHBlcihlKSx0aGlzLl9jYWNoZUhlbHBlclByb3BvcnRpb25zKCksdGhpcy5fY2FjaGVNYXJnaW5zKCksdGhpcy5zY3JvbGxQYXJlbnQ9dGhpcy5oZWxwZXIuc2Nyb2xsUGFyZW50KCksdGhpcy5vZmZzZXQ9dGhpcy5jdXJyZW50SXRlbS5vZmZzZXQoKSx0aGlzLm9mZnNldD17dG9wOnRoaXMub2Zmc2V0LnRvcC10aGlzLm1hcmdpbnMudG9wLGxlZnQ6dGhpcy5vZmZzZXQubGVmdC10aGlzLm1hcmdpbnMubGVmdH0sdC5leHRlbmQodGhpcy5vZmZzZXQse2NsaWNrOntsZWZ0OmUucGFnZVgtdGhpcy5vZmZzZXQubGVmdCx0b3A6ZS5wYWdlWS10aGlzLm9mZnNldC50b3B9LHBhcmVudDp0aGlzLl9nZXRQYXJlbnRPZmZzZXQoKSxyZWxhdGl2ZTp0aGlzLl9nZXRSZWxhdGl2ZU9mZnNldCgpfSksdGhpcy5oZWxwZXIuY3NzKFwicG9zaXRpb25cIixcImFic29sdXRlXCIpLHRoaXMuY3NzUG9zaXRpb249dGhpcy5oZWxwZXIuY3NzKFwicG9zaXRpb25cIiksdGhpcy5vcmlnaW5hbFBvc2l0aW9uPXRoaXMuX2dlbmVyYXRlUG9zaXRpb24oZSksdGhpcy5vcmlnaW5hbFBhZ2VYPWUucGFnZVgsdGhpcy5vcmlnaW5hbFBhZ2VZPWUucGFnZVksYS5jdXJzb3JBdCYmdGhpcy5fYWRqdXN0T2Zmc2V0RnJvbUhlbHBlcihhLmN1cnNvckF0KSx0aGlzLmRvbVBvc2l0aW9uPXtwcmV2OnRoaXMuY3VycmVudEl0ZW0ucHJldigpWzBdLHBhcmVudDp0aGlzLmN1cnJlbnRJdGVtLnBhcmVudCgpWzBdfSx0aGlzLmhlbHBlclswXSE9PXRoaXMuY3VycmVudEl0ZW1bMF0mJnRoaXMuY3VycmVudEl0ZW0uaGlkZSgpLHRoaXMuX2NyZWF0ZVBsYWNlaG9sZGVyKCksYS5jb250YWlubWVudCYmdGhpcy5fc2V0Q29udGFpbm1lbnQoKSxhLmN1cnNvciYmXCJhdXRvXCIhPT1hLmN1cnNvciYmKG89dGhpcy5kb2N1bWVudC5maW5kKFwiYm9keVwiKSx0aGlzLnN0b3JlZEN1cnNvcj1vLmNzcyhcImN1cnNvclwiKSxvLmNzcyhcImN1cnNvclwiLGEuY3Vyc29yKSx0aGlzLnN0b3JlZFN0eWxlc2hlZXQ9dChcIjxzdHlsZT4qeyBjdXJzb3I6IFwiK2EuY3Vyc29yK1wiICFpbXBvcnRhbnQ7IH08L3N0eWxlPlwiKS5hcHBlbmRUbyhvKSksYS5vcGFjaXR5JiYodGhpcy5oZWxwZXIuY3NzKFwib3BhY2l0eVwiKSYmKHRoaXMuX3N0b3JlZE9wYWNpdHk9dGhpcy5oZWxwZXIuY3NzKFwib3BhY2l0eVwiKSksdGhpcy5oZWxwZXIuY3NzKFwib3BhY2l0eVwiLGEub3BhY2l0eSkpLGEuekluZGV4JiYodGhpcy5oZWxwZXIuY3NzKFwiekluZGV4XCIpJiYodGhpcy5fc3RvcmVkWkluZGV4PXRoaXMuaGVscGVyLmNzcyhcInpJbmRleFwiKSksdGhpcy5oZWxwZXIuY3NzKFwiekluZGV4XCIsYS56SW5kZXgpKSx0aGlzLnNjcm9sbFBhcmVudFswXSE9PXRoaXMuZG9jdW1lbnRbMF0mJlwiSFRNTFwiIT09dGhpcy5zY3JvbGxQYXJlbnRbMF0udGFnTmFtZSYmKHRoaXMub3ZlcmZsb3dPZmZzZXQ9dGhpcy5zY3JvbGxQYXJlbnQub2Zmc2V0KCkpLHRoaXMuX3RyaWdnZXIoXCJzdGFydFwiLGUsdGhpcy5fdWlIYXNoKCkpLHRoaXMuX3ByZXNlcnZlSGVscGVyUHJvcG9ydGlvbnN8fHRoaXMuX2NhY2hlSGVscGVyUHJvcG9ydGlvbnMoKSwhcylmb3Iobj10aGlzLmNvbnRhaW5lcnMubGVuZ3RoLTE7bj49MDtuLS0pdGhpcy5jb250YWluZXJzW25dLl90cmlnZ2VyKFwiYWN0aXZhdGVcIixlLHRoaXMuX3VpSGFzaCh0aGlzKSk7cmV0dXJuIHQudWkuZGRtYW5hZ2VyJiYodC51aS5kZG1hbmFnZXIuY3VycmVudD10aGlzKSx0LnVpLmRkbWFuYWdlciYmIWEuZHJvcEJlaGF2aW91ciYmdC51aS5kZG1hbmFnZXIucHJlcGFyZU9mZnNldHModGhpcyxlKSx0aGlzLmRyYWdnaW5nPSEwLHRoaXMuX2FkZENsYXNzKHRoaXMuaGVscGVyLFwidWktc29ydGFibGUtaGVscGVyXCIpLHRoaXMuX21vdXNlRHJhZyhlKSwhMH0sX21vdXNlRHJhZzpmdW5jdGlvbihlKXt2YXIgaSxzLG4sbyxhPXRoaXMub3B0aW9ucyxyPSExO2Zvcih0aGlzLnBvc2l0aW9uPXRoaXMuX2dlbmVyYXRlUG9zaXRpb24oZSksdGhpcy5wb3NpdGlvbkFicz10aGlzLl9jb252ZXJ0UG9zaXRpb25UbyhcImFic29sdXRlXCIpLHRoaXMubGFzdFBvc2l0aW9uQWJzfHwodGhpcy5sYXN0UG9zaXRpb25BYnM9dGhpcy5wb3NpdGlvbkFicyksdGhpcy5vcHRpb25zLnNjcm9sbCYmKHRoaXMuc2Nyb2xsUGFyZW50WzBdIT09dGhpcy5kb2N1bWVudFswXSYmXCJIVE1MXCIhPT10aGlzLnNjcm9sbFBhcmVudFswXS50YWdOYW1lPyh0aGlzLm92ZXJmbG93T2Zmc2V0LnRvcCt0aGlzLnNjcm9sbFBhcmVudFswXS5vZmZzZXRIZWlnaHQtZS5wYWdlWTxhLnNjcm9sbFNlbnNpdGl2aXR5P3RoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbFRvcD1yPXRoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbFRvcCthLnNjcm9sbFNwZWVkOmUucGFnZVktdGhpcy5vdmVyZmxvd09mZnNldC50b3A8YS5zY3JvbGxTZW5zaXRpdml0eSYmKHRoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbFRvcD1yPXRoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbFRvcC1hLnNjcm9sbFNwZWVkKSx0aGlzLm92ZXJmbG93T2Zmc2V0LmxlZnQrdGhpcy5zY3JvbGxQYXJlbnRbMF0ub2Zmc2V0V2lkdGgtZS5wYWdlWDxhLnNjcm9sbFNlbnNpdGl2aXR5P3RoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbExlZnQ9cj10aGlzLnNjcm9sbFBhcmVudFswXS5zY3JvbGxMZWZ0K2Euc2Nyb2xsU3BlZWQ6ZS5wYWdlWC10aGlzLm92ZXJmbG93T2Zmc2V0LmxlZnQ8YS5zY3JvbGxTZW5zaXRpdml0eSYmKHRoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbExlZnQ9cj10aGlzLnNjcm9sbFBhcmVudFswXS5zY3JvbGxMZWZ0LWEuc2Nyb2xsU3BlZWQpKTooZS5wYWdlWS10aGlzLmRvY3VtZW50LnNjcm9sbFRvcCgpPGEuc2Nyb2xsU2Vuc2l0aXZpdHk/cj10aGlzLmRvY3VtZW50LnNjcm9sbFRvcCh0aGlzLmRvY3VtZW50LnNjcm9sbFRvcCgpLWEuc2Nyb2xsU3BlZWQpOnRoaXMud2luZG93LmhlaWdodCgpLShlLnBhZ2VZLXRoaXMuZG9jdW1lbnQuc2Nyb2xsVG9wKCkpPGEuc2Nyb2xsU2Vuc2l0aXZpdHkmJihyPXRoaXMuZG9jdW1lbnQuc2Nyb2xsVG9wKHRoaXMuZG9jdW1lbnQuc2Nyb2xsVG9wKCkrYS5zY3JvbGxTcGVlZCkpLGUucGFnZVgtdGhpcy5kb2N1bWVudC5zY3JvbGxMZWZ0KCk8YS5zY3JvbGxTZW5zaXRpdml0eT9yPXRoaXMuZG9jdW1lbnQuc2Nyb2xsTGVmdCh0aGlzLmRvY3VtZW50LnNjcm9sbExlZnQoKS1hLnNjcm9sbFNwZWVkKTp0aGlzLndpbmRvdy53aWR0aCgpLShlLnBhZ2VYLXRoaXMuZG9jdW1lbnQuc2Nyb2xsTGVmdCgpKTxhLnNjcm9sbFNlbnNpdGl2aXR5JiYocj10aGlzLmRvY3VtZW50LnNjcm9sbExlZnQodGhpcy5kb2N1bWVudC5zY3JvbGxMZWZ0KCkrYS5zY3JvbGxTcGVlZCkpKSxyIT09ITEmJnQudWkuZGRtYW5hZ2VyJiYhYS5kcm9wQmVoYXZpb3VyJiZ0LnVpLmRkbWFuYWdlci5wcmVwYXJlT2Zmc2V0cyh0aGlzLGUpKSx0aGlzLnBvc2l0aW9uQWJzPXRoaXMuX2NvbnZlcnRQb3NpdGlvblRvKFwiYWJzb2x1dGVcIiksdGhpcy5vcHRpb25zLmF4aXMmJlwieVwiPT09dGhpcy5vcHRpb25zLmF4aXN8fCh0aGlzLmhlbHBlclswXS5zdHlsZS5sZWZ0PXRoaXMucG9zaXRpb24ubGVmdCtcInB4XCIpLHRoaXMub3B0aW9ucy5heGlzJiZcInhcIj09PXRoaXMub3B0aW9ucy5heGlzfHwodGhpcy5oZWxwZXJbMF0uc3R5bGUudG9wPXRoaXMucG9zaXRpb24udG9wK1wicHhcIiksaT10aGlzLml0ZW1zLmxlbmd0aC0xO2k+PTA7aS0tKWlmKHM9dGhpcy5pdGVtc1tpXSxuPXMuaXRlbVswXSxvPXRoaXMuX2ludGVyc2VjdHNXaXRoUG9pbnRlcihzKSxvJiZzLmluc3RhbmNlPT09dGhpcy5jdXJyZW50Q29udGFpbmVyJiZuIT09dGhpcy5jdXJyZW50SXRlbVswXSYmdGhpcy5wbGFjZWhvbGRlclsxPT09bz9cIm5leHRcIjpcInByZXZcIl0oKVswXSE9PW4mJiF0LmNvbnRhaW5zKHRoaXMucGxhY2Vob2xkZXJbMF0sbikmJihcInNlbWktZHluYW1pY1wiPT09dGhpcy5vcHRpb25zLnR5cGU/IXQuY29udGFpbnModGhpcy5lbGVtZW50WzBdLG4pOiEwKSl7aWYodGhpcy5kaXJlY3Rpb249MT09PW8/XCJkb3duXCI6XCJ1cFwiLFwicG9pbnRlclwiIT09dGhpcy5vcHRpb25zLnRvbGVyYW5jZSYmIXRoaXMuX2ludGVyc2VjdHNXaXRoU2lkZXMocykpYnJlYWs7dGhpcy5fcmVhcnJhbmdlKGUscyksdGhpcy5fdHJpZ2dlcihcImNoYW5nZVwiLGUsdGhpcy5fdWlIYXNoKCkpO2JyZWFrfXJldHVybiB0aGlzLl9jb250YWN0Q29udGFpbmVycyhlKSx0LnVpLmRkbWFuYWdlciYmdC51aS5kZG1hbmFnZXIuZHJhZyh0aGlzLGUpLHRoaXMuX3RyaWdnZXIoXCJzb3J0XCIsZSx0aGlzLl91aUhhc2goKSksdGhpcy5sYXN0UG9zaXRpb25BYnM9dGhpcy5wb3NpdGlvbkFicywhMX0sX21vdXNlU3RvcDpmdW5jdGlvbihlLGkpe2lmKGUpe2lmKHQudWkuZGRtYW5hZ2VyJiYhdGhpcy5vcHRpb25zLmRyb3BCZWhhdmlvdXImJnQudWkuZGRtYW5hZ2VyLmRyb3AodGhpcyxlKSx0aGlzLm9wdGlvbnMucmV2ZXJ0KXt2YXIgcz10aGlzLG49dGhpcy5wbGFjZWhvbGRlci5vZmZzZXQoKSxvPXRoaXMub3B0aW9ucy5heGlzLGE9e307byYmXCJ4XCIhPT1vfHwoYS5sZWZ0PW4ubGVmdC10aGlzLm9mZnNldC5wYXJlbnQubGVmdC10aGlzLm1hcmdpbnMubGVmdCsodGhpcy5vZmZzZXRQYXJlbnRbMF09PT10aGlzLmRvY3VtZW50WzBdLmJvZHk/MDp0aGlzLm9mZnNldFBhcmVudFswXS5zY3JvbGxMZWZ0KSksbyYmXCJ5XCIhPT1vfHwoYS50b3A9bi50b3AtdGhpcy5vZmZzZXQucGFyZW50LnRvcC10aGlzLm1hcmdpbnMudG9wKyh0aGlzLm9mZnNldFBhcmVudFswXT09PXRoaXMuZG9jdW1lbnRbMF0uYm9keT8wOnRoaXMub2Zmc2V0UGFyZW50WzBdLnNjcm9sbFRvcCkpLHRoaXMucmV2ZXJ0aW5nPSEwLHQodGhpcy5oZWxwZXIpLmFuaW1hdGUoYSxwYXJzZUludCh0aGlzLm9wdGlvbnMucmV2ZXJ0LDEwKXx8NTAwLGZ1bmN0aW9uKCl7cy5fY2xlYXIoZSl9KX1lbHNlIHRoaXMuX2NsZWFyKGUsaSk7cmV0dXJuITF9fSxjYW5jZWw6ZnVuY3Rpb24oKXtpZih0aGlzLmRyYWdnaW5nKXt0aGlzLl9tb3VzZVVwKG5ldyB0LkV2ZW50KFwibW91c2V1cFwiLHt0YXJnZXQ6bnVsbH0pKSxcIm9yaWdpbmFsXCI9PT10aGlzLm9wdGlvbnMuaGVscGVyPyh0aGlzLmN1cnJlbnRJdGVtLmNzcyh0aGlzLl9zdG9yZWRDU1MpLHRoaXMuX3JlbW92ZUNsYXNzKHRoaXMuY3VycmVudEl0ZW0sXCJ1aS1zb3J0YWJsZS1oZWxwZXJcIikpOnRoaXMuY3VycmVudEl0ZW0uc2hvdygpO2Zvcih2YXIgZT10aGlzLmNvbnRhaW5lcnMubGVuZ3RoLTE7ZT49MDtlLS0pdGhpcy5jb250YWluZXJzW2VdLl90cmlnZ2VyKFwiZGVhY3RpdmF0ZVwiLG51bGwsdGhpcy5fdWlIYXNoKHRoaXMpKSx0aGlzLmNvbnRhaW5lcnNbZV0uY29udGFpbmVyQ2FjaGUub3ZlciYmKHRoaXMuY29udGFpbmVyc1tlXS5fdHJpZ2dlcihcIm91dFwiLG51bGwsdGhpcy5fdWlIYXNoKHRoaXMpKSx0aGlzLmNvbnRhaW5lcnNbZV0uY29udGFpbmVyQ2FjaGUub3Zlcj0wKX1yZXR1cm4gdGhpcy5wbGFjZWhvbGRlciYmKHRoaXMucGxhY2Vob2xkZXJbMF0ucGFyZW50Tm9kZSYmdGhpcy5wbGFjZWhvbGRlclswXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucGxhY2Vob2xkZXJbMF0pLFwib3JpZ2luYWxcIiE9PXRoaXMub3B0aW9ucy5oZWxwZXImJnRoaXMuaGVscGVyJiZ0aGlzLmhlbHBlclswXS5wYXJlbnROb2RlJiZ0aGlzLmhlbHBlci5yZW1vdmUoKSx0LmV4dGVuZCh0aGlzLHtoZWxwZXI6bnVsbCxkcmFnZ2luZzohMSxyZXZlcnRpbmc6ITEsX25vRmluYWxTb3J0Om51bGx9KSx0aGlzLmRvbVBvc2l0aW9uLnByZXY/dCh0aGlzLmRvbVBvc2l0aW9uLnByZXYpLmFmdGVyKHRoaXMuY3VycmVudEl0ZW0pOnQodGhpcy5kb21Qb3NpdGlvbi5wYXJlbnQpLnByZXBlbmQodGhpcy5jdXJyZW50SXRlbSkpLHRoaXN9LHNlcmlhbGl6ZTpmdW5jdGlvbihlKXt2YXIgaT10aGlzLl9nZXRJdGVtc0FzalF1ZXJ5KGUmJmUuY29ubmVjdGVkKSxzPVtdO3JldHVybiBlPWV8fHt9LHQoaSkuZWFjaChmdW5jdGlvbigpe3ZhciBpPSh0KGUuaXRlbXx8dGhpcykuYXR0cihlLmF0dHJpYnV0ZXx8XCJpZFwiKXx8XCJcIikubWF0Y2goZS5leHByZXNzaW9ufHwvKC4rKVtcXC09X10oLispLyk7aSYmcy5wdXNoKChlLmtleXx8aVsxXStcIltdXCIpK1wiPVwiKyhlLmtleSYmZS5leHByZXNzaW9uP2lbMV06aVsyXSkpfSksIXMubGVuZ3RoJiZlLmtleSYmcy5wdXNoKGUua2V5K1wiPVwiKSxzLmpvaW4oXCImXCIpfSx0b0FycmF5OmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMuX2dldEl0ZW1zQXNqUXVlcnkoZSYmZS5jb25uZWN0ZWQpLHM9W107cmV0dXJuIGU9ZXx8e30saS5lYWNoKGZ1bmN0aW9uKCl7cy5wdXNoKHQoZS5pdGVtfHx0aGlzKS5hdHRyKGUuYXR0cmlidXRlfHxcImlkXCIpfHxcIlwiKX0pLHN9LF9pbnRlcnNlY3RzV2l0aDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLnBvc2l0aW9uQWJzLmxlZnQsaT1lK3RoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGgscz10aGlzLnBvc2l0aW9uQWJzLnRvcCxuPXMrdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQsbz10LmxlZnQsYT1vK3Qud2lkdGgscj10LnRvcCxoPXIrdC5oZWlnaHQsbD10aGlzLm9mZnNldC5jbGljay50b3AsYz10aGlzLm9mZnNldC5jbGljay5sZWZ0LHU9XCJ4XCI9PT10aGlzLm9wdGlvbnMuYXhpc3x8cytsPnImJmg+cytsLGQ9XCJ5XCI9PT10aGlzLm9wdGlvbnMuYXhpc3x8ZStjPm8mJmE+ZStjLHA9dSYmZDtyZXR1cm5cInBvaW50ZXJcIj09PXRoaXMub3B0aW9ucy50b2xlcmFuY2V8fHRoaXMub3B0aW9ucy5mb3JjZVBvaW50ZXJGb3JDb250YWluZXJzfHxcInBvaW50ZXJcIiE9PXRoaXMub3B0aW9ucy50b2xlcmFuY2UmJnRoaXMuaGVscGVyUHJvcG9ydGlvbnNbdGhpcy5mbG9hdGluZz9cIndpZHRoXCI6XCJoZWlnaHRcIl0+dFt0aGlzLmZsb2F0aW5nP1wid2lkdGhcIjpcImhlaWdodFwiXT9wOmUrdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aC8yPm8mJmE+aS10aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoLzImJnMrdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQvMj5yJiZoPm4tdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQvMn0sX2ludGVyc2VjdHNXaXRoUG9pbnRlcjpmdW5jdGlvbih0KXt2YXIgZSxpLHM9XCJ4XCI9PT10aGlzLm9wdGlvbnMuYXhpc3x8dGhpcy5faXNPdmVyQXhpcyh0aGlzLnBvc2l0aW9uQWJzLnRvcCt0aGlzLm9mZnNldC5jbGljay50b3AsdC50b3AsdC5oZWlnaHQpLG49XCJ5XCI9PT10aGlzLm9wdGlvbnMuYXhpc3x8dGhpcy5faXNPdmVyQXhpcyh0aGlzLnBvc2l0aW9uQWJzLmxlZnQrdGhpcy5vZmZzZXQuY2xpY2subGVmdCx0LmxlZnQsdC53aWR0aCksbz1zJiZuO3JldHVybiBvPyhlPXRoaXMuX2dldERyYWdWZXJ0aWNhbERpcmVjdGlvbigpLGk9dGhpcy5fZ2V0RHJhZ0hvcml6b250YWxEaXJlY3Rpb24oKSx0aGlzLmZsb2F0aW5nP1wicmlnaHRcIj09PWl8fFwiZG93blwiPT09ZT8yOjE6ZSYmKFwiZG93blwiPT09ZT8yOjEpKTohMX0sX2ludGVyc2VjdHNXaXRoU2lkZXM6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5faXNPdmVyQXhpcyh0aGlzLnBvc2l0aW9uQWJzLnRvcCt0aGlzLm9mZnNldC5jbGljay50b3AsdC50b3ArdC5oZWlnaHQvMix0LmhlaWdodCksaT10aGlzLl9pc092ZXJBeGlzKHRoaXMucG9zaXRpb25BYnMubGVmdCt0aGlzLm9mZnNldC5jbGljay5sZWZ0LHQubGVmdCt0LndpZHRoLzIsdC53aWR0aCkscz10aGlzLl9nZXREcmFnVmVydGljYWxEaXJlY3Rpb24oKSxuPXRoaXMuX2dldERyYWdIb3Jpem9udGFsRGlyZWN0aW9uKCk7cmV0dXJuIHRoaXMuZmxvYXRpbmcmJm4/XCJyaWdodFwiPT09biYmaXx8XCJsZWZ0XCI9PT1uJiYhaTpzJiYoXCJkb3duXCI9PT1zJiZlfHxcInVwXCI9PT1zJiYhZSl9LF9nZXREcmFnVmVydGljYWxEaXJlY3Rpb246ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnBvc2l0aW9uQWJzLnRvcC10aGlzLmxhc3RQb3NpdGlvbkFicy50b3A7cmV0dXJuIDAhPT10JiYodD4wP1wiZG93blwiOlwidXBcIil9LF9nZXREcmFnSG9yaXpvbnRhbERpcmVjdGlvbjpmdW5jdGlvbigpe3ZhciB0PXRoaXMucG9zaXRpb25BYnMubGVmdC10aGlzLmxhc3RQb3NpdGlvbkFicy5sZWZ0O3JldHVybiAwIT09dCYmKHQ+MD9cInJpZ2h0XCI6XCJsZWZ0XCIpfSxyZWZyZXNoOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9yZWZyZXNoSXRlbXModCksdGhpcy5fc2V0SGFuZGxlQ2xhc3NOYW1lKCksdGhpcy5yZWZyZXNoUG9zaXRpb25zKCksdGhpc30sX2Nvbm5lY3RXaXRoOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5vcHRpb25zO3JldHVybiB0LmNvbm5lY3RXaXRoLmNvbnN0cnVjdG9yPT09U3RyaW5nP1t0LmNvbm5lY3RXaXRoXTp0LmNvbm5lY3RXaXRofSxfZ2V0SXRlbXNBc2pRdWVyeTpmdW5jdGlvbihlKXtmdW5jdGlvbiBpKCl7ci5wdXNoKHRoaXMpfXZhciBzLG4sbyxhLHI9W10saD1bXSxsPXRoaXMuX2Nvbm5lY3RXaXRoKCk7aWYobCYmZSlmb3Iocz1sLmxlbmd0aC0xO3M+PTA7cy0tKWZvcihvPXQobFtzXSx0aGlzLmRvY3VtZW50WzBdKSxuPW8ubGVuZ3RoLTE7bj49MDtuLS0pYT10LmRhdGEob1tuXSx0aGlzLndpZGdldEZ1bGxOYW1lKSxhJiZhIT09dGhpcyYmIWEub3B0aW9ucy5kaXNhYmxlZCYmaC5wdXNoKFt0LmlzRnVuY3Rpb24oYS5vcHRpb25zLml0ZW1zKT9hLm9wdGlvbnMuaXRlbXMuY2FsbChhLmVsZW1lbnQpOnQoYS5vcHRpb25zLml0ZW1zLGEuZWxlbWVudCkubm90KFwiLnVpLXNvcnRhYmxlLWhlbHBlclwiKS5ub3QoXCIudWktc29ydGFibGUtcGxhY2Vob2xkZXJcIiksYV0pO2ZvcihoLnB1c2goW3QuaXNGdW5jdGlvbih0aGlzLm9wdGlvbnMuaXRlbXMpP3RoaXMub3B0aW9ucy5pdGVtcy5jYWxsKHRoaXMuZWxlbWVudCxudWxsLHtvcHRpb25zOnRoaXMub3B0aW9ucyxpdGVtOnRoaXMuY3VycmVudEl0ZW19KTp0KHRoaXMub3B0aW9ucy5pdGVtcyx0aGlzLmVsZW1lbnQpLm5vdChcIi51aS1zb3J0YWJsZS1oZWxwZXJcIikubm90KFwiLnVpLXNvcnRhYmxlLXBsYWNlaG9sZGVyXCIpLHRoaXNdKSxzPWgubGVuZ3RoLTE7cz49MDtzLS0paFtzXVswXS5lYWNoKGkpO3JldHVybiB0KHIpfSxfcmVtb3ZlQ3VycmVudHNGcm9tSXRlbXM6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmN1cnJlbnRJdGVtLmZpbmQoXCI6ZGF0YShcIit0aGlzLndpZGdldE5hbWUrXCItaXRlbSlcIik7dGhpcy5pdGVtcz10LmdyZXAodGhpcy5pdGVtcyxmdW5jdGlvbih0KXtmb3IodmFyIGk9MDtlLmxlbmd0aD5pO2krKylpZihlW2ldPT09dC5pdGVtWzBdKXJldHVybiExO3JldHVybiEwfSl9LF9yZWZyZXNoSXRlbXM6ZnVuY3Rpb24oZSl7dGhpcy5pdGVtcz1bXSx0aGlzLmNvbnRhaW5lcnM9W3RoaXNdO3ZhciBpLHMsbixvLGEscixoLGwsYz10aGlzLml0ZW1zLHU9W1t0LmlzRnVuY3Rpb24odGhpcy5vcHRpb25zLml0ZW1zKT90aGlzLm9wdGlvbnMuaXRlbXMuY2FsbCh0aGlzLmVsZW1lbnRbMF0sZSx7aXRlbTp0aGlzLmN1cnJlbnRJdGVtfSk6dCh0aGlzLm9wdGlvbnMuaXRlbXMsdGhpcy5lbGVtZW50KSx0aGlzXV0sZD10aGlzLl9jb25uZWN0V2l0aCgpO2lmKGQmJnRoaXMucmVhZHkpZm9yKGk9ZC5sZW5ndGgtMTtpPj0wO2ktLSlmb3Iobj10KGRbaV0sdGhpcy5kb2N1bWVudFswXSkscz1uLmxlbmd0aC0xO3M+PTA7cy0tKW89dC5kYXRhKG5bc10sdGhpcy53aWRnZXRGdWxsTmFtZSksbyYmbyE9PXRoaXMmJiFvLm9wdGlvbnMuZGlzYWJsZWQmJih1LnB1c2goW3QuaXNGdW5jdGlvbihvLm9wdGlvbnMuaXRlbXMpP28ub3B0aW9ucy5pdGVtcy5jYWxsKG8uZWxlbWVudFswXSxlLHtpdGVtOnRoaXMuY3VycmVudEl0ZW19KTp0KG8ub3B0aW9ucy5pdGVtcyxvLmVsZW1lbnQpLG9dKSx0aGlzLmNvbnRhaW5lcnMucHVzaChvKSk7Zm9yKGk9dS5sZW5ndGgtMTtpPj0wO2ktLSlmb3IoYT11W2ldWzFdLHI9dVtpXVswXSxzPTAsbD1yLmxlbmd0aDtsPnM7cysrKWg9dChyW3NdKSxoLmRhdGEodGhpcy53aWRnZXROYW1lK1wiLWl0ZW1cIixhKSxjLnB1c2goe2l0ZW06aCxpbnN0YW5jZTphLHdpZHRoOjAsaGVpZ2h0OjAsbGVmdDowLHRvcDowfSl9LHJlZnJlc2hQb3NpdGlvbnM6ZnVuY3Rpb24oZSl7dGhpcy5mbG9hdGluZz10aGlzLml0ZW1zLmxlbmd0aD9cInhcIj09PXRoaXMub3B0aW9ucy5heGlzfHx0aGlzLl9pc0Zsb2F0aW5nKHRoaXMuaXRlbXNbMF0uaXRlbSk6ITEsdGhpcy5vZmZzZXRQYXJlbnQmJnRoaXMuaGVscGVyJiYodGhpcy5vZmZzZXQucGFyZW50PXRoaXMuX2dldFBhcmVudE9mZnNldCgpKTt2YXIgaSxzLG4sbztmb3IoaT10aGlzLml0ZW1zLmxlbmd0aC0xO2k+PTA7aS0tKXM9dGhpcy5pdGVtc1tpXSxzLmluc3RhbmNlIT09dGhpcy5jdXJyZW50Q29udGFpbmVyJiZ0aGlzLmN1cnJlbnRDb250YWluZXImJnMuaXRlbVswXSE9PXRoaXMuY3VycmVudEl0ZW1bMF18fChuPXRoaXMub3B0aW9ucy50b2xlcmFuY2VFbGVtZW50P3QodGhpcy5vcHRpb25zLnRvbGVyYW5jZUVsZW1lbnQscy5pdGVtKTpzLml0ZW0sZXx8KHMud2lkdGg9bi5vdXRlcldpZHRoKCkscy5oZWlnaHQ9bi5vdXRlckhlaWdodCgpKSxvPW4ub2Zmc2V0KCkscy5sZWZ0PW8ubGVmdCxzLnRvcD1vLnRvcCk7aWYodGhpcy5vcHRpb25zLmN1c3RvbSYmdGhpcy5vcHRpb25zLmN1c3RvbS5yZWZyZXNoQ29udGFpbmVycyl0aGlzLm9wdGlvbnMuY3VzdG9tLnJlZnJlc2hDb250YWluZXJzLmNhbGwodGhpcyk7ZWxzZSBmb3IoaT10aGlzLmNvbnRhaW5lcnMubGVuZ3RoLTE7aT49MDtpLS0pbz10aGlzLmNvbnRhaW5lcnNbaV0uZWxlbWVudC5vZmZzZXQoKSx0aGlzLmNvbnRhaW5lcnNbaV0uY29udGFpbmVyQ2FjaGUubGVmdD1vLmxlZnQsdGhpcy5jb250YWluZXJzW2ldLmNvbnRhaW5lckNhY2hlLnRvcD1vLnRvcCx0aGlzLmNvbnRhaW5lcnNbaV0uY29udGFpbmVyQ2FjaGUud2lkdGg9dGhpcy5jb250YWluZXJzW2ldLmVsZW1lbnQub3V0ZXJXaWR0aCgpLHRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZS5oZWlnaHQ9dGhpcy5jb250YWluZXJzW2ldLmVsZW1lbnQub3V0ZXJIZWlnaHQoKTtyZXR1cm4gdGhpc30sX2NyZWF0ZVBsYWNlaG9sZGVyOmZ1bmN0aW9uKGUpe2U9ZXx8dGhpczt2YXIgaSxzPWUub3B0aW9ucztzLnBsYWNlaG9sZGVyJiZzLnBsYWNlaG9sZGVyLmNvbnN0cnVjdG9yIT09U3RyaW5nfHwoaT1zLnBsYWNlaG9sZGVyLHMucGxhY2Vob2xkZXI9e2VsZW1lbnQ6ZnVuY3Rpb24oKXt2YXIgcz1lLmN1cnJlbnRJdGVtWzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksbj10KFwiPFwiK3MrXCI+XCIsZS5kb2N1bWVudFswXSk7cmV0dXJuIGUuX2FkZENsYXNzKG4sXCJ1aS1zb3J0YWJsZS1wbGFjZWhvbGRlclwiLGl8fGUuY3VycmVudEl0ZW1bMF0uY2xhc3NOYW1lKS5fcmVtb3ZlQ2xhc3MobixcInVpLXNvcnRhYmxlLWhlbHBlclwiKSxcInRib2R5XCI9PT1zP2UuX2NyZWF0ZVRyUGxhY2Vob2xkZXIoZS5jdXJyZW50SXRlbS5maW5kKFwidHJcIikuZXEoMCksdChcIjx0cj5cIixlLmRvY3VtZW50WzBdKS5hcHBlbmRUbyhuKSk6XCJ0clwiPT09cz9lLl9jcmVhdGVUclBsYWNlaG9sZGVyKGUuY3VycmVudEl0ZW0sbik6XCJpbWdcIj09PXMmJm4uYXR0cihcInNyY1wiLGUuY3VycmVudEl0ZW0uYXR0cihcInNyY1wiKSksaXx8bi5jc3MoXCJ2aXNpYmlsaXR5XCIsXCJoaWRkZW5cIiksbn0sdXBkYXRlOmZ1bmN0aW9uKHQsbil7KCFpfHxzLmZvcmNlUGxhY2Vob2xkZXJTaXplKSYmKG4uaGVpZ2h0KCl8fG4uaGVpZ2h0KGUuY3VycmVudEl0ZW0uaW5uZXJIZWlnaHQoKS1wYXJzZUludChlLmN1cnJlbnRJdGVtLmNzcyhcInBhZGRpbmdUb3BcIil8fDAsMTApLXBhcnNlSW50KGUuY3VycmVudEl0ZW0uY3NzKFwicGFkZGluZ0JvdHRvbVwiKXx8MCwxMCkpLG4ud2lkdGgoKXx8bi53aWR0aChlLmN1cnJlbnRJdGVtLmlubmVyV2lkdGgoKS1wYXJzZUludChlLmN1cnJlbnRJdGVtLmNzcyhcInBhZGRpbmdMZWZ0XCIpfHwwLDEwKS1wYXJzZUludChlLmN1cnJlbnRJdGVtLmNzcyhcInBhZGRpbmdSaWdodFwiKXx8MCwxMCkpKX19KSxlLnBsYWNlaG9sZGVyPXQocy5wbGFjZWhvbGRlci5lbGVtZW50LmNhbGwoZS5lbGVtZW50LGUuY3VycmVudEl0ZW0pKSxlLmN1cnJlbnRJdGVtLmFmdGVyKGUucGxhY2Vob2xkZXIpLHMucGxhY2Vob2xkZXIudXBkYXRlKGUsZS5wbGFjZWhvbGRlcil9LF9jcmVhdGVUclBsYWNlaG9sZGVyOmZ1bmN0aW9uKGUsaSl7dmFyIHM9dGhpcztlLmNoaWxkcmVuKCkuZWFjaChmdW5jdGlvbigpe3QoXCI8dGQ+JiMxNjA7PC90ZD5cIixzLmRvY3VtZW50WzBdKS5hdHRyKFwiY29sc3BhblwiLHQodGhpcykuYXR0cihcImNvbHNwYW5cIil8fDEpLmFwcGVuZFRvKGkpfSl9LF9jb250YWN0Q29udGFpbmVyczpmdW5jdGlvbihlKXt2YXIgaSxzLG4sbyxhLHIsaCxsLGMsdSxkPW51bGwscD1udWxsO2ZvcihpPXRoaXMuY29udGFpbmVycy5sZW5ndGgtMTtpPj0wO2ktLSlpZighdC5jb250YWlucyh0aGlzLmN1cnJlbnRJdGVtWzBdLHRoaXMuY29udGFpbmVyc1tpXS5lbGVtZW50WzBdKSlpZih0aGlzLl9pbnRlcnNlY3RzV2l0aCh0aGlzLmNvbnRhaW5lcnNbaV0uY29udGFpbmVyQ2FjaGUpKXtpZihkJiZ0LmNvbnRhaW5zKHRoaXMuY29udGFpbmVyc1tpXS5lbGVtZW50WzBdLGQuZWxlbWVudFswXSkpY29udGludWU7ZD10aGlzLmNvbnRhaW5lcnNbaV0scD1pfWVsc2UgdGhpcy5jb250YWluZXJzW2ldLmNvbnRhaW5lckNhY2hlLm92ZXImJih0aGlzLmNvbnRhaW5lcnNbaV0uX3RyaWdnZXIoXCJvdXRcIixlLHRoaXMuX3VpSGFzaCh0aGlzKSksdGhpcy5jb250YWluZXJzW2ldLmNvbnRhaW5lckNhY2hlLm92ZXI9MCk7aWYoZClpZigxPT09dGhpcy5jb250YWluZXJzLmxlbmd0aCl0aGlzLmNvbnRhaW5lcnNbcF0uY29udGFpbmVyQ2FjaGUub3Zlcnx8KHRoaXMuY29udGFpbmVyc1twXS5fdHJpZ2dlcihcIm92ZXJcIixlLHRoaXMuX3VpSGFzaCh0aGlzKSksdGhpcy5jb250YWluZXJzW3BdLmNvbnRhaW5lckNhY2hlLm92ZXI9MSk7ZWxzZXtmb3Iobj0xZTQsbz1udWxsLGM9ZC5mbG9hdGluZ3x8dGhpcy5faXNGbG9hdGluZyh0aGlzLmN1cnJlbnRJdGVtKSxhPWM/XCJsZWZ0XCI6XCJ0b3BcIixyPWM/XCJ3aWR0aFwiOlwiaGVpZ2h0XCIsdT1jP1wicGFnZVhcIjpcInBhZ2VZXCIscz10aGlzLml0ZW1zLmxlbmd0aC0xO3M+PTA7cy0tKXQuY29udGFpbnModGhpcy5jb250YWluZXJzW3BdLmVsZW1lbnRbMF0sdGhpcy5pdGVtc1tzXS5pdGVtWzBdKSYmdGhpcy5pdGVtc1tzXS5pdGVtWzBdIT09dGhpcy5jdXJyZW50SXRlbVswXSYmKGg9dGhpcy5pdGVtc1tzXS5pdGVtLm9mZnNldCgpW2FdLGw9ITEsZVt1XS1oPnRoaXMuaXRlbXNbc11bcl0vMiYmKGw9ITApLG4+TWF0aC5hYnMoZVt1XS1oKSYmKG49TWF0aC5hYnMoZVt1XS1oKSxvPXRoaXMuaXRlbXNbc10sdGhpcy5kaXJlY3Rpb249bD9cInVwXCI6XCJkb3duXCIpKTtpZighbyYmIXRoaXMub3B0aW9ucy5kcm9wT25FbXB0eSlyZXR1cm47aWYodGhpcy5jdXJyZW50Q29udGFpbmVyPT09dGhpcy5jb250YWluZXJzW3BdKXJldHVybiB0aGlzLmN1cnJlbnRDb250YWluZXIuY29udGFpbmVyQ2FjaGUub3Zlcnx8KHRoaXMuY29udGFpbmVyc1twXS5fdHJpZ2dlcihcIm92ZXJcIixlLHRoaXMuX3VpSGFzaCgpKSx0aGlzLmN1cnJlbnRDb250YWluZXIuY29udGFpbmVyQ2FjaGUub3Zlcj0xKSx2b2lkIDA7bz90aGlzLl9yZWFycmFuZ2UoZSxvLG51bGwsITApOnRoaXMuX3JlYXJyYW5nZShlLG51bGwsdGhpcy5jb250YWluZXJzW3BdLmVsZW1lbnQsITApLHRoaXMuX3RyaWdnZXIoXCJjaGFuZ2VcIixlLHRoaXMuX3VpSGFzaCgpKSx0aGlzLmNvbnRhaW5lcnNbcF0uX3RyaWdnZXIoXCJjaGFuZ2VcIixlLHRoaXMuX3VpSGFzaCh0aGlzKSksdGhpcy5jdXJyZW50Q29udGFpbmVyPXRoaXMuY29udGFpbmVyc1twXSx0aGlzLm9wdGlvbnMucGxhY2Vob2xkZXIudXBkYXRlKHRoaXMuY3VycmVudENvbnRhaW5lcix0aGlzLnBsYWNlaG9sZGVyKSx0aGlzLmNvbnRhaW5lcnNbcF0uX3RyaWdnZXIoXCJvdmVyXCIsZSx0aGlzLl91aUhhc2godGhpcykpLHRoaXMuY29udGFpbmVyc1twXS5jb250YWluZXJDYWNoZS5vdmVyPTF9fSxfY3JlYXRlSGVscGVyOmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMub3B0aW9ucyxzPXQuaXNGdW5jdGlvbihpLmhlbHBlcik/dChpLmhlbHBlci5hcHBseSh0aGlzLmVsZW1lbnRbMF0sW2UsdGhpcy5jdXJyZW50SXRlbV0pKTpcImNsb25lXCI9PT1pLmhlbHBlcj90aGlzLmN1cnJlbnRJdGVtLmNsb25lKCk6dGhpcy5jdXJyZW50SXRlbTtyZXR1cm4gcy5wYXJlbnRzKFwiYm9keVwiKS5sZW5ndGh8fHQoXCJwYXJlbnRcIiE9PWkuYXBwZW5kVG8/aS5hcHBlbmRUbzp0aGlzLmN1cnJlbnRJdGVtWzBdLnBhcmVudE5vZGUpWzBdLmFwcGVuZENoaWxkKHNbMF0pLHNbMF09PT10aGlzLmN1cnJlbnRJdGVtWzBdJiYodGhpcy5fc3RvcmVkQ1NTPXt3aWR0aDp0aGlzLmN1cnJlbnRJdGVtWzBdLnN0eWxlLndpZHRoLGhlaWdodDp0aGlzLmN1cnJlbnRJdGVtWzBdLnN0eWxlLmhlaWdodCxwb3NpdGlvbjp0aGlzLmN1cnJlbnRJdGVtLmNzcyhcInBvc2l0aW9uXCIpLHRvcDp0aGlzLmN1cnJlbnRJdGVtLmNzcyhcInRvcFwiKSxsZWZ0OnRoaXMuY3VycmVudEl0ZW0uY3NzKFwibGVmdFwiKX0pLCghc1swXS5zdHlsZS53aWR0aHx8aS5mb3JjZUhlbHBlclNpemUpJiZzLndpZHRoKHRoaXMuY3VycmVudEl0ZW0ud2lkdGgoKSksKCFzWzBdLnN0eWxlLmhlaWdodHx8aS5mb3JjZUhlbHBlclNpemUpJiZzLmhlaWdodCh0aGlzLmN1cnJlbnRJdGVtLmhlaWdodCgpKSxzfSxfYWRqdXN0T2Zmc2V0RnJvbUhlbHBlcjpmdW5jdGlvbihlKXtcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9ZS5zcGxpdChcIiBcIikpLHQuaXNBcnJheShlKSYmKGU9e2xlZnQ6K2VbMF0sdG9wOitlWzFdfHwwfSksXCJsZWZ0XCJpbiBlJiYodGhpcy5vZmZzZXQuY2xpY2subGVmdD1lLmxlZnQrdGhpcy5tYXJnaW5zLmxlZnQpLFwicmlnaHRcImluIGUmJih0aGlzLm9mZnNldC5jbGljay5sZWZ0PXRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGgtZS5yaWdodCt0aGlzLm1hcmdpbnMubGVmdCksXCJ0b3BcImluIGUmJih0aGlzLm9mZnNldC5jbGljay50b3A9ZS50b3ArdGhpcy5tYXJnaW5zLnRvcCksXCJib3R0b21cImluIGUmJih0aGlzLm9mZnNldC5jbGljay50b3A9dGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQtZS5ib3R0b20rdGhpcy5tYXJnaW5zLnRvcCl9LF9nZXRQYXJlbnRPZmZzZXQ6ZnVuY3Rpb24oKXt0aGlzLm9mZnNldFBhcmVudD10aGlzLmhlbHBlci5vZmZzZXRQYXJlbnQoKTt2YXIgZT10aGlzLm9mZnNldFBhcmVudC5vZmZzZXQoKTtyZXR1cm5cImFic29sdXRlXCI9PT10aGlzLmNzc1Bvc2l0aW9uJiZ0aGlzLnNjcm9sbFBhcmVudFswXSE9PXRoaXMuZG9jdW1lbnRbMF0mJnQuY29udGFpbnModGhpcy5zY3JvbGxQYXJlbnRbMF0sdGhpcy5vZmZzZXRQYXJlbnRbMF0pJiYoZS5sZWZ0Kz10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCksZS50b3ArPXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpKSwodGhpcy5vZmZzZXRQYXJlbnRbMF09PT10aGlzLmRvY3VtZW50WzBdLmJvZHl8fHRoaXMub2Zmc2V0UGFyZW50WzBdLnRhZ05hbWUmJlwiaHRtbFwiPT09dGhpcy5vZmZzZXRQYXJlbnRbMF0udGFnTmFtZS50b0xvd2VyQ2FzZSgpJiZ0LnVpLmllKSYmKGU9e3RvcDowLGxlZnQ6MH0pLHt0b3A6ZS50b3ArKHBhcnNlSW50KHRoaXMub2Zmc2V0UGFyZW50LmNzcyhcImJvcmRlclRvcFdpZHRoXCIpLDEwKXx8MCksbGVmdDplLmxlZnQrKHBhcnNlSW50KHRoaXMub2Zmc2V0UGFyZW50LmNzcyhcImJvcmRlckxlZnRXaWR0aFwiKSwxMCl8fDApfX0sX2dldFJlbGF0aXZlT2Zmc2V0OmZ1bmN0aW9uKCl7aWYoXCJyZWxhdGl2ZVwiPT09dGhpcy5jc3NQb3NpdGlvbil7dmFyIHQ9dGhpcy5jdXJyZW50SXRlbS5wb3NpdGlvbigpO3JldHVybnt0b3A6dC50b3AtKHBhcnNlSW50KHRoaXMuaGVscGVyLmNzcyhcInRvcFwiKSwxMCl8fDApK3RoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpLGxlZnQ6dC5sZWZ0LShwYXJzZUludCh0aGlzLmhlbHBlci5jc3MoXCJsZWZ0XCIpLDEwKXx8MCkrdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpfX1yZXR1cm57dG9wOjAsbGVmdDowfX0sX2NhY2hlTWFyZ2luczpmdW5jdGlvbigpe3RoaXMubWFyZ2lucz17bGVmdDpwYXJzZUludCh0aGlzLmN1cnJlbnRJdGVtLmNzcyhcIm1hcmdpbkxlZnRcIiksMTApfHwwLHRvcDpwYXJzZUludCh0aGlzLmN1cnJlbnRJdGVtLmNzcyhcIm1hcmdpblRvcFwiKSwxMCl8fDB9fSxfY2FjaGVIZWxwZXJQcm9wb3J0aW9uczpmdW5jdGlvbigpe3RoaXMuaGVscGVyUHJvcG9ydGlvbnM9e3dpZHRoOnRoaXMuaGVscGVyLm91dGVyV2lkdGgoKSxoZWlnaHQ6dGhpcy5oZWxwZXIub3V0ZXJIZWlnaHQoKX19LF9zZXRDb250YWlubWVudDpmdW5jdGlvbigpe3ZhciBlLGkscyxuPXRoaXMub3B0aW9ucztcInBhcmVudFwiPT09bi5jb250YWlubWVudCYmKG4uY29udGFpbm1lbnQ9dGhpcy5oZWxwZXJbMF0ucGFyZW50Tm9kZSksKFwiZG9jdW1lbnRcIj09PW4uY29udGFpbm1lbnR8fFwid2luZG93XCI9PT1uLmNvbnRhaW5tZW50KSYmKHRoaXMuY29udGFpbm1lbnQ9WzAtdGhpcy5vZmZzZXQucmVsYXRpdmUubGVmdC10aGlzLm9mZnNldC5wYXJlbnQubGVmdCwwLXRoaXMub2Zmc2V0LnJlbGF0aXZlLnRvcC10aGlzLm9mZnNldC5wYXJlbnQudG9wLFwiZG9jdW1lbnRcIj09PW4uY29udGFpbm1lbnQ/dGhpcy5kb2N1bWVudC53aWR0aCgpOnRoaXMud2luZG93LndpZHRoKCktdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aC10aGlzLm1hcmdpbnMubGVmdCwoXCJkb2N1bWVudFwiPT09bi5jb250YWlubWVudD90aGlzLmRvY3VtZW50LmhlaWdodCgpfHxkb2N1bWVudC5ib2R5LnBhcmVudE5vZGUuc2Nyb2xsSGVpZ2h0OnRoaXMud2luZG93LmhlaWdodCgpfHx0aGlzLmRvY3VtZW50WzBdLmJvZHkucGFyZW50Tm9kZS5zY3JvbGxIZWlnaHQpLXRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LXRoaXMubWFyZ2lucy50b3BdKSwvXihkb2N1bWVudHx3aW5kb3d8cGFyZW50KSQvLnRlc3Qobi5jb250YWlubWVudCl8fChlPXQobi5jb250YWlubWVudClbMF0saT10KG4uY29udGFpbm1lbnQpLm9mZnNldCgpLHM9XCJoaWRkZW5cIiE9PXQoZSkuY3NzKFwib3ZlcmZsb3dcIiksdGhpcy5jb250YWlubWVudD1baS5sZWZ0KyhwYXJzZUludCh0KGUpLmNzcyhcImJvcmRlckxlZnRXaWR0aFwiKSwxMCl8fDApKyhwYXJzZUludCh0KGUpLmNzcyhcInBhZGRpbmdMZWZ0XCIpLDEwKXx8MCktdGhpcy5tYXJnaW5zLmxlZnQsaS50b3ArKHBhcnNlSW50KHQoZSkuY3NzKFwiYm9yZGVyVG9wV2lkdGhcIiksMTApfHwwKSsocGFyc2VJbnQodChlKS5jc3MoXCJwYWRkaW5nVG9wXCIpLDEwKXx8MCktdGhpcy5tYXJnaW5zLnRvcCxpLmxlZnQrKHM/TWF0aC5tYXgoZS5zY3JvbGxXaWR0aCxlLm9mZnNldFdpZHRoKTplLm9mZnNldFdpZHRoKS0ocGFyc2VJbnQodChlKS5jc3MoXCJib3JkZXJMZWZ0V2lkdGhcIiksMTApfHwwKS0ocGFyc2VJbnQodChlKS5jc3MoXCJwYWRkaW5nUmlnaHRcIiksMTApfHwwKS10aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoLXRoaXMubWFyZ2lucy5sZWZ0LGkudG9wKyhzP01hdGgubWF4KGUuc2Nyb2xsSGVpZ2h0LGUub2Zmc2V0SGVpZ2h0KTplLm9mZnNldEhlaWdodCktKHBhcnNlSW50KHQoZSkuY3NzKFwiYm9yZGVyVG9wV2lkdGhcIiksMTApfHwwKS0ocGFyc2VJbnQodChlKS5jc3MoXCJwYWRkaW5nQm90dG9tXCIpLDEwKXx8MCktdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQtdGhpcy5tYXJnaW5zLnRvcF0pfSxfY29udmVydFBvc2l0aW9uVG86ZnVuY3Rpb24oZSxpKXtpfHwoaT10aGlzLnBvc2l0aW9uKTt2YXIgcz1cImFic29sdXRlXCI9PT1lPzE6LTEsbj1cImFic29sdXRlXCIhPT10aGlzLmNzc1Bvc2l0aW9ufHx0aGlzLnNjcm9sbFBhcmVudFswXSE9PXRoaXMuZG9jdW1lbnRbMF0mJnQuY29udGFpbnModGhpcy5zY3JvbGxQYXJlbnRbMF0sdGhpcy5vZmZzZXRQYXJlbnRbMF0pP3RoaXMuc2Nyb2xsUGFyZW50OnRoaXMub2Zmc2V0UGFyZW50LG89LyhodG1sfGJvZHkpL2kudGVzdChuWzBdLnRhZ05hbWUpO3JldHVybnt0b3A6aS50b3ArdGhpcy5vZmZzZXQucmVsYXRpdmUudG9wKnMrdGhpcy5vZmZzZXQucGFyZW50LnRvcCpzLShcImZpeGVkXCI9PT10aGlzLmNzc1Bvc2l0aW9uPy10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxUb3AoKTpvPzA6bi5zY3JvbGxUb3AoKSkqcyxsZWZ0OmkubGVmdCt0aGlzLm9mZnNldC5yZWxhdGl2ZS5sZWZ0KnMrdGhpcy5vZmZzZXQucGFyZW50LmxlZnQqcy0oXCJmaXhlZFwiPT09dGhpcy5jc3NQb3NpdGlvbj8tdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpOm8/MDpuLnNjcm9sbExlZnQoKSkqc31cbn0sX2dlbmVyYXRlUG9zaXRpb246ZnVuY3Rpb24oZSl7dmFyIGkscyxuPXRoaXMub3B0aW9ucyxvPWUucGFnZVgsYT1lLnBhZ2VZLHI9XCJhYnNvbHV0ZVwiIT09dGhpcy5jc3NQb3NpdGlvbnx8dGhpcy5zY3JvbGxQYXJlbnRbMF0hPT10aGlzLmRvY3VtZW50WzBdJiZ0LmNvbnRhaW5zKHRoaXMuc2Nyb2xsUGFyZW50WzBdLHRoaXMub2Zmc2V0UGFyZW50WzBdKT90aGlzLnNjcm9sbFBhcmVudDp0aGlzLm9mZnNldFBhcmVudCxoPS8oaHRtbHxib2R5KS9pLnRlc3QoclswXS50YWdOYW1lKTtyZXR1cm5cInJlbGF0aXZlXCIhPT10aGlzLmNzc1Bvc2l0aW9ufHx0aGlzLnNjcm9sbFBhcmVudFswXSE9PXRoaXMuZG9jdW1lbnRbMF0mJnRoaXMuc2Nyb2xsUGFyZW50WzBdIT09dGhpcy5vZmZzZXRQYXJlbnRbMF18fCh0aGlzLm9mZnNldC5yZWxhdGl2ZT10aGlzLl9nZXRSZWxhdGl2ZU9mZnNldCgpKSx0aGlzLm9yaWdpbmFsUG9zaXRpb24mJih0aGlzLmNvbnRhaW5tZW50JiYoZS5wYWdlWC10aGlzLm9mZnNldC5jbGljay5sZWZ0PHRoaXMuY29udGFpbm1lbnRbMF0mJihvPXRoaXMuY29udGFpbm1lbnRbMF0rdGhpcy5vZmZzZXQuY2xpY2subGVmdCksZS5wYWdlWS10aGlzLm9mZnNldC5jbGljay50b3A8dGhpcy5jb250YWlubWVudFsxXSYmKGE9dGhpcy5jb250YWlubWVudFsxXSt0aGlzLm9mZnNldC5jbGljay50b3ApLGUucGFnZVgtdGhpcy5vZmZzZXQuY2xpY2subGVmdD50aGlzLmNvbnRhaW5tZW50WzJdJiYobz10aGlzLmNvbnRhaW5tZW50WzJdK3RoaXMub2Zmc2V0LmNsaWNrLmxlZnQpLGUucGFnZVktdGhpcy5vZmZzZXQuY2xpY2sudG9wPnRoaXMuY29udGFpbm1lbnRbM10mJihhPXRoaXMuY29udGFpbm1lbnRbM10rdGhpcy5vZmZzZXQuY2xpY2sudG9wKSksbi5ncmlkJiYoaT10aGlzLm9yaWdpbmFsUGFnZVkrTWF0aC5yb3VuZCgoYS10aGlzLm9yaWdpbmFsUGFnZVkpL24uZ3JpZFsxXSkqbi5ncmlkWzFdLGE9dGhpcy5jb250YWlubWVudD9pLXRoaXMub2Zmc2V0LmNsaWNrLnRvcD49dGhpcy5jb250YWlubWVudFsxXSYmaS10aGlzLm9mZnNldC5jbGljay50b3A8PXRoaXMuY29udGFpbm1lbnRbM10/aTppLXRoaXMub2Zmc2V0LmNsaWNrLnRvcD49dGhpcy5jb250YWlubWVudFsxXT9pLW4uZ3JpZFsxXTppK24uZ3JpZFsxXTppLHM9dGhpcy5vcmlnaW5hbFBhZ2VYK01hdGgucm91bmQoKG8tdGhpcy5vcmlnaW5hbFBhZ2VYKS9uLmdyaWRbMF0pKm4uZ3JpZFswXSxvPXRoaXMuY29udGFpbm1lbnQ/cy10aGlzLm9mZnNldC5jbGljay5sZWZ0Pj10aGlzLmNvbnRhaW5tZW50WzBdJiZzLXRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ8PXRoaXMuY29udGFpbm1lbnRbMl0/czpzLXRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ+PXRoaXMuY29udGFpbm1lbnRbMF0/cy1uLmdyaWRbMF06cytuLmdyaWRbMF06cykpLHt0b3A6YS10aGlzLm9mZnNldC5jbGljay50b3AtdGhpcy5vZmZzZXQucmVsYXRpdmUudG9wLXRoaXMub2Zmc2V0LnBhcmVudC50b3ArKFwiZml4ZWRcIj09PXRoaXMuY3NzUG9zaXRpb24/LXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpOmg/MDpyLnNjcm9sbFRvcCgpKSxsZWZ0Om8tdGhpcy5vZmZzZXQuY2xpY2subGVmdC10aGlzLm9mZnNldC5yZWxhdGl2ZS5sZWZ0LXRoaXMub2Zmc2V0LnBhcmVudC5sZWZ0KyhcImZpeGVkXCI9PT10aGlzLmNzc1Bvc2l0aW9uPy10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCk6aD8wOnIuc2Nyb2xsTGVmdCgpKX19LF9yZWFycmFuZ2U6ZnVuY3Rpb24odCxlLGkscyl7aT9pWzBdLmFwcGVuZENoaWxkKHRoaXMucGxhY2Vob2xkZXJbMF0pOmUuaXRlbVswXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLnBsYWNlaG9sZGVyWzBdLFwiZG93blwiPT09dGhpcy5kaXJlY3Rpb24/ZS5pdGVtWzBdOmUuaXRlbVswXS5uZXh0U2libGluZyksdGhpcy5jb3VudGVyPXRoaXMuY291bnRlcj8rK3RoaXMuY291bnRlcjoxO3ZhciBuPXRoaXMuY291bnRlcjt0aGlzLl9kZWxheShmdW5jdGlvbigpe249PT10aGlzLmNvdW50ZXImJnRoaXMucmVmcmVzaFBvc2l0aW9ucyghcyl9KX0sX2NsZWFyOmZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gaSh0LGUsaSl7cmV0dXJuIGZ1bmN0aW9uKHMpe2kuX3RyaWdnZXIodCxzLGUuX3VpSGFzaChlKSl9fXRoaXMucmV2ZXJ0aW5nPSExO3ZhciBzLG49W107aWYoIXRoaXMuX25vRmluYWxTb3J0JiZ0aGlzLmN1cnJlbnRJdGVtLnBhcmVudCgpLmxlbmd0aCYmdGhpcy5wbGFjZWhvbGRlci5iZWZvcmUodGhpcy5jdXJyZW50SXRlbSksdGhpcy5fbm9GaW5hbFNvcnQ9bnVsbCx0aGlzLmhlbHBlclswXT09PXRoaXMuY3VycmVudEl0ZW1bMF0pe2ZvcihzIGluIHRoaXMuX3N0b3JlZENTUykoXCJhdXRvXCI9PT10aGlzLl9zdG9yZWRDU1Nbc118fFwic3RhdGljXCI9PT10aGlzLl9zdG9yZWRDU1Nbc10pJiYodGhpcy5fc3RvcmVkQ1NTW3NdPVwiXCIpO3RoaXMuY3VycmVudEl0ZW0uY3NzKHRoaXMuX3N0b3JlZENTUyksdGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5jdXJyZW50SXRlbSxcInVpLXNvcnRhYmxlLWhlbHBlclwiKX1lbHNlIHRoaXMuY3VycmVudEl0ZW0uc2hvdygpO2Zvcih0aGlzLmZyb21PdXRzaWRlJiYhZSYmbi5wdXNoKGZ1bmN0aW9uKHQpe3RoaXMuX3RyaWdnZXIoXCJyZWNlaXZlXCIsdCx0aGlzLl91aUhhc2godGhpcy5mcm9tT3V0c2lkZSkpfSksIXRoaXMuZnJvbU91dHNpZGUmJnRoaXMuZG9tUG9zaXRpb24ucHJldj09PXRoaXMuY3VycmVudEl0ZW0ucHJldigpLm5vdChcIi51aS1zb3J0YWJsZS1oZWxwZXJcIilbMF0mJnRoaXMuZG9tUG9zaXRpb24ucGFyZW50PT09dGhpcy5jdXJyZW50SXRlbS5wYXJlbnQoKVswXXx8ZXx8bi5wdXNoKGZ1bmN0aW9uKHQpe3RoaXMuX3RyaWdnZXIoXCJ1cGRhdGVcIix0LHRoaXMuX3VpSGFzaCgpKX0pLHRoaXMhPT10aGlzLmN1cnJlbnRDb250YWluZXImJihlfHwobi5wdXNoKGZ1bmN0aW9uKHQpe3RoaXMuX3RyaWdnZXIoXCJyZW1vdmVcIix0LHRoaXMuX3VpSGFzaCgpKX0pLG4ucHVzaChmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSl7dC5fdHJpZ2dlcihcInJlY2VpdmVcIixlLHRoaXMuX3VpSGFzaCh0aGlzKSl9fS5jYWxsKHRoaXMsdGhpcy5jdXJyZW50Q29udGFpbmVyKSksbi5wdXNoKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlKXt0Ll90cmlnZ2VyKFwidXBkYXRlXCIsZSx0aGlzLl91aUhhc2godGhpcykpfX0uY2FsbCh0aGlzLHRoaXMuY3VycmVudENvbnRhaW5lcikpKSkscz10aGlzLmNvbnRhaW5lcnMubGVuZ3RoLTE7cz49MDtzLS0pZXx8bi5wdXNoKGkoXCJkZWFjdGl2YXRlXCIsdGhpcyx0aGlzLmNvbnRhaW5lcnNbc10pKSx0aGlzLmNvbnRhaW5lcnNbc10uY29udGFpbmVyQ2FjaGUub3ZlciYmKG4ucHVzaChpKFwib3V0XCIsdGhpcyx0aGlzLmNvbnRhaW5lcnNbc10pKSx0aGlzLmNvbnRhaW5lcnNbc10uY29udGFpbmVyQ2FjaGUub3Zlcj0wKTtpZih0aGlzLnN0b3JlZEN1cnNvciYmKHRoaXMuZG9jdW1lbnQuZmluZChcImJvZHlcIikuY3NzKFwiY3Vyc29yXCIsdGhpcy5zdG9yZWRDdXJzb3IpLHRoaXMuc3RvcmVkU3R5bGVzaGVldC5yZW1vdmUoKSksdGhpcy5fc3RvcmVkT3BhY2l0eSYmdGhpcy5oZWxwZXIuY3NzKFwib3BhY2l0eVwiLHRoaXMuX3N0b3JlZE9wYWNpdHkpLHRoaXMuX3N0b3JlZFpJbmRleCYmdGhpcy5oZWxwZXIuY3NzKFwiekluZGV4XCIsXCJhdXRvXCI9PT10aGlzLl9zdG9yZWRaSW5kZXg/XCJcIjp0aGlzLl9zdG9yZWRaSW5kZXgpLHRoaXMuZHJhZ2dpbmc9ITEsZXx8dGhpcy5fdHJpZ2dlcihcImJlZm9yZVN0b3BcIix0LHRoaXMuX3VpSGFzaCgpKSx0aGlzLnBsYWNlaG9sZGVyWzBdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5wbGFjZWhvbGRlclswXSksdGhpcy5jYW5jZWxIZWxwZXJSZW1vdmFsfHwodGhpcy5oZWxwZXJbMF0hPT10aGlzLmN1cnJlbnRJdGVtWzBdJiZ0aGlzLmhlbHBlci5yZW1vdmUoKSx0aGlzLmhlbHBlcj1udWxsKSwhZSl7Zm9yKHM9MDtuLmxlbmd0aD5zO3MrKyluW3NdLmNhbGwodGhpcyx0KTt0aGlzLl90cmlnZ2VyKFwic3RvcFwiLHQsdGhpcy5fdWlIYXNoKCkpfXJldHVybiB0aGlzLmZyb21PdXRzaWRlPSExLCF0aGlzLmNhbmNlbEhlbHBlclJlbW92YWx9LF90cmlnZ2VyOmZ1bmN0aW9uKCl7dC5XaWRnZXQucHJvdG90eXBlLl90cmlnZ2VyLmFwcGx5KHRoaXMsYXJndW1lbnRzKT09PSExJiZ0aGlzLmNhbmNlbCgpfSxfdWlIYXNoOmZ1bmN0aW9uKGUpe3ZhciBpPWV8fHRoaXM7cmV0dXJue2hlbHBlcjppLmhlbHBlcixwbGFjZWhvbGRlcjppLnBsYWNlaG9sZGVyfHx0KFtdKSxwb3NpdGlvbjppLnBvc2l0aW9uLG9yaWdpbmFsUG9zaXRpb246aS5vcmlnaW5hbFBvc2l0aW9uLG9mZnNldDppLnBvc2l0aW9uQWJzLGl0ZW06aS5jdXJyZW50SXRlbSxzZW5kZXI6ZT9lLmVsZW1lbnQ6bnVsbH19fSl9KTtcbi8qIVxuICogalF1ZXJ5IFVJIFNvcnRhYmxlIEFuaW1hdGlvbiAwLjAuMVxuICpcbiAqIENvcHlyaWdodCAyMDE1LCBFZ29yIFNoYXJhcG92XG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKlxuICogRGVwZW5kczpcbiAqICBqcXVlcnkudWkuc29ydGFibGUuanNcbiAqL1xuKGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgIGRlZmluZShbXCJqcXVlcnlcIiwgXCJqcXVlcnktdWlcIl0sIGZhY3RvcnkpO1xuICB9IGVsc2Uge1xuICAgIC8vIEJyb3dzZXIgZ2xvYmFsc1xuICAgIGZhY3RvcnkoalF1ZXJ5KTtcbiAgfVxufShmdW5jdGlvbigkKSB7XG4gIHZhciBzdXBwb3J0cyA9IHt9LFxuICAgICAgdGVzdFByb3AgPSBmdW5jdGlvbiAocHJlZml4ZXMpIHtcbiAgICAgICAgdmFyIHRlc3RfZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSwgaSwgbDtcblxuICAgICAgICBmb3IgKGkgPSAwOyBsID0gcHJlZml4ZXMubGVuZ3RoLCBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHRlc3RfZWwuc3R5bGVbcHJlZml4ZXNbaV1dICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHByZWZpeGVzW2ldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0sXG4gICAgICB1c2VfY3NzX2FuaW1hdGlvbiA9IGZhbHNlO1xuXG4gIC8vIGNoZWNrIGZvciBjc3MtdHJhbnNmb3JtcyBzdXBwb3J0XG4gIHN1cHBvcnRzWyd0cmFuc2Zvcm0nXSA9IHRlc3RQcm9wKFtcbiAgICAndHJhbnNmb3JtJywgJ1dlYmtpdFRyYW5zZm9ybScsXG4gICAgJ01velRyYW5zZm9ybScsICdPVHJhbnNmb3JtJyxcbiAgICAnbXNUcmFuc2Zvcm0nXG4gIF0pO1xuXG4gIC8vIGNoZWNrIGZvciBjc3MtdHJhbnNpdGlvbnMgc3VwcG9ydFxuICBzdXBwb3J0c1sndHJhbnNpdGlvbiddID0gdGVzdFByb3AoW1xuICAgICd0cmFuc2l0aW9uJywgJ1dlYmtpdFRyYW5zaXRpb24nLFxuICAgICdNb3pUcmFuc2l0aW9uJywgJ09UcmFuc2l0aW9uJyxcbiAgICAnbXNUcmFuc2l0aW9uJ1xuICBdKTtcblxuICB1c2VfY3NzX2FuaW1hdGlvbiA9IHN1cHBvcnRzWyd0cmFuc2Zvcm0nXSAmJiBzdXBwb3J0c1sndHJhbnNpdGlvbiddO1xuXG4gICQud2lkZ2V0KFwidWkuc29ydGFibGVcIiwgJC51aS5zb3J0YWJsZSwge1xuICAgIG9wdGlvbnM6IHtcbiAgICAgIC8vIGFkZHMgdGhlIG5ldyBgYW5pbWF0aW9uYCBvcHRpb24sIHR1cm5lZCBvZmYgYnkgZGVmYXVsdC5cbiAgICAgIGFuaW1hdGlvbjogMCxcbiAgICB9LFxuXG4gICAgLy8gY2FsbGVkIGludGVybmFsbHkgYnkgc29ydGFibGUgd2hlbiBzb3J0YWJsZVxuICAgIC8vIGl0ZW1zIGFyZSByZWFycmFuZ2VkLlxuICAgIF9yZWFycmFuZ2U6IGZ1bmN0aW9uIChlLCBpdGVtKSB7XG4gICAgICB2YXIgJGl0ZW0sXG4gICAgICAgICAgcHJvcHMgPSB7fSxcbiAgICAgICAgICByZXNldF9wcm9wcyA9IHt9LFxuICAgICAgICAgIG9mZnNldCxcbiAgICAgICAgICBheGlzID0gJC50cmltKHRoaXMub3B0aW9ucy5heGlzKTtcblxuICAgICAgLy8ganVzdCBjYWxsIHRoZSBvcmlnaW5hbCBpbXBsZW1lbnRhdGlvbiBvZiBfcmVhcnJhbmdlKClcbiAgICAgIC8vIGlmIG9wdGlvbiBgYW5pbWF0aW9uYCBpcyB0dXJuZWQgb2ZmXG4gICAgICAvLyBgY3VycmVudENvbnRhaW5lcmAgdXNlZCBmb3IgYW5pbWF0aW5nIHJlY2VpdmVkIGl0ZW1zXG4gICAgICAvLyBmcm9tIGFub3RoZXIgc29ydGFibGUgY29udGFpbmVyIChgY29ubmVjdFdpdGhgIG9wdGlvbilcbiAgICAgIGlmICghcGFyc2VJbnQodGhpcy5jdXJyZW50Q29udGFpbmVyLm9wdGlvbnMuYW5pbWF0aW9uKSB8fFxuICAgICAgICAgICFheGlzXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1cGVyQXBwbHkoYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgJGl0ZW0gPSAkKGl0ZW0uaXRlbVswXSk7XG4gICAgICAvLyBpZiBtb3ZlZCB1cCwgdGhlbiBtb3ZlIGl0ZW0gdXAgdG8gaXRzIGhlaWdodCxcbiAgICAgIC8vIGlmIG1vdmVkIGRvd24sIHRoZW4gbW92ZSBpdGVtIGRvd25cbiAgICAgIG9mZnNldCA9ICh0aGlzLmRpcmVjdGlvbiA9PSAndXAnID8gJycgOiAnLScpICsgKCRpdGVtW2F4aXMgPT0gJ3gnID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSgpKSArICdweCc7XG5cbiAgICAgIC8vIGNhbGwgb3JpZ2luYWwgX3JlYXJyYW5nZSgpIGF0IGZpcnN0XG4gICAgICB0aGlzLl9zdXBlckFwcGx5KGFyZ3VtZW50cyk7XG5cbiAgICAgIC8vIHByZXBhcmUgc3RhcnRpbmcgY3NzIHByb3BzXG4gICAgICBpZiAodXNlX2Nzc19hbmltYXRpb24pIHtcbiAgICAgICAgcHJvcHNbc3VwcG9ydHNbJ3RyYW5zZm9ybSddXSA9IChheGlzID09ICd4JyA/ICd0cmFuc2xhdGVYJyA6ICd0cmFuc2xhdGVZJykgKyAnKCcgKyBvZmZzZXQgKyAnKSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9wcyA9IHtcbiAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgfTtcbiAgICAgICAgcHJvcHNbYXhpcyA9PSAneCcgPyAnbGVmdCcgOiAndG9wJ10gPSBvZmZzZXQ7XG4gICAgICB9XG5cbiAgICAgIC8vIHNldCBzdGFydGluZyBjc3MgcHJvcHMgb24gaXRlbVxuICAgICAgJGl0ZW0uY3NzKHByb3BzKTtcblxuICAgICAgLy8gaWYgY3NzIGFuaW1hdGlvbnMgYXJlIG5vdCBzdXBwb3J0ZWRcbiAgICAgIC8vIHVzZSBqUXVlcnkgYW5pbWF0aW9uc1xuICAgICAgaWYgKHVzZV9jc3NfYW5pbWF0aW9uKSB7XG4gICAgICAgIHByb3BzW3N1cHBvcnRzWyd0cmFuc2l0aW9uJ11dID0gc3VwcG9ydHNbJ3RyYW5zZm9ybSddICsgJyAnICsgdGhpcy5vcHRpb25zLmFuaW1hdGlvbiArICdtcyc7XG4gICAgICAgIHByb3BzW3N1cHBvcnRzWyd0cmFuc2Zvcm0nXV0gPSAnJztcbiAgICAgICAgcmVzZXRfcHJvcHNbc3VwcG9ydHNbJ3RyYW5zZm9ybSddXSA9ICcnO1xuICAgICAgICByZXNldF9wcm9wc1tzdXBwb3J0c1sndHJhbnNpdGlvbiddXSA9ICcnO1xuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICRpdGVtLmNzcyhwcm9wcyk7XG4gICAgICAgIH0sIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzZXRfcHJvcHMudG9wID0gJyc7XG4gICAgICAgIHJlc2V0X3Byb3BzLnBvc2l0aW9uID0gJyc7XG5cbiAgICAgICAgJGl0ZW0uYW5pbWF0ZSh7XG4gICAgICAgICAgdG9wOiAnJyxcbiAgICAgICAgICBwb3NpdGlvbjogJydcbiAgICAgICAgfSwgdGhpcy5vcHRpb25zLmFuaW1hdGlvbik7XG4gICAgICB9XG5cbiAgICAgIC8vIGFmdGVyIGFuaW1hdGlvbiBlbmRzXG4gICAgICAvLyBjbGVhciBjaGFuZ2VkIGZvciBhbmltYXRpb24gcHJvcHNcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAkaXRlbS5jc3MocmVzZXRfcHJvcHMpO1xuICAgICAgfSwgdGhpcy5vcHRpb25zLmFuaW1hdGlvbik7XG4gICAgfVxuICB9KTtcbn0pKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./package/resources/js/app/custom/jquery-ui.js\n");

/***/ }),

/***/ "./package/resources/js/app/dropzone.js":
/*!**********************************************!*\
  !*** ./package/resources/js/app/dropzone.js ***!
  \**********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _custom_jquery_ui_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./custom/jquery-ui.js */ \"./package/resources/js/app/custom/jquery-ui.js\");\n/* harmony import */ var _custom_jquery_ui_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_custom_jquery_ui_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _custom_dropzone_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./custom/dropzone.js */ \"./package/resources/js/app/custom/dropzone.js\");\n/* harmony import */ var _custom_dropzone_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_custom_dropzone_js__WEBPACK_IMPORTED_MODULE_1__);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWNrYWdlL3Jlc291cmNlcy9qcy9hcHAvZHJvcHpvbmUuanM/MjJjZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQStCIiwiZmlsZSI6Ii4vcGFja2FnZS9yZXNvdXJjZXMvanMvYXBwL2Ryb3B6b25lLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICcuL2N1c3RvbS9qcXVlcnktdWkuanMnO1xuaW1wb3J0ICcuL2N1c3RvbS9kcm9wem9uZS5qcyc7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./package/resources/js/app/dropzone.js\n");

/***/ }),

/***/ 1:
/*!****************************************************!*\
  !*** multi ./package/resources/js/app/dropzone.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/janjanssens/Documents/Sites/Github/beheerpaneel-package-dev/package/resources/js/app/dropzone.js */"./package/resources/js/app/dropzone.js");


/***/ })

/******/ });