/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v3.5.1\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2020-05-04T22:49Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif (  true && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar flat = arr.flat ? function( array ) {\n\treturn arr.flat.call( array );\n} : function( array ) {\n\treturn arr.concat.apply( [], array );\n};\n\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\nvar isFunction = function isFunction( obj ) {\n\n      // Support: Chrome <=57, Firefox <=52\n      // In some browsers, typeof returns \"function\" for HTML <object> elements\n      // (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n      // We don't want to classify *any* DOM node as a function.\n      return typeof obj === \"function\" && typeof obj.nodeType !== \"number\";\n  };\n\n\nvar isWindow = function isWindow( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t};\n\n\nvar document = window.document;\n\n\n\n\tvar preservedScriptAttributes = {\n\t\ttype: true,\n\t\tsrc: true,\n\t\tnonce: true,\n\t\tnoModule: true\n\t};\n\n\tfunction DOMEval( code, node, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar i, val,\n\t\t\tscript = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tif ( node ) {\n\t\t\tfor ( i in preservedScriptAttributes ) {\n\n\t\t\t\t// Support: Firefox 64+, Edge 18+\n\t\t\t\t// Some browsers don't support the \"nonce\" property on scripts.\n\t\t\t\t// On the other hand, just using `getAttribute` is not enough as\n\t\t\t\t// the `nonce` attribute is reset to an empty string whenever it\n\t\t\t\t// becomes browsing-context connected.\n\t\t\t\t// See https://github.com/whatwg/html/issues/2369\n\t\t\t\t// See https://html.spec.whatwg.org/#nonce-attributes\n\t\t\t\t// The `node.getAttribute` check was added for the sake of\n\t\t\t\t// `jQuery.globalEval` so that it can fake a nonce-containing node\n\t\t\t\t// via an object.\n\t\t\t\tval = node[ i ] || node.getAttribute && node.getAttribute( i );\n\t\t\t\tif ( val ) {\n\t\t\t\t\tscript.setAttribute( i, val );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\t// Support: Android <=2.3 only (functionish RegExp)\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.5.1\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teven: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn ( i + 1 ) % 2;\n\t\t} ) );\n\t},\n\n\todd: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn i % 2;\n\t\t} ) );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent Object.prototype pollution\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( name === \"__proto__\" || target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\t\t\t\t\tsrc = target[ name ];\n\n\t\t\t\t\t// Ensure proper type for the source value\n\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n\t\t\t\t\t\tclone = {};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src;\n\t\t\t\t\t}\n\t\t\t\t\tcopyIsArray = false;\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a provided context; falls back to the global one\n\t// if not specified.\n\tglobalEval: function( code, options, doc ) {\n\t\tDOMEval( code, { nonce: options && options.nonce }, doc );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn flat( ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( _i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.5\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://js.foundation/\n *\n * Date: 2020-03-14\n */\n( function( window ) {\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tnonnativeSelectorCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ( {} ).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpushNative = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[ i ] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|\" +\n\t\t\"ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n\tidentifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n\t\t\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\n\t\t// \"Attribute values must be CSS identifiers [capture 5]\n\t\t// or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" +\n\t\twhitespace + \"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" +\n\t\twhitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace +\n\t\t\"*\" ),\n\trdescend = new RegExp( whitespace + \"|>\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" +\n\t\t\twhitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" +\n\t\t\twhitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace +\n\t\t\t\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace +\n\t\t\t\"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trhtml = /HTML$/i,\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace + \"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\" ),\n\tfunescape = function( escape, nonHex ) {\n\t\tvar high = \"0x\" + escape.slice( 1 ) - 0x10000;\n\n\t\treturn nonHex ?\n\n\t\t\t// Strip the backslash prefix from a non-hex escape sequence\n\t\t\tnonHex :\n\n\t\t\t// Replace a hexadecimal escape sequence with the encoded Unicode code point\n\t\t\t// Support: IE <=11+\n\t\t\t// For values outside the Basic Multilingual Plane (BMP), manually construct a\n\t\t\t// surrogate pair\n\t\t\thigh < 0 ?\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" +\n\t\t\t\tch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tinDisabledFieldset = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && elem.nodeName.toLowerCase() === \"fieldset\";\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t( arr = slice.call( preferredDoc.childNodes ) ),\n\t\tpreferredDoc.childNodes\n\t);\n\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\t// eslint-disable-next-line no-unused-expressions\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpushNative.apply( target, slice.call( els ) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( ( target[ j++ ] = els[ i++ ] ) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\t\tsetDocument( context );\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( ( m = match[ 1 ] ) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( ( elem = context.getElementById( m ) ) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && ( elem = newContext.getElementById( m ) ) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[ 2 ] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!nonnativeSelectorCache[ selector + \" \" ] &&\n\t\t\t\t( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&\n\n\t\t\t\t// Support: IE 8 only\n\t\t\t\t// Exclude object elements\n\t\t\t\t( nodeType !== 1 || context.nodeName.toLowerCase() !== \"object\" ) ) {\n\n\t\t\t\tnewSelector = selector;\n\t\t\t\tnewContext = context;\n\n\t\t\t\t// qSA considers elements outside a scoping root when evaluating child or\n\t\t\t\t// descendant combinators, which is not what we want.\n\t\t\t\t// In such cases, we work around the behavior by prefixing every selector in the\n\t\t\t\t// list with an ID selector referencing the scope context.\n\t\t\t\t// The technique has to be used as well when a leading combinator is used\n\t\t\t\t// as such selectors are not recognized by querySelectorAll.\n\t\t\t\t// Thanks to Andrew Dupont for this technique.\n\t\t\t\tif ( nodeType === 1 &&\n\t\t\t\t\t( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\n\t\t\t\t\t// We can use :scope instead of the ID hack if the browser\n\t\t\t\t\t// supports it & if we're not changing the context.\n\t\t\t\t\tif ( newContext !== context || !support.scope ) {\n\n\t\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\t\tif ( ( nid = context.getAttribute( \"id\" ) ) ) {\n\t\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontext.setAttribute( \"id\", ( nid = expando ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[ i ] = ( nid ? \"#\" + nid : \":scope\" ) + \" \" +\n\t\t\t\t\t\t\ttoSelector( groups[ i ] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t);\n\t\t\t\t\treturn results;\n\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\tnonnativeSelectorCache( selector, true );\n\t\t\t\t} finally {\n\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn ( cache[ key + \" \" ] = value );\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement( \"fieldset\" );\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch ( e ) {\n\t\treturn false;\n\t} finally {\n\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split( \"|\" ),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[ i ] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( ( cur = cur.nextSibling ) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn ( name === \"input\" || name === \"button\" ) && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\tinDisabledFieldset( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction( function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction( function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ ( j = matchIndexes[ i ] ) ] ) {\n\t\t\t\t\tseed[ j ] = !( matches[ j ] = seed[ j ] );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t} );\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\tvar namespace = elem.namespaceURI,\n\t\tdocElem = ( elem.ownerDocument || elem ).documentElement;\n\n\t// Support: IE <=8\n\t// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes\n\t// https://bugs.jquery.com/ticket/4833\n\treturn !rhtml.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( preferredDoc != document &&\n\t\t( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,\n\t// Safari 4 - 5 only, Opera <=11.6 - 12.x only\n\t// IE/Edge & older browsers don't support the :scope pseudo-class.\n\t// Support: Safari 6.0 only\n\t// Safari 6.0 supports :scope but it's an alias of :root there.\n\tsupport.scope = assert( function( el ) {\n\t\tdocElem.appendChild( el ).appendChild( document.createElement( \"div\" ) );\n\t\treturn typeof el.querySelectorAll !== \"undefined\" &&\n\t\t\t!el.querySelectorAll( \":scope fieldset div\" ).length;\n\t} );\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert( function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute( \"className\" );\n\t} );\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert( function( el ) {\n\t\tel.appendChild( document.createComment( \"\" ) );\n\t\treturn !el.getElementsByTagName( \"*\" ).length;\n\t} );\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert( function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t} );\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[ \"ID\" ] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute( \"id\" ) === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[ \"ID\" ] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[ \"ID\" ] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode( \"id\" );\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[ \"ID\" ] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( ( elem = elems[ i++ ] ) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[ \"TAG\" ] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[ \"CLASS\" ] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {\n\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert( function( el ) {\n\n\t\t\tvar input;\n\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll( \"[msallowcapture^='']\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll( \"[selected]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"~=\" );\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 15 - 18+\n\t\t\t// IE 11/Edge don't find elements on a `[name='']` query in some cases.\n\t\t\t// Adding a temporary attribute to the document before the selection works\n\t\t\t// around the issue.\n\t\t\t// Interestingly, IE 10 & older don't seem to have the issue.\n\t\t\tinput = document.createElement( \"input\" );\n\t\t\tinput.setAttribute( \"name\", \"\" );\n\t\t\tel.appendChild( input );\n\t\t\tif ( !el.querySelectorAll( \"[name='']\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" +\n\t\t\t\t\twhitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll( \":checked\" ).length ) {\n\t\t\t\trbuggyQSA.push( \":checked\" );\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push( \".#.+[+~]\" );\n\t\t\t}\n\n\t\t\t// Support: Firefox <=3.6 - 5 only\n\t\t\t// Old Firefox doesn't throw on a badly-escaped identifier.\n\t\t\tel.querySelectorAll( \"\\\\\\f\" );\n\t\t\trbuggyQSA.push( \"[\\\\r\\\\n\\\\f]\" );\n\t\t} );\n\n\t\tassert( function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement( \"input\" );\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll( \"[name=d]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll( \":enabled\" ).length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll( \":disabled\" ).length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: Opera 10 - 11 only\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll( \"*,:x\" );\n\t\t\trbuggyQSA.push( \",.*:\" );\n\t\t} );\n\t}\n\n\tif ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector ) ) ) ) {\n\n\t\tassert( function( el ) {\n\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t} );\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( \"|\" ) );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( \"|\" ) );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t) );\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( ( b = b.parentNode ) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t// two documents; shallow comparisons work.\n\t\t// eslint-disable-next-line eqeqeq\n\t\tcompare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( a == document || a.ownerDocument == preferredDoc &&\n\t\t\t\tcontains( preferredDoc, a ) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( b == document || b.ownerDocument == preferredDoc &&\n\t\t\t\tcontains( preferredDoc, b ) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t/* eslint-disable eqeqeq */\n\t\t\treturn a == document ? -1 :\n\t\t\t\tb == document ? 1 :\n\t\t\t\t/* eslint-enable eqeqeq */\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( ( cur = cur.parentNode ) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( ( cur = cur.parentNode ) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[ i ] === bp[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[ i ], bp[ i ] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t/* eslint-disable eqeqeq */\n\t\t\tap[ i ] == preferredDoc ? -1 :\n\t\t\tbp[ i ] == preferredDoc ? 1 :\n\t\t\t/* eslint-enable eqeqeq */\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\tsetDocument( elem );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!nonnativeSelectorCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\n\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t// fragment in IE 9\n\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch ( e ) {\n\t\t\tnonnativeSelectorCache( expr, true );\n\t\t}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( context.ownerDocument || context ) != document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( elem.ownerDocument || elem ) != document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t( val = elem.getAttributeNode( name ) ) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn ( sel + \"\" ).replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( ( node = elem[ i++ ] ) ) {\n\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[ 1 ] = match[ 1 ].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[ 3 ] = ( match[ 3 ] || match[ 4 ] ||\n\t\t\t\tmatch[ 5 ] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[ 2 ] === \"~=\" ) {\n\t\t\t\tmatch[ 3 ] = \" \" + match[ 3 ] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[ 1 ] = match[ 1 ].toLowerCase();\n\n\t\t\tif ( match[ 1 ].slice( 0, 3 ) === \"nth\" ) {\n\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[ 3 ] ) {\n\t\t\t\t\tSizzle.error( match[ 0 ] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[ 4 ] = +( match[ 4 ] ?\n\t\t\t\t\tmatch[ 5 ] + ( match[ 6 ] || 1 ) :\n\t\t\t\t\t2 * ( match[ 3 ] === \"even\" || match[ 3 ] === \"odd\" ) );\n\t\t\t\tmatch[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === \"odd\" );\n\n\t\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[ 3 ] ) {\n\t\t\t\tSizzle.error( match[ 0 ] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[ 6 ] && match[ 2 ];\n\n\t\t\tif ( matchExpr[ \"CHILD\" ].test( match[ 0 ] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[ 3 ] ) {\n\t\t\t\tmatch[ 2 ] = match[ 4 ] || match[ 5 ] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t( excess = tokenize( unquoted, true ) ) &&\n\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t( excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length ) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[ 0 ] = match[ 0 ].slice( 0, excess );\n\t\t\t\tmatch[ 2 ] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() {\n\t\t\t\t\treturn true;\n\t\t\t\t} :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t( pattern = new RegExp( \"(^|\" + whitespace +\n\t\t\t\t\t\")\" + className + \"(\" + whitespace + \"|$)\" ) ) && classCache(\n\t\t\t\t\t\tclassName, function( elem ) {\n\t\t\t\t\t\t\treturn pattern.test(\n\t\t\t\t\t\t\t\ttypeof elem.className === \"string\" && elem.className ||\n\t\t\t\t\t\t\t\ttypeof elem.getAttribute !== \"undefined\" &&\n\t\t\t\t\t\t\t\t\telem.getAttribute( \"class\" ) ||\n\t\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t\t\t);\n\t\t\t\t} );\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\t/* eslint-disable max-len */\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t\t/* eslint-enable max-len */\n\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, _argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( ( node = node[ dir ] ) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || ( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || ( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction( function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[ i ] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[ i ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t} ) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction( function( selector ) {\n\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction( function( seed, matches, _context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\t\t\t\t\tseed[ i ] = !( matches[ i ] = elem );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} ) :\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tinput[ 0 ] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[ 0 ] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t} ),\n\n\t\t\"has\": markFunction( function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t} ),\n\n\t\t\"contains\": markFunction( function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t} ),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test( lang || \"\" ) ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( ( elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute( \"xml:lang\" ) || elem.getAttribute( \"lang\" ) ) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t} ),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement &&\n\t\t\t\t( !document.hasFocus || document.hasFocus() ) &&\n\t\t\t\t!!( elem.type || elem.href || ~elem.tabIndex );\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn ( nodeName === \"input\" && !!elem.checked ) ||\n\t\t\t\t( nodeName === \"option\" && !!elem.selected );\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[ \"empty\" ]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( ( attr = elem.getAttribute( \"type\" ) ) == null ||\n\t\t\t\t\tattr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo( function() {\n\t\t\treturn [ 0 ];\n\t\t} ),\n\n\t\t\"last\": createPositionalPseudo( function( _matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t} ),\n\n\t\t\"eq\": createPositionalPseudo( function( _matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t} ),\n\n\t\t\"even\": createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"odd\": createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"lt\": createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ?\n\t\t\t\targument + length :\n\t\t\t\targument > length ?\n\t\t\t\t\tlength :\n\t\t\t\t\targument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"gt\": createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} )\n\t}\n};\n\nExpr.pseudos[ \"nth\" ] = Expr.pseudos[ \"eq\" ];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || ( match = rcomma.exec( soFar ) ) ) {\n\t\t\tif ( match ) {\n\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[ 0 ].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( ( tokens = [] ) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( ( match = rcombinators.exec( soFar ) ) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push( {\n\t\t\t\tvalue: matched,\n\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[ 0 ].replace( rtrim, \" \" )\n\t\t\t} );\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||\n\t\t\t\t( match = preFilters[ type ]( match ) ) ) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push( {\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t} );\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[ i ].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || ( elem[ expando ] = {} );\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] ||\n\t\t\t\t\t\t\t( outerCache[ elem.uniqueID ] = {} );\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( ( oldCache = uniqueCache[ key ] ) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn ( newCache[ 2 ] = oldCache[ 2 ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[ i ]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[ 0 ];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[ i ], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction( function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts(\n\t\t\t\tselector || \"*\",\n\t\t\t\tcontext.nodeType ? [ context ] : context,\n\t\t\t\t[]\n\t\t\t),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( ( elem = temp[ i ] ) ) {\n\t\t\t\t\tmatcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) ) {\n\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( ( matcherIn[ i ] = elem ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, ( matcherOut = [] ), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) &&\n\t\t\t\t\t\t( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {\n\n\t\t\t\t\t\tseed[ temp ] = !( results[ temp ] = elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t} );\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[ 0 ].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[ \" \" ],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t( checkContext = context ).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {\n\t\t\tmatchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[ j ].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\n\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\ttokens\n\t\t\t\t\t\t.slice( 0, i - 1 )\n\t\t\t\t\t\t.concat( { value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" } )\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[ \"TAG\" ]( \"*\", outermost ),\n\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\n\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\toutermostContext = context == document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\n\t\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\tif ( !context && elem.ownerDocument != document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( ( matcher = elementMatchers[ j++ ] ) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml ) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( ( elem = !matcher && elem ) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( ( matcher = setMatchers[ j++ ] ) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !( unmatched[ i ] || setMatched[ i ] ) ) {\n\t\t\t\t\t\t\t\tsetMatched[ i ] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[ i ] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache(\n\t\t\tselector,\n\t\t\tmatcherFromGroupMatchers( elementMatchers, setMatchers )\n\t\t);\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( ( selector = compiled.selector || selector ) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[ 0 ] = match[ 0 ].slice( 0 );\n\t\tif ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === \"ID\" &&\n\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {\n\n\t\t\tcontext = ( Expr.find[ \"ID\" ]( token.matches[ 0 ]\n\t\t\t\t.replace( runescape, funescape ), context ) || [] )[ 0 ];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[ \"needsContext\" ].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[ i ];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ ( type = token.type ) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( ( find = Expr.find[ type ] ) ) {\n\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( ( seed = find(\n\t\t\t\t\ttoken.matches[ 0 ].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext\n\t\t\t\t) ) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split( \"\" ).sort( sortOrder ).join( \"\" ) === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert( function( el ) {\n\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement( \"fieldset\" ) ) & 1;\n} );\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert( function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute( \"href\" ) === \"#\";\n} ) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t} );\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert( function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n} ) ) {\n\taddHandle( \"value\", function( elem, _name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t} );\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert( function( el ) {\n\treturn el.getAttribute( \"disabled\" ) == null;\n} ) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t( val = elem.getAttributeNode( name ) ) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\t\tnull;\n\t\t}\n\t} );\n}\n\nreturn Sizzle;\n\n} )( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\n\n\nfunction nodeName( elem, name ) {\n\n  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n};\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\tif ( elem.contentDocument != null &&\n\n\t\t\t// Support: IE 11+\n\t\t\t// <object> elements with no `data` attribute has an object\n\t\t\t// `contentDocument` with a `null` prototype.\n\t\t\tgetProto( elem.contentDocument ) ) {\n\n\t\t\treturn elem.contentDocument;\n\t\t}\n\n\t\t// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n\t\t// Treat the template element as a regular one in browsers that\n\t\t// don't support it.\n\t\tif ( nodeName( elem, \"template\" ) ) {\n\t\t\telem = elem.content || elem;\n\t\t}\n\n\t\treturn jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( _i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// rejected_handlers.disable\n\t\t\t\t\t// fulfilled_handlers.disable\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n\n\t\t\t\t\t// progress_handlers.lock\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the master Deferred\n\t\t\tmaster = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tmaster.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( master.state() === \"pending\" ||\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn master.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), master.reject );\n\t\t}\n\n\t\treturn master.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( toType( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, _key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\tvalue :\n\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\n\n\n// Matches dashed string for camelizing\nvar rmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g;\n\n// Used by camelCase as callback to replace()\nfunction fcamelCase( _all, letter ) {\n\treturn letter.toUpperCase();\n}\n\n// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (#9572)\nfunction camelCase( string ) {\n\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n}\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar documentElement = document.documentElement;\n\n\n\n\tvar isAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem );\n\t\t},\n\t\tcomposed = { composed: true };\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n\t// Check attachment across shadow DOM boundaries when possible (gh-3504)\n\t// Support: iOS 10.0-10.2 only\n\t// Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n\t// leading to errors. We need to check for `getRootNode`.\n\tif ( documentElement.getRootNode ) {\n\t\tisAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem ) ||\n\t\t\t\telem.getRootNode( composed ) === elem.ownerDocument;\n\t\t};\n\t}\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tisAttached( elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted, scale,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = elem.nodeType &&\n\t\t\t( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Support: Firefox <=54\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n\t\tinitial = initial / 2;\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\twhile ( maxIterations-- ) {\n\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n\t\t\t\tmaxIterations = 0;\n\t\t\t}\n\t\t\tinitialInUnit = initialInUnit / scale;\n\n\t\t}\n\n\t\tinitialInUnit = initialInUnit * 2;\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i );\n\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n\n\t// Support: IE <=9 only\n\t// IE <=9 replaces <option> tags with their contents when inserted outside of\n\t// the select element.\n\tdiv.innerHTML = \"<option></option>\";\n\tsupport.option = !!div.lastChild;\n} )();\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n// Support: IE <=9 only\nif ( !support.option ) {\n\twrapMap.optgroup = wrapMap.option = [ 1, \"<select multiple='multiple'>\", \"</select>\" ];\n}\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, attached, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( toType( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tattached = isAttached( elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( attached ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\nvar\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 - 11+\n// focus() and blur() are asynchronous, except when they are no-op.\n// So expect focus to be synchronous when the element is already active,\n// and blur to be synchronous when the element is not already active.\n// (focus and blur are always synchronous in other supported browsers,\n// this just defines when we can count on it).\nfunction expectSync( elem, type ) {\n\treturn ( elem === safeActiveElement() ) === ( type === \"focus\" );\n}\n\n// Support: IE <=9 only\n// Accessing document.activeElement can throw unexpectedly\n// https://bugs.jquery.com/ticket/13393\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Only attach events to objects that accept data\n\t\tif ( !acceptData( elem ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = Object.create( null );\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\n\t\t\t// Make a writable jQuery.Event from the native event object\n\t\t\tevent = jQuery.event.fix( nativeEvent ),\n\n\t\t\thandlers = (\n\t\t\t\t\tdataPriv.get( this, \"events\" ) || Object.create( null )\n\t\t\t\t)[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// If the event is namespaced, then each handler is only invoked if it is\n\t\t\t\t// specially universal or its namespaces are a superset of the event's.\n\t\t\t\tif ( !event.rnamespace || handleObj.namespace === false ||\n\t\t\t\t\tevent.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tclick: {\n\n\t\t\t// Utilize native event to ensure correct state for checkable inputs\n\t\t\tsetup: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Claim the first handler\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\t// dataPriv.set( el, \"click\", ... )\n\t\t\t\t\tleverageNative( el, \"click\", returnTrue );\n\t\t\t\t}\n\n\t\t\t\t// Return false to allow normal processing in the caller\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\ttrigger: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Force setup before triggering a click\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\tleverageNative( el, \"click\" );\n\t\t\t\t}\n\n\t\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, suppress native .click() on links\n\t\t\t// Also prevent it if we're currently inside a leveraged native-event stack\n\t\t\t_default: function( event ) {\n\t\t\t\tvar target = event.target;\n\t\t\t\treturn rcheckableType.test( target.type ) &&\n\t\t\t\t\ttarget.click && nodeName( target, \"input\" ) &&\n\t\t\t\t\tdataPriv.get( target, \"click\" ) ||\n\t\t\t\t\tnodeName( target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Ensure the presence of an event listener that handles manually-triggered\n// synthetic events by interrupting progress until reinvoked in response to\n// *native* events that it fires directly, ensuring that state changes have\n// already occurred before other listeners are invoked.\nfunction leverageNative( el, type, expectSync ) {\n\n\t// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\n\tif ( !expectSync ) {\n\t\tif ( dataPriv.get( el, type ) === undefined ) {\n\t\t\tjQuery.event.add( el, type, returnTrue );\n\t\t}\n\t\treturn;\n\t}\n\n\t// Register the controller as a special universal handler for all event namespaces\n\tdataPriv.set( el, type, false );\n\tjQuery.event.add( el, type, {\n\t\tnamespace: false,\n\t\thandler: function( event ) {\n\t\t\tvar notAsync, result,\n\t\t\t\tsaved = dataPriv.get( this, type );\n\n\t\t\tif ( ( event.isTrigger & 1 ) && this[ type ] ) {\n\n\t\t\t\t// Interrupt processing of the outer synthetic .trigger()ed event\n\t\t\t\t// Saved data should be false in such cases, but might be a leftover capture object\n\t\t\t\t// from an async native handler (gh-4350)\n\t\t\t\tif ( !saved.length ) {\n\n\t\t\t\t\t// Store arguments for use when handling the inner native event\n\t\t\t\t\t// There will always be at least one argument (an event object), so this array\n\t\t\t\t\t// will not be confused with a leftover capture object.\n\t\t\t\t\tsaved = slice.call( arguments );\n\t\t\t\t\tdataPriv.set( this, type, saved );\n\n\t\t\t\t\t// Trigger the native event and capture its result\n\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t// focus() and blur() are asynchronous\n\t\t\t\t\tnotAsync = expectSync( this, type );\n\t\t\t\t\tthis[ type ]();\n\t\t\t\t\tresult = dataPriv.get( this, type );\n\t\t\t\t\tif ( saved !== result || notAsync ) {\n\t\t\t\t\t\tdataPriv.set( this, type, false );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = {};\n\t\t\t\t\t}\n\t\t\t\t\tif ( saved !== result ) {\n\n\t\t\t\t\t\t// Cancel the outer synthetic event\n\t\t\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\treturn result.value;\n\t\t\t\t\t}\n\n\t\t\t\t// If this is an inner synthetic event for an event with a bubbling surrogate\n\t\t\t\t// (focus or blur), assume that the surrogate already propagated from triggering the\n\t\t\t\t// native event and prevent that from happening again here.\n\t\t\t\t// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n\t\t\t\t// bubbling surrogate propagates *after* the non-bubbling base), but that seems\n\t\t\t\t// less bad than duplication.\n\t\t\t\t} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\n\t\t\t// If this is a native event triggered above, everything is now in order\n\t\t\t// Fire an inner synthetic event with the original arguments\n\t\t\t} else if ( saved.length ) {\n\n\t\t\t\t// ...and capture the result\n\t\t\t\tdataPriv.set( this, type, {\n\t\t\t\t\tvalue: jQuery.event.trigger(\n\n\t\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t\t// Extend with the prototype to reset the above stopImmediatePropagation()\n\t\t\t\t\t\tjQuery.extend( saved[ 0 ], jQuery.Event.prototype ),\n\t\t\t\t\t\tsaved.slice( 1 ),\n\t\t\t\t\t\tthis\n\t\t\t\t\t)\n\t\t\t\t} );\n\n\t\t\t\t// Abort handling of the native event\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t}\n\t\t}\n\t} );\n}\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (#504, #13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || Date.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcode: true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\n\twhich: function( event ) {\n\t\tvar button = event.button;\n\n\t\t// Add which for key events\n\t\tif ( event.which == null && rkeyEvent.test( event.type ) ) {\n\t\t\treturn event.charCode != null ? event.charCode : event.keyCode;\n\t\t}\n\n\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\tif ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {\n\t\t\tif ( button & 1 ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ( button & 2 ) {\n\t\t\t\treturn 3;\n\t\t\t}\n\n\t\t\tif ( button & 4 ) {\n\t\t\t\treturn 2;\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn event.which;\n\t}\n}, jQuery.event.addProp );\n\njQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( type, delegateType ) {\n\tjQuery.event.special[ type ] = {\n\n\t\t// Utilize native event if possible so blur/focus sequence is correct\n\t\tsetup: function() {\n\n\t\t\t// Claim the first handler\n\t\t\t// dataPriv.set( this, \"focus\", ... )\n\t\t\t// dataPriv.set( this, \"blur\", ... )\n\t\t\tleverageNative( this, type, expectSync );\n\n\t\t\t// Return false to allow normal processing in the caller\n\t\t\treturn false;\n\t\t},\n\t\ttrigger: function() {\n\n\t\t\t// Force setup before trigger\n\t\t\tleverageNative( this, type );\n\n\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\treturn true;\n\t\t},\n\n\t\tdelegateType: delegateType\n\t};\n} );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.get( src );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdataPriv.remove( dest, \"handle events\" );\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = flat( args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl && !node.noModule ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src, {\n\t\t\t\t\t\t\t\t\tnonce: node.nonce || node.getAttribute( \"nonce\" )\n\t\t\t\t\t\t\t\t}, doc );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), node, doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && isAttached( node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html;\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = isAttached( elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar swap = function( elem, options, callback ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.call( elem );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\nvar rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\n\t\t\t\"margin-top:1px;padding:0;border:0\";\n\t\tdiv.style.cssText =\n\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"width:60%;top:1%\";\n\t\tdocumentElement.appendChild( container ).appendChild( div );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.right = \"60%\";\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n\n\t\t// Support: IE 9 - 11 only\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n\n\t\t// Support: IE 9 only\n\t\t// Detect overflow:scroll screwiness (gh-3699)\n\t\t// Support: Chrome <=64\n\t\t// Don't get tricked when zoom affects offsetWidth (gh-4029)\n\t\tdiv.style.position = \"absolute\";\n\t\tscrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tfunction roundPixelMeasures( measure ) {\n\t\treturn Math.round( parseFloat( measure ) );\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n\t\treliableTrDimensionsVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tjQuery.extend( support, {\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelBoxStyles: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelBoxStylesVal;\n\t\t},\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\tscrollboxSize: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn scrollboxSizeVal;\n\t\t},\n\n\t\t// Support: IE 9 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Behavior in IE 9 is more subtle than in newer versions & it passes\n\t\t// some versions of this test; make sure not to make it pass there!\n\t\treliableTrDimensions: function() {\n\t\t\tvar table, tr, trChild, trStyle;\n\t\t\tif ( reliableTrDimensionsVal == null ) {\n\t\t\t\ttable = document.createElement( \"table\" );\n\t\t\t\ttr = document.createElement( \"tr\" );\n\t\t\t\ttrChild = document.createElement( \"div\" );\n\n\t\t\t\ttable.style.cssText = \"position:absolute;left:-11111px\";\n\t\t\t\ttr.style.height = \"1px\";\n\t\t\t\ttrChild.style.height = \"9px\";\n\n\t\t\t\tdocumentElement\n\t\t\t\t\t.appendChild( table )\n\t\t\t\t\t.appendChild( tr )\n\t\t\t\t\t.appendChild( trChild );\n\n\t\t\t\ttrStyle = window.getComputedStyle( tr );\n\t\t\t\treliableTrDimensionsVal = parseInt( trStyle.height ) > 3;\n\n\t\t\t\tdocumentElement.removeChild( table );\n\t\t\t}\n\t\t\treturn reliableTrDimensionsVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, #12537)\n\t//   .css('--customProperty) (#3144)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( ret === \"\" && !isAttached( elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar cssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style,\n\tvendorProps = {};\n\n// Return a vendor-prefixed property or undefined\nfunction vendorPropName( name ) {\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a potentially-mapped jQuery.cssProps or vendor prefixed property\nfunction finalPropName( name ) {\n\tvar final = jQuery.cssProps[ name ] || vendorProps[ name ];\n\n\tif ( final ) {\n\t\treturn final;\n\t}\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\treturn vendorProps[ name ] = vendorPropName( name ) || name;\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\trcustomProp = /^--/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t};\n\nfunction setPositiveNumber( _elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n\tvar i = dimension === \"width\" ? 1 : 0,\n\t\textra = 0,\n\t\tdelta = 0;\n\n\t// Adjustment may not be necessary\n\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\treturn 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin\n\t\tif ( box === \"margin\" ) {\n\t\t\tdelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\t\tif ( !isBorderBox ) {\n\n\t\t\t// Add padding\n\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// For \"border\" or \"margin\", add border\n\t\t\tif ( box !== \"padding\" ) {\n\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\n\t\t\t// But still keep track of it otherwise\n\t\t\t} else {\n\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\n\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n\t\t// \"padding\" or \"margin\"\n\t\t} else {\n\n\t\t\t// For \"content\", subtract padding\n\t\t\tif ( box === \"content\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// For \"content\" or \"padding\", subtract border\n\t\t\tif ( box !== \"margin\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\n\tif ( !isBorderBox && computedVal >= 0 ) {\n\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\n\t\tdelta += Math.max( 0, Math.ceil(\n\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\tcomputedVal -\n\t\t\tdelta -\n\t\t\textra -\n\t\t\t0.5\n\n\t\t// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\n\t\t// Use an explicit zero to avoid NaN (gh-3964)\n\t\t) ) || 0;\n\t}\n\n\treturn delta;\n}\n\nfunction getWidthOrHeight( elem, dimension, extra ) {\n\n\t// Start with computed style\n\tvar styles = getStyles( elem ),\n\n\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n\t\t// Fake content-box until we know it's needed to know the true value.\n\t\tboxSizingNeeded = !support.boxSizingReliable() || extra,\n\t\tisBorderBox = boxSizingNeeded &&\n\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\tvalueIsBorderBox = isBorderBox,\n\n\t\tval = curCSS( elem, dimension, styles ),\n\t\toffsetProp = \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );\n\n\t// Support: Firefox <=54\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n\tif ( rnumnonpx.test( val ) ) {\n\t\tif ( !extra ) {\n\t\t\treturn val;\n\t\t}\n\t\tval = \"auto\";\n\t}\n\n\n\t// Support: IE 9 - 11 only\n\t// Use offsetWidth/offsetHeight for when box sizing is unreliable.\n\t// In those cases, the computed value can be trusted to be border-box.\n\tif ( ( !support.boxSizingReliable() && isBorderBox ||\n\n\t\t// Support: IE 10 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Interestingly, in some cases IE 9 doesn't suffer from this issue.\n\t\t!support.reliableTrDimensions() && nodeName( elem, \"tr\" ) ||\n\n\t\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n\t\t// This happens for inline elements with no explicit setting (gh-3571)\n\t\tval === \"auto\" ||\n\n\t\t// Support: Android <=4.1 - 4.3 only\n\t\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) &&\n\n\t\t// Make sure the element is visible & connected\n\t\telem.getClientRects().length ) {\n\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t\t// Where available, offsetWidth/offsetHeight approximate border box dimensions.\n\t\t// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n\t\t// retrieved value as a content box dimension.\n\t\tvalueIsBorderBox = offsetProp in elem;\n\t\tif ( valueIsBorderBox ) {\n\t\t\tval = elem[ offsetProp ];\n\t\t}\n\t}\n\n\t// Normalize \"\" and auto\n\tval = parseFloat( val ) || 0;\n\n\t// Adjust for the element's box model\n\treturn ( val +\n\t\tboxModelAdjustment(\n\t\t\telem,\n\t\t\tdimension,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles,\n\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n\t\t\tval\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"gridArea\": true,\n\t\t\"gridColumn\": true,\n\t\t\"gridColumnEnd\": true,\n\t\t\"gridColumnStart\": true,\n\t\t\"gridRow\": true,\n\t\t\"gridRowEnd\": true,\n\t\t\"gridRowStart\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\t// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n\t\t\t// \"px\" to a few hardcoded values.\n\t\t\tif ( type === \"number\" && !isCustomProp ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( _i, dimension ) {\n\tjQuery.cssHooks[ dimension ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = getStyles( elem ),\n\n\t\t\t\t// Only read styles.position if the test has a chance to fail\n\t\t\t\t// to avoid forcing a reflow.\n\t\t\t\tscrollboxSizeBuggy = !support.scrollboxSize() &&\n\t\t\t\t\tstyles.position === \"absolute\",\n\n\t\t\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n\t\t\t\tboxSizingNeeded = scrollboxSizeBuggy || extra,\n\t\t\t\tisBorderBox = boxSizingNeeded &&\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\tsubtract = extra ?\n\t\t\t\t\tboxModelAdjustment(\n\t\t\t\t\t\telem,\n\t\t\t\t\t\tdimension,\n\t\t\t\t\t\textra,\n\t\t\t\t\t\tisBorderBox,\n\t\t\t\t\t\tstyles\n\t\t\t\t\t) :\n\t\t\t\t\t0;\n\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n\t\t\t// faking a content-box to get border and padding (gh-3699)\n\t\t\tif ( isBorderBox && scrollboxSizeBuggy ) {\n\t\t\t\tsubtract -= Math.ceil(\n\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\n\t\t\t\t\t0.5\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ dimension ] = value;\n\t\t\t\tvalue = jQuery.css( elem, dimension );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( prefix !== \"margin\" ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 && (\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ||\n\t\t\t\t\ttween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = Date.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n\t\t// the overflowX value there.\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tresult.stop.bind( result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tisFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( _i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = Date.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( _i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value,\n\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\n\n\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( isValidValue ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = classesToArray( value );\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\tstopPropagationCallback = function( e ) {\n\t\te.stopPropagation();\n\t};\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = lastElement = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tlastElement = cur;\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = (\n\t\t\t\t\tdataPriv.get( cur, \"events\" ) || Object.create( null )\n\t\t\t\t)[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\telem[ type ]();\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\n\t\t\t\t// Handle: regular nodes (via `this.ownerDocument`), window\n\t\t\t\t// (via `this.document`) & document (via `this`).\n\t\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = { guid: Date.now() };\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && toType( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\tif ( a == null ) {\n\t\treturn \"\";\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} )\n\t\t.filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} )\n\t\t.map( function( _i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\toriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() + \" \" ] =\n\t\t\t\t\t\t\t\t\t( responseHeaders[ match[ 1 ].toLowerCase() + \" \" ] || [] )\n\t\t\t\t\t\t\t\t\t\t.concat( match[ 2 ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() + \" \" ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match.join( \", \" );\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available and should be processed, append data to url\n\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce.guid++ ) +\n\t\t\t\t\tuncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Use a noop converter for missing script\n\t\t\tif ( !isSuccess && jQuery.inArray( \"script\", s.dataTypes ) > -1 ) {\n\t\t\t\ts.converters[ \"text script\" ] = function() {};\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( _i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\njQuery.ajaxPrefilter( function( s ) {\n\tvar i;\n\tfor ( i in s.headers ) {\n\t\tif ( i.toLowerCase() === \"content-type\" ) {\n\t\t\ts.contentType = s.headers[ i ] || \"\";\n\t\t}\n\t}\n} );\n\n\njQuery._evalUrl = function( url, options, doc ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\n\t\t// Only evaluate the response if it is successful (gh-4126)\n\t\t// dataFilter is not invoked for failure responses, so using it instead\n\t\t// of the default converter is kludgy but it works.\n\t\tconverters: {\n\t\t\t\"text script\": function() {}\n\t\t},\n\t\tdataFilter: function( response ) {\n\t\t\tjQuery.globalEval( response, options, doc );\n\t\t}\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar htmlIsFunction = isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain or forced-by-attrs requests\n\tif ( s.crossDomain || s.scriptAttrs ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" )\n\t\t\t\t\t.attr( s.scriptAttrs || {} )\n\t\t\t\t\t.prop( { charset: s.scriptCharset, src: s.url } )\n\t\t\t\t\t.on( \"load error\", callback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce.guid++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tif ( typeof props.top === \"number\" ) {\n\t\t\t\tprops.top += \"px\";\n\t\t\t}\n\t\t\tif ( typeof props.left === \"number\" ) {\n\t\t\t\tprops.left += \"px\";\n\t\t\t}\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\n\t// offset() relates an element's border box to the document origin\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\t\trect = elem.getBoundingClientRect();\n\t\twin = elem.ownerDocument.defaultView;\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset,\n\t\t\tleft: rect.left + win.pageXOffset\n\t\t};\n\t},\n\n\t// position() relates an element's margin box to its offset parent's padding box\n\t// This corresponds to the behavior of CSS absolute positioning\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset, doc,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\toffset = this.offset();\n\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n\t\t\t// when a statically positioned element is identified\n\t\t\tdoc = elem.ownerDocument;\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n\t\t\twhile ( offsetParent &&\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\n\t\t\t\toffsetParent = offsetParent.parentNode;\n\t\t\t}\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\n\t\t\t}\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( _i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n\t\tfunction( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( _i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t},\n\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\njQuery.each( ( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( _i, name ) {\n\n\t\t// Handle event binding\n\t\tjQuery.fn[ name ] = function( data, fn ) {\n\t\t\treturn arguments.length > 0 ?\n\t\t\t\tthis.on( name, null, data, fn ) :\n\t\t\t\tthis.trigger( name );\n\t\t};\n\t} );\n\n\n\n\n// Support: Android <=4.0 only\n// Make sure we trim BOM and NBSP\nvar rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\n// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy = function( fn, context ) {\n\tvar tmp, args, proxy;\n\n\tif ( typeof context === \"string\" ) {\n\t\ttmp = fn[ context ];\n\t\tcontext = fn;\n\t\tfn = tmp;\n\t}\n\n\t// Quick check to determine if target is callable, in the spec\n\t// this throws a TypeError, but we will just return undefined.\n\tif ( !isFunction( fn ) ) {\n\t\treturn undefined;\n\t}\n\n\t// Simulated bind\n\targs = slice.call( arguments, 2 );\n\tproxy = function() {\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t};\n\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\treturn proxy;\n};\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\njQuery.isFunction = isFunction;\njQuery.isWindow = isWindow;\njQuery.camelCase = camelCase;\njQuery.type = toType;\n\njQuery.now = Date.now;\n\njQuery.isNumeric = function( obj ) {\n\n\t// As of jQuery 3.0, isNumeric is limited to\n\t// strings and numbers (primitives or objects)\n\t// that can be coerced to finite numbers (gh-2662)\n\tvar type = jQuery.type( obj );\n\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t!isNaN( obj - parseFloat( obj ) );\n};\n\njQuery.trim = function( text ) {\n\treturn text == null ?\n\t\t\"\" :\n\t\t( text + \"\" ).replace( rtrim, \"\" );\n};\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\treturn jQuery;\n\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( typeof noGlobal === \"undefined\" ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery/dist/jquery.js\n");

/***/ }),

/***/ "./package/resources/js/website/blazy.js":
/*!***********************************************!*\
  !*** ./package/resources/js/website/blazy.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n  hey, [be]Lazy.js - v1.8.2 - 2016.10.25\n  A fast, small and dependency free lazy load script (https://github.com/dinbror/blazy)\n  (c) Bjoern Klinggaard - @bklinggaard - http://dinbror.dk/blazy\n*/\n;\n\n(function (root, blazy) {\n  if (true) {\n    // AMD. Register bLazy as an anonymous module\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (blazy),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(this, function () {\n  'use strict'; //private vars\n\n  var _source,\n      _viewport,\n      _isRetina,\n      _supportClosest,\n      _attrSrc = 'src',\n      _attrSrcset = 'srcset'; // constructor\n\n\n  return function Blazy(options) {\n    //IE7- fallback for missing querySelectorAll support\n    if (!document.querySelectorAll) {\n      var s = document.createStyleSheet();\n\n      document.querySelectorAll = function (r, c, i, j, a) {\n        a = document.all, c = [], r = r.replace(/\\[for\\b/gi, '[htmlFor').split(',');\n\n        for (i = r.length; i--;) {\n          s.addRule(r[i], 'k:v');\n\n          for (j = a.length; j--;) {\n            a[j].currentStyle.k && c.push(a[j]);\n          }\n\n          s.removeRule(0);\n        }\n\n        return c;\n      };\n    } //options and helper vars\n\n\n    var scope = this;\n    var util = scope._util = {};\n    util.elements = [];\n    util.destroyed = true;\n    scope.options = options || {};\n    scope.options.error = scope.options.error || false;\n    scope.options.offset = scope.options.offset || 100;\n    scope.options.root = scope.options.root || document;\n    scope.options.success = scope.options.success || false;\n    scope.options.selector = scope.options.selector || '.b-lazy';\n    scope.options.separator = scope.options.separator || '|';\n    scope.options.containerClass = scope.options.container;\n    scope.options.container = scope.options.containerClass ? document.querySelectorAll(scope.options.containerClass) : false;\n    scope.options.errorClass = scope.options.errorClass || 'b-error';\n    scope.options.breakpoints = scope.options.breakpoints || false;\n    scope.options.loadInvisible = scope.options.loadInvisible || false;\n    scope.options.successClass = scope.options.successClass || 'b-loaded';\n    scope.options.validateDelay = scope.options.validateDelay || 25;\n    scope.options.saveViewportOffsetDelay = scope.options.saveViewportOffsetDelay || 50;\n    scope.options.srcset = scope.options.srcset || 'data-srcset';\n    scope.options.src = _source = scope.options.src || 'data-src';\n    _supportClosest = Element.prototype.closest;\n    _isRetina = window.devicePixelRatio > 1;\n    _viewport = {};\n    _viewport.top = 0 - scope.options.offset;\n    _viewport.left = 0 - scope.options.offset;\n    /* public functions\n     ************************************/\n\n    scope.revalidate = function () {\n      initialize(scope);\n    };\n\n    scope.load = function (elements, force) {\n      var opt = this.options;\n\n      if (elements && elements.length === undefined) {\n        loadElement(elements, force, opt);\n      } else {\n        each(elements, function (element) {\n          loadElement(element, force, opt);\n        });\n      }\n    };\n\n    scope.destroy = function () {\n      var util = scope._util;\n\n      if (scope.options.container) {\n        each(scope.options.container, function (object) {\n          unbindEvent(object, 'scroll', util.validateT);\n        });\n      }\n\n      unbindEvent(window, 'scroll', util.validateT);\n      unbindEvent(window, 'resize', util.validateT);\n      unbindEvent(window, 'resize', util.saveViewportOffsetT);\n      util.count = 0;\n      util.elements.length = 0;\n      util.destroyed = true;\n    }; //throttle, ensures that we don't call the functions too often\n\n\n    util.validateT = throttle(function () {\n      validate(scope);\n    }, scope.options.validateDelay, scope);\n    util.saveViewportOffsetT = throttle(function () {\n      saveViewportOffset(scope.options.offset);\n    }, scope.options.saveViewportOffsetDelay, scope);\n    saveViewportOffset(scope.options.offset); //handle multi-served image src (obsolete)\n\n    each(scope.options.breakpoints, function (object) {\n      if (object.width >= window.screen.width) {\n        _source = object.src;\n        return false;\n      }\n    }); // start lazy load\n\n    setTimeout(function () {\n      initialize(scope);\n    }); // \"dom ready\" fix\n  };\n  /* Private helper functions\n   ************************************/\n\n  function initialize(self) {\n    var util = self._util; // First we create an array of elements to lazy load\n\n    util.elements = toArray(self.options);\n    util.count = util.elements.length; // Then we bind resize and scroll events if not already binded\n\n    if (util.destroyed) {\n      util.destroyed = false;\n\n      if (self.options.container) {\n        each(self.options.container, function (object) {\n          bindEvent(object, 'scroll', util.validateT);\n        });\n      }\n\n      bindEvent(window, 'resize', util.saveViewportOffsetT);\n      bindEvent(window, 'resize', util.validateT);\n      bindEvent(window, 'scroll', util.validateT);\n    } // And finally, we start to lazy load.\n\n\n    validate(self);\n  }\n\n  function validate(self) {\n    var util = self._util;\n\n    for (var i = 0; i < util.count; i++) {\n      var element = util.elements[i];\n\n      if (elementInView(element, self.options) || hasClass(element, self.options.successClass)) {\n        self.load(element);\n        util.elements.splice(i, 1);\n        util.count--;\n        i--;\n      }\n    }\n\n    if (util.count === 0) {\n      self.destroy();\n    }\n  }\n\n  function elementInView(ele, options) {\n    var rect = ele.getBoundingClientRect();\n\n    if (options.container && _supportClosest) {\n      // Is element inside a container?\n      var elementContainer = ele.closest(options.containerClass);\n\n      if (elementContainer) {\n        var containerRect = elementContainer.getBoundingClientRect(); // Is container in view?\n\n        if (inView(containerRect, _viewport)) {\n          var top = containerRect.top - options.offset;\n          var right = containerRect.right + options.offset;\n          var bottom = containerRect.bottom + options.offset;\n          var left = containerRect.left - options.offset;\n          var containerRectWithOffset = {\n            top: top > _viewport.top ? top : _viewport.top,\n            right: right < _viewport.right ? right : _viewport.right,\n            bottom: bottom < _viewport.bottom ? bottom : _viewport.bottom,\n            left: left > _viewport.left ? left : _viewport.left\n          }; // Is element in view of container?\n\n          return inView(rect, containerRectWithOffset);\n        } else {\n          return false;\n        }\n      }\n    }\n\n    return inView(rect, _viewport);\n  }\n\n  function inView(rect, viewport) {\n    // Intersection\n    return rect.right >= viewport.left && rect.bottom >= viewport.top && rect.left <= viewport.right && rect.top <= viewport.bottom;\n  }\n\n  function loadElement(ele, force, options) {\n    // if element is visible, not loaded or forced\n    if (!hasClass(ele, options.successClass) && (force || options.loadInvisible || ele.offsetWidth > 0 && ele.offsetHeight > 0)) {\n      var dataSrc = getAttr(ele, _source) || getAttr(ele, options.src); // fallback to default 'data-src'\n\n      if (dataSrc) {\n        var dataSrcSplitted = dataSrc.split(options.separator);\n        var src = dataSrcSplitted[_isRetina && dataSrcSplitted.length > 1 ? 1 : 0];\n        var srcset = getAttr(ele, options.srcset);\n        var isImage = equal(ele, 'img');\n        var parent = ele.parentNode;\n        var isPicture = parent && equal(parent, 'picture'); // Image or background image\n\n        if (isImage || ele.src === undefined) {\n          var img = new Image(); // using EventListener instead of onerror and onload\n          // due to bug introduced in chrome v50 \n          // (https://productforums.google.com/forum/#!topic/chrome/p51Lk7vnP2o)\n\n          var onErrorHandler = function onErrorHandler() {\n            if (options.error) options.error(ele, \"invalid\");\n            addClass(ele, options.errorClass);\n            unbindEvent(img, 'error', onErrorHandler);\n            unbindEvent(img, 'load', onLoadHandler);\n          };\n\n          var onLoadHandler = function onLoadHandler() {\n            // Is element an image\n            if (isImage) {\n              if (!isPicture) {\n                handleSources(ele, src, srcset);\n              } // or background-image\n\n            } else {\n              ele.style.backgroundImage = 'url(\"' + src + '\")';\n            }\n\n            itemLoaded(ele, options);\n            unbindEvent(img, 'load', onLoadHandler);\n            unbindEvent(img, 'error', onErrorHandler);\n          }; // Picture element\n\n\n          if (isPicture) {\n            img = ele; // Image tag inside picture element wont get preloaded\n\n            each(parent.getElementsByTagName('source'), function (source) {\n              handleSource(source, _attrSrcset, options.srcset);\n            });\n          }\n\n          bindEvent(img, 'error', onErrorHandler);\n          bindEvent(img, 'load', onLoadHandler);\n          handleSources(img, src, srcset); // Preload\n        } else {\n          // An item with src like iframe, unity games, simpel video etc\n          ele.src = src;\n          itemLoaded(ele, options);\n        }\n      } else {\n        // video with child source\n        if (equal(ele, 'video')) {\n          each(ele.getElementsByTagName('source'), function (source) {\n            handleSource(source, _attrSrc, options.src);\n          });\n          ele.load();\n          itemLoaded(ele, options);\n        } else {\n          if (options.error) options.error(ele, \"missing\");\n          addClass(ele, options.errorClass);\n        }\n      }\n    }\n  }\n\n  function itemLoaded(ele, options) {\n    addClass(ele, options.successClass);\n    if (options.success) options.success(ele); // cleanup markup, remove data source attributes\n\n    removeAttr(ele, options.src);\n    removeAttr(ele, options.srcset);\n    each(options.breakpoints, function (object) {\n      removeAttr(ele, object.src);\n    });\n  }\n\n  function handleSource(ele, attr, dataAttr) {\n    var dataSrc = getAttr(ele, dataAttr);\n\n    if (dataSrc) {\n      setAttr(ele, attr, dataSrc);\n      removeAttr(ele, dataAttr);\n    }\n  }\n\n  function handleSources(ele, src, srcset) {\n    if (srcset) {\n      setAttr(ele, _attrSrcset, srcset); //srcset\n    }\n\n    ele.src = src; //src \n  }\n\n  function setAttr(ele, attr, value) {\n    ele.setAttribute(attr, value);\n  }\n\n  function getAttr(ele, attr) {\n    return ele.getAttribute(attr);\n  }\n\n  function removeAttr(ele, attr) {\n    ele.removeAttribute(attr);\n  }\n\n  function equal(ele, str) {\n    return ele.nodeName.toLowerCase() === str;\n  }\n\n  function hasClass(ele, className) {\n    return (' ' + ele.className + ' ').indexOf(' ' + className + ' ') !== -1;\n  }\n\n  function addClass(ele, className) {\n    if (!hasClass(ele, className)) {\n      ele.className += ' ' + className;\n    }\n  }\n\n  function toArray(options) {\n    var array = [];\n    var nodelist = options.root.querySelectorAll(options.selector);\n\n    for (var i = nodelist.length; i--; array.unshift(nodelist[i])) {}\n\n    return array;\n  }\n\n  function saveViewportOffset(offset) {\n    _viewport.bottom = (window.innerHeight || document.documentElement.clientHeight) + offset;\n    _viewport.right = (window.innerWidth || document.documentElement.clientWidth) + offset;\n  }\n\n  function bindEvent(ele, type, fn) {\n    if (ele.attachEvent) {\n      ele.attachEvent && ele.attachEvent('on' + type, fn);\n    } else {\n      ele.addEventListener(type, fn, {\n        capture: false,\n        passive: true\n      });\n    }\n  }\n\n  function unbindEvent(ele, type, fn) {\n    if (ele.detachEvent) {\n      ele.detachEvent && ele.detachEvent('on' + type, fn);\n    } else {\n      ele.removeEventListener(type, fn, {\n        capture: false,\n        passive: true\n      });\n    }\n  }\n\n  function each(object, fn) {\n    if (object && fn) {\n      var l = object.length;\n\n      for (var i = 0; i < l && fn(object[i], i) !== false; i++) {}\n    }\n  }\n\n  function throttle(fn, minDelay, scope) {\n    var lastCall = 0;\n    return function () {\n      var now = +new Date();\n\n      if (now - lastCall < minDelay) {\n        return;\n      }\n\n      lastCall = now;\n      fn.apply(scope, arguments);\n    };\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./package/resources/js/website/blazy.js\n");

/***/ }),

/***/ "./package/resources/js/website/cs-select.js":
/*!***************************************************!*\
  !*** ./package/resources/js/website/cs-select.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * classie - class helper functions\n * from bonzo https://github.com/ded/bonzo\n * \n * classie.has( elem, 'my-class' ) -> true/false\n * classie.add( elem, 'my-new-class' )\n * classie.remove( elem, 'my-unwanted-class' )\n * classie.toggle( elem, 'my-class' )\n */\n\n/*jshint browser: true, strict: true, undef: true */\n\n/*global define: false */\n(function (window) {\n  'use strict'; // class helper functions from bonzo https://github.com/ded/bonzo\n\n  function classReg(className) {\n    return new RegExp(\"(^|\\\\s+)\" + className + \"(\\\\s+|$)\");\n  } // classList support for class management\n  // altho to be fair, the api sucks because it won't accept multiple classes at once\n\n\n  var hasClass, addClass, removeClass;\n\n  if ('classList' in document.documentElement) {\n    hasClass = function hasClass(elem, c) {\n      return elem.classList.contains(c);\n    };\n\n    addClass = function addClass(elem, c) {\n      elem.classList.add(c);\n    };\n\n    removeClass = function removeClass(elem, c) {\n      elem.classList.remove(c);\n    };\n  } else {\n    hasClass = function hasClass(elem, c) {\n      return classReg(c).test(elem.className);\n    };\n\n    addClass = function addClass(elem, c) {\n      if (!hasClass(elem, c)) {\n        elem.className = elem.className + ' ' + c;\n      }\n    };\n\n    removeClass = function removeClass(elem, c) {\n      elem.className = elem.className.replace(classReg(c), ' ');\n    };\n  }\n\n  function toggleClass(elem, c) {\n    var fn = hasClass(elem, c) ? removeClass : addClass;\n    fn(elem, c);\n  }\n\n  var classie = {\n    // full names\n    hasClass: hasClass,\n    addClass: addClass,\n    removeClass: removeClass,\n    toggleClass: toggleClass,\n    // short names\n    has: hasClass,\n    add: addClass,\n    remove: removeClass,\n    toggle: toggleClass\n  }; // transport\n\n  if (true) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (classie),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window);\n/**\n * csSelect.js v1.0.0\n * http://www.codrops.com\n *\n * Licensed under the MIT license.\n * http://www.opensource.org/licenses/mit-license.php\n * \n * Copyright 2014, Codrops\n * http://www.codrops.com\n */\n\n\n;\n\n(function (window) {\n  'use strict';\n  /**\n   * based on from https://github.com/inuyaksa/jquery.nicescroll/blob/master/jquery.nicescroll.js\n   */\n\n  function hasParent(e, p) {\n    if (!e) return false;\n    var el = e.target || e.srcElement || e || false;\n\n    while (el && el != p) {\n      el = el.parentNode || false;\n    }\n\n    return el !== false;\n  }\n\n  ;\n  /**\n   * extend obj function\n   */\n\n  function extend(a, b) {\n    for (var key in b) {\n      if (b.hasOwnProperty(key)) {\n        a[key] = b[key];\n      }\n    }\n\n    return a;\n  }\n  /**\n   * csSelect function\n   */\n\n\n  function csSelect(el, options) {\n    this.el = el;\n    this.options = extend({}, this.options);\n    extend(this.options, options);\n\n    this._init();\n  }\n  /**\n   * csSelect options\n   */\n\n\n  csSelect.prototype.options = {\n    // if true all the links will open in a new tab.\n    // if we want to be redirected when we click an option, we need to define a data-link attr on the option of the native select element\n    newTab: true,\n    // when opening the select element, the default placeholder (if any) is shown\n    stickyPlaceholder: true,\n    // callback when changing the value\n    onChange: function onChange(val) {\n      return false;\n    }\n  };\n  /**\n   * init function\n   * initialize and cache some vars\n   */\n\n  csSelect.prototype._init = function () {\n    // check if we are using a placeholder for the native select box\n    // we assume the placeholder is disabled and selected by default\n    var selectedOpt = this.el.querySelector('option[selected]');\n    this.hasDefaultPlaceholder = selectedOpt && selectedOpt.disabled; // get selected option (either the first option with attr selected or just the first option)\n\n    this.selectedOpt = selectedOpt || this.el.querySelector('option'); // create structure\n\n    this._createSelectEl(); // all options\n\n\n    this.selOpts = [].slice.call(this.selEl.querySelectorAll('li[data-option]')); // total options\n\n    this.selOptsCount = this.selOpts.length; // current index\n\n    this.current = this.selOpts.indexOf(this.selEl.querySelector('li.cs--selected')) || -1; // placeholder elem\n\n    this.selPlaceholder = this.selEl.querySelector('span.cs--placeholder'); // init events\n\n    this._initEvents();\n  };\n  /**\n   * creates the structure for the select element\n   */\n\n\n  csSelect.prototype._createSelectEl = function () {\n    var self = this,\n        options = '',\n        createOptionHTML = function createOptionHTML(el) {\n      var optclass = '',\n          classes = '',\n          link = '';\n\n      if (el.selectedOpt && !this.foundSelected && !this.hasDefaultPlaceholder) {\n        classes += 'cs--selected ';\n        this.foundSelected = true;\n      } // extra classes\n\n\n      if (el.getAttribute('data-class')) {\n        classes += el.getAttribute('data-class');\n      } // link options\n\n\n      if (el.getAttribute('data-link')) {\n        link = 'data-link=' + el.getAttribute('data-link');\n      }\n\n      if (classes !== '') {\n        optclass = 'class=\"' + classes + '\" ';\n      }\n\n      return '<li ' + optclass + link + ' data-option data-value=\"' + el.value + '\"><span>' + el.textContent + '</span></li>';\n    };\n\n    [].slice.call(this.el.children).forEach(function (el) {\n      if (el.disabled) {\n        return;\n      }\n\n      var tag = el.tagName.toLowerCase();\n\n      if (tag === 'option') {\n        options += createOptionHTML(el);\n      } else if (tag === 'optgroup') {\n        options += '<li class=\"cs--optgroup\"><span>' + el.label + '</span><ul>';\n        [].slice.call(el.children).forEach(function (opt) {\n          options += createOptionHTML(opt);\n        });\n        options += '</ul></li>';\n      }\n    });\n    var opts_el = '<div class=\"cs--options\"><ul>' + options + '</ul></div>';\n    this.selEl = document.createElement('div');\n    this.selEl.className = this.el.className;\n    this.selEl.tabIndex = this.el.tabIndex;\n    this.selEl.innerHTML = '<span class=\"cs--placeholder\">' + this.selectedOpt.textContent + '</span>' + opts_el;\n    this.el.parentNode.appendChild(this.selEl);\n    this.selEl.appendChild(this.el);\n  };\n  /**\n   * initialize the events\n   */\n\n\n  csSelect.prototype._initEvents = function () {\n    var self = this; // open/close select\n\n    this.selPlaceholder.addEventListener('click', function () {\n      self._toggleSelect();\n    }); // clicking the options\n\n    this.selOpts.forEach(function (opt, idx) {\n      opt.addEventListener('click', function () {\n        self.current = idx;\n\n        self._changeOption(); // close select elem\n\n\n        self._toggleSelect();\n      });\n    }); // close the select element if the target it´s not the select element or one of its descendants..\n\n    document.addEventListener('click', function (ev) {\n      var target = ev.target;\n\n      if (self._isOpen() && target !== self.selEl && !hasParent(target, self.selEl)) {\n        self._toggleSelect();\n      }\n    }); // keyboard navigation events\n\n    this.selEl.addEventListener('keydown', function (ev) {\n      var keyCode = ev.keyCode || ev.which;\n\n      switch (keyCode) {\n        // up key\n        case 38:\n          ev.preventDefault();\n\n          self._navigateOpts('prev');\n\n          break;\n        // down key\n\n        case 40:\n          ev.preventDefault();\n\n          self._navigateOpts('next');\n\n          break;\n        // space key\n\n        case 32:\n          ev.preventDefault();\n\n          if (self._isOpen() && typeof self.preSelCurrent != 'undefined' && self.preSelCurrent !== -1) {\n            self._changeOption();\n          }\n\n          self._toggleSelect();\n\n          break;\n        // enter key\n\n        case 13:\n          ev.preventDefault();\n\n          if (self._isOpen() && typeof self.preSelCurrent != 'undefined' && self.preSelCurrent !== -1) {\n            self._changeOption();\n\n            self._toggleSelect();\n          }\n\n          break;\n        // esc key\n\n        case 27:\n          ev.preventDefault();\n\n          if (self._isOpen()) {\n            self._toggleSelect();\n          }\n\n          break;\n      }\n    });\n  };\n  /**\n   * navigate with up/dpwn keys\n   */\n\n\n  csSelect.prototype._navigateOpts = function (dir) {\n    if (!this._isOpen()) {\n      this._toggleSelect();\n    }\n\n    var tmpcurrent = typeof this.preSelCurrent != 'undefined' && this.preSelCurrent !== -1 ? this.preSelCurrent : this.current;\n\n    if (dir === 'prev' && tmpcurrent > 0 || dir === 'next' && tmpcurrent < this.selOptsCount - 1) {\n      // save pre selected current - if we click on option, or press enter, or press space this is going to be the index of the current option\n      this.preSelCurrent = dir === 'next' ? tmpcurrent + 1 : tmpcurrent - 1; // remove focus class if any..\n\n      this._removeFocus(); // add class focus - track which option we are navigating\n\n\n      classie.add(this.selOpts[this.preSelCurrent], 'cs--focus');\n    }\n  };\n  /**\n   * open/close select\n   * when opened show the default placeholder if any\n   */\n\n\n  csSelect.prototype._toggleSelect = function () {\n    // remove focus class if any..\n    this._removeFocus();\n\n    if (this._isOpen()) {\n      if (this.current !== -1) {\n        // update placeholder text\n        this.selPlaceholder.textContent = this.selOpts[this.current].textContent;\n      }\n\n      classie.remove(this.selEl, 'cs--active');\n    } else {\n      if (this.hasDefaultPlaceholder && this.options.stickyPlaceholder) {\n        // everytime we open we wanna see the default placeholder text\n        this.selPlaceholder.textContent = this.selectedOpt.textContent;\n      }\n\n      classie.add(this.selEl, 'cs--active');\n    }\n  };\n  /**\n   * change option - the new value is set\n   */\n\n\n  csSelect.prototype._changeOption = function () {\n    // if pre selected current (if we navigate with the keyboard)...\n    if (typeof this.preSelCurrent != 'undefined' && this.preSelCurrent !== -1) {\n      this.current = this.preSelCurrent;\n      this.preSelCurrent = -1;\n    } // current option\n\n\n    var opt = this.selOpts[this.current]; // update current selected value\n\n    this.selPlaceholder.textContent = opt.textContent; // change native select element´s value\n\n    this.el.value = opt.getAttribute('data-value'); // remove class cs--selected from old selected option and add it to current selected option\n\n    var oldOpt = this.selEl.querySelector('li.cs--selected');\n\n    if (oldOpt) {\n      classie.remove(oldOpt, 'cs--selected');\n    }\n\n    classie.add(opt, 'cs--selected'); // if there´s a link defined\n\n    if (opt.getAttribute('data-link')) {\n      // open in new tab?\n      if (this.options.newTab) {\n        window.open(opt.getAttribute('data-link'), '_blank');\n      } else {\n        window.location = opt.getAttribute('data-link');\n      }\n    } // callback\n\n\n    this.options.onChange(this.el.value);\n  };\n  /**\n   * returns true if select element is opened\n   */\n\n\n  csSelect.prototype._isOpen = function (opt) {\n    return classie.has(this.selEl, 'cs--active');\n  };\n  /**\n   * removes the focus class from the option\n   */\n\n\n  csSelect.prototype._removeFocus = function (opt) {\n    var focusEl = this.selEl.querySelector('li.cs--focus');\n\n    if (focusEl) {\n      classie.remove(focusEl, 'cs--focus');\n    }\n  };\n  /**\n   * add to global namespace\n   */\n\n\n  window.csSelect = csSelect;\n})(window);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./package/resources/js/website/cs-select.js\n");

/***/ }),

/***/ "./package/resources/js/website/lightcase.js":
/*!***************************************************!*\
  !*** ./package/resources/js/website/lightcase.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(jQuery) {function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\r\n * Lightcase - jQuery Plugin\r\n * The smart and flexible Lightbox Plugin.\r\n *\r\n * @author\t\tCornel Boppart <cornel@bopp-art.com>\r\n * @copyright\tAuthor\r\n *\r\n * @version\t\t2.3.6 (20/12/2016)\r\n */\n;\n\n(function ($) {\n  'use strict';\n\n  var _self = {\n    cache: {},\n    support: {},\n    objects: {},\n\n    /**\r\n     * Initializes the plugin\r\n     *\r\n     * @param\t{object}\toptions\r\n     * @return\t{object}\r\n     */\n    init: function init(options) {\n      return this.each(function () {\n        $(this).unbind('click.lightcase').bind('click.lightcase', function (event) {\n          event.preventDefault();\n          $(this).lightcase('start', options);\n        });\n      });\n    },\n\n    /**\r\n     * Starts the plugin\r\n     *\r\n     * @param\t{object}\toptions\r\n     * @return\t{void}\r\n     */\n    start: function start(options) {\n      _self.origin = lightcase.origin = this;\n      _self.settings = lightcase.settings = $.extend(true, {\n        idPrefix: 'lightcase-',\n        classPrefix: 'lightcase-',\n        attrPrefix: 'lc-',\n        transition: 'elastic',\n        transitionIn: null,\n        transitionOut: null,\n        cssTransitions: true,\n        speedIn: 250,\n        speedOut: 250,\n        maxWidth: 800,\n        maxHeight: 500,\n        forceWidth: false,\n        forceHeight: false,\n        liveResize: true,\n        fullScreenModeForMobile: true,\n        mobileMatchExpression: /(iphone|ipod|ipad|android|blackberry|symbian)/,\n        disableShrink: false,\n        shrinkFactor: .75,\n        overlayOpacity: .9,\n        slideshow: false,\n        slideshowAutoStart: true,\n        timeout: 5000,\n        swipe: true,\n        useKeys: true,\n        useCategories: true,\n        navigateEndless: true,\n        closeOnOverlayClick: true,\n        title: null,\n        caption: null,\n        showTitle: true,\n        showCaption: true,\n        showSequenceInfo: true,\n        inline: {\n          width: 'auto',\n          height: 'auto'\n        },\n        ajax: {\n          width: 'auto',\n          height: 'auto',\n          type: 'get',\n          dataType: 'html',\n          data: {}\n        },\n        iframe: {\n          width: 800,\n          height: 500,\n          frameborder: 0\n        },\n        flash: {\n          width: 400,\n          height: 205,\n          wmode: 'transparent'\n        },\n        video: {\n          width: 400,\n          height: 225,\n          poster: '',\n          preload: 'auto',\n          controls: true,\n          autobuffer: true,\n          autoplay: true,\n          loop: false\n        },\n        attr: 'data-rel',\n        href: null,\n        type: null,\n        typeMapping: {\n          'image': 'jpg,jpeg,gif,png,bmp',\n          'flash': 'swf',\n          'video': 'mp4,mov,ogv,ogg,webm',\n          'iframe': 'html,php',\n          'ajax': 'json,txt',\n          'inline': '#'\n        },\n        errorMessage: function errorMessage() {\n          return '<p class=\"' + _self.settings.classPrefix + 'error\">' + _self.settings.labels['errorMessage'] + '</p>';\n        },\n        labels: {\n          'errorMessage': 'Source could not be found...',\n          'sequenceInfo.of': ' of ',\n          'close': 'Close',\n          'navigator.prev': 'Prev',\n          'navigator.next': 'Next',\n          'navigator.play': 'Play',\n          'navigator.pause': 'Pause'\n        },\n        markup: function markup() {\n          $('body').append(_self.objects.overlay = $('<div id=\"' + _self.settings.idPrefix + 'overlay\"></div>'), _self.objects.loading = $('<div id=\"' + _self.settings.idPrefix + 'loading\" class=\"' + _self.settings.classPrefix + 'icon-spin\"></div>'), _self.objects[\"case\"] = $('<div id=\"' + _self.settings.idPrefix + 'case\" aria-hidden=\"true\" role=\"dialog\"></div>'));\n\n          _self.objects[\"case\"].after(_self.objects.nav = $('<div id=\"' + _self.settings.idPrefix + 'nav\"></div>'));\n\n          _self.objects.nav.append(_self.objects.close = $('<a href=\"#\" class=\"' + _self.settings.classPrefix + 'icon-close\"><span>' + _self.settings.labels['close'] + '</span></a>'), _self.objects.prev = $('<a href=\"#\" class=\"' + _self.settings.classPrefix + 'icon-prev\"><span>' + _self.settings.labels['navigator.prev'] + '</span></a>').hide(), _self.objects.next = $('<a href=\"#\" class=\"' + _self.settings.classPrefix + 'icon-next\"><span>' + _self.settings.labels['navigator.next'] + '</span></a>').hide(), _self.objects.play = $('<a href=\"#\" class=\"' + _self.settings.classPrefix + 'icon-play\"><span>' + _self.settings.labels['navigator.play'] + '</span></a>').hide(), _self.objects.pause = $('<a href=\"#\" class=\"' + _self.settings.classPrefix + 'icon-pause\"><span>' + _self.settings.labels['navigator.pause'] + '</span></a>').hide());\n\n          _self.objects[\"case\"].append(_self.objects.content = $('<div id=\"' + _self.settings.idPrefix + 'content\"></div>'), _self.objects.info = $('<div id=\"' + _self.settings.idPrefix + 'info\"></div>'));\n\n          _self.objects.content.append(_self.objects.contentInner = $('<div class=\"' + _self.settings.classPrefix + 'contentInner\"></div>'));\n\n          _self.objects.info.append(_self.objects.sequenceInfo = $('<div id=\"' + _self.settings.idPrefix + 'sequenceInfo\"></div>'), _self.objects.title = $('<h4 id=\"' + _self.settings.idPrefix + 'title\"></h4>'), _self.objects.caption = $('<p id=\"' + _self.settings.idPrefix + 'caption\"></p>'));\n        },\n        onInit: {},\n        onStart: {},\n        onFinish: {},\n        onClose: {},\n        onCleanup: {}\n      }, options, // Load options from data-lc-options attribute\n      _self.origin.data ? _self.origin.data('lc-options') : {}); // Call onInit hook functions\n\n      _self._callHooks(_self.settings.onInit);\n\n      _self.objectData = _self._setObjectData(this);\n\n      _self._cacheScrollPosition();\n\n      _self._watchScrollInteraction();\n\n      _self._addElements();\n\n      _self._open();\n\n      _self.dimensions = _self.getViewportDimensions();\n    },\n\n    /**\r\n     * Getter method for objects\r\n     *\r\n     * @param\t{string}\tname\r\n     * @return\t{object}\r\n     */\n    get: function get(name) {\n      return _self.objects[name];\n    },\n\n    /**\r\n     * Getter method for objectData\r\n     *\r\n     * @return\t{object}\r\n     */\n    getObjectData: function getObjectData() {\n      return _self.objectData;\n    },\n\n    /**\r\n     * Sets the object data\r\n     *\r\n     * @param\t{object}\tobject\r\n     * @return\t{object}\tobjectData\r\n     */\n    _setObjectData: function _setObjectData(object) {\n      var $object = $(object),\n          objectData = {\n        title: _self.settings.title || $object.attr(_self._prefixAttributeName('title')) || $object.attr('title'),\n        caption: _self.settings.caption || $object.attr(_self._prefixAttributeName('caption')) || $object.children('img').attr('alt'),\n        url: _self._determineUrl(),\n        requestType: _self.settings.ajax.type,\n        requestData: _self.settings.ajax.data,\n        requestDataType: _self.settings.ajax.dataType,\n        rel: $object.attr(_self._determineAttributeSelector()),\n        type: _self.settings.type || _self._verifyDataType(_self._determineUrl()),\n        isPartOfSequence: _self._isPartOfSequence($object.attr(_self.settings.attr), ':'),\n        isPartOfSequenceWithSlideshow: _self._isPartOfSequence($object.attr(_self.settings.attr), ':slideshow'),\n        currentIndex: $(_self._determineAttributeSelector()).index($object),\n        sequenceLength: $(_self._determineAttributeSelector()).length\n      }; // Add sequence info to objectData\n\n      objectData.sequenceInfo = objectData.currentIndex + 1 + _self.settings.labels['sequenceInfo.of'] + objectData.sequenceLength; // Add next/prev index\n\n      objectData.prevIndex = objectData.currentIndex - 1;\n      objectData.nextIndex = objectData.currentIndex + 1;\n      return objectData;\n    },\n\n    /**\r\n     * Prefixes a data attribute name with defined name from 'settings.attrPrefix'\r\n     * to ensure more uniqueness for all lightcase related/used attributes.\r\n     *\r\n     * @param\t{string}\tname\r\n     * @return\t{string}\r\n     */\n    _prefixAttributeName: function _prefixAttributeName(name) {\n      return 'data-' + _self.settings.attrPrefix + name;\n    },\n\n    /**\r\n     * Determines the link target considering 'settings.href' and data attributes\r\n     * but also with a fallback to the default 'href' value.\r\n     *\r\n     * @return\t{string}\r\n     */\n    _determineLinkTarget: function _determineLinkTarget() {\n      return _self.settings.href || $(_self.origin).attr(_self._prefixAttributeName('href')) || $(_self.origin).attr('href');\n    },\n\n    /**\r\n     * Determines the attribute selector to use, depending on\r\n     * whether categorized collections are beeing used or not.\r\n     *\r\n     * @return\t{string}\tselector\r\n     */\n    _determineAttributeSelector: function _determineAttributeSelector() {\n      var $origin = $(_self.origin),\n          selector = '';\n\n      if (typeof _self.cache.selector !== 'undefined') {\n        selector = _self.cache.selector;\n      } else if (_self.settings.useCategories === true && $origin.attr(_self._prefixAttributeName('categories'))) {\n        var categories = $origin.attr(_self._prefixAttributeName('categories')).split(' ');\n        $.each(categories, function (index, category) {\n          if (index > 0) {\n            selector += ',';\n          }\n\n          selector += '[' + _self._prefixAttributeName('categories') + '~=\"' + category + '\"]';\n        });\n      } else {\n        selector = '[' + _self.settings.attr + '=\"' + $origin.attr(_self.settings.attr) + '\"]';\n      }\n\n      _self.cache.selector = selector;\n      return selector;\n    },\n\n    /**\r\n     * Determines the correct resource according to the\r\n     * current viewport and density.\r\n     *\r\n     * @return\t{string}\turl\r\n     */\n    _determineUrl: function _determineUrl() {\n      var dataUrl = _self._verifyDataUrl(_self._determineLinkTarget()),\n          width = 0,\n          density = 0,\n          url;\n\n      $.each(dataUrl, function (index, src) {\n        if ( // Check density\n        _self._devicePixelRatio() >= src.density && src.density >= density && // Check viewport width\n        _self._matchMedia()('screen and (min-width:' + src.width + 'px)').matches && src.width >= width) {\n          width = src.width;\n          density = src.density;\n          url = src.url;\n        }\n      });\n      return url;\n    },\n\n    /**\r\n     * Normalizes an url and returns information about the resource path,\r\n     * the viewport width as well as density if defined.\r\n     *\r\n     * @param\t{string}\turl\tPath to resource in format of an url or srcset\r\n     * @return\t{object}\r\n     */\n    _normalizeUrl: function _normalizeUrl(url) {\n      var srcExp = /^\\d+$/;\n      return url.split(',').map(function (str) {\n        var src = {\n          width: 0,\n          density: 0\n        };\n        str.trim().split(/\\s+/).forEach(function (url, i) {\n          if (i === 0) {\n            return src.url = url;\n          }\n\n          var value = url.substring(0, url.length - 1),\n              lastChar = url[url.length - 1],\n              intVal = parseInt(value, 10),\n              floatVal = parseFloat(value);\n\n          if (lastChar === 'w' && srcExp.test(value)) {\n            src.width = intVal;\n          } else if (lastChar === 'h' && srcExp.test(value)) {\n            src.height = intVal;\n          } else if (lastChar === 'x' && !isNaN(floatVal)) {\n            src.density = floatVal;\n          }\n        });\n        return src;\n      });\n    },\n\n    /**\r\n     * Verifies if the link is part of a sequence\r\n     *\r\n     * @param\t{string}\trel\r\n     * @param\t{string}\texpression\r\n     * @return\t{boolean}\r\n     */\n    _isPartOfSequence: function _isPartOfSequence(rel, expression) {\n      var getSimilarLinks = $('[' + _self.settings.attr + '=\"' + rel + '\"]'),\n          regexp = new RegExp(expression);\n      return regexp.test(rel) && getSimilarLinks.length > 1;\n    },\n\n    /**\r\n     * Verifies if the slideshow should be enabled\r\n     *\r\n     * @return\t{boolean}\r\n     */\n    isSlideshowEnabled: function isSlideshowEnabled() {\n      return _self.objectData.isPartOfSequence && (_self.settings.slideshow === true || _self.objectData.isPartOfSequenceWithSlideshow === true);\n    },\n\n    /**\r\n     * Loads the new content to show\r\n     *\r\n     * @return\t{void}\r\n     */\n    _loadContent: function _loadContent() {\n      if (_self.cache.originalObject) {\n        _self._restoreObject();\n      }\n\n      _self._createObject();\n    },\n\n    /**\r\n     * Creates a new object\r\n     *\r\n     * @return\t{void}\r\n     */\n    _createObject: function _createObject() {\n      var $object; // Create object\n\n      switch (_self.objectData.type) {\n        case 'image':\n          $object = $(new Image());\n          $object.attr({\n            // The time expression is required to prevent the binding of an image load\n            'src': decodeURIComponent(_self.objectData.url),\n            'alt': _self.objectData.title\n          });\n          break;\n\n        case 'inline':\n          $object = $('<div class=\"' + _self.settings.classPrefix + 'inlineWrap\"></div>');\n          $object.html(_self._cloneObject($(_self.objectData.url))); // Add custom attributes from _self.settings\n\n          $.each(_self.settings.inline, function (name, value) {\n            $object.attr(_self._prefixAttributeName(name), value);\n          });\n          break;\n\n        case 'ajax':\n          $object = $('<div class=\"' + _self.settings.classPrefix + 'inlineWrap\"></div>'); // Add custom attributes from _self.settings\n\n          $.each(_self.settings.ajax, function (name, value) {\n            if (name !== 'data') {\n              $object.attr(_self._prefixAttributeName(name), value);\n            }\n          });\n          break;\n\n        case 'flash':\n          $object = $('<embed src=\"' + _self.objectData.url + '\" type=\"application/x-shockwave-flash\"></embed>'); // Add custom attributes from _self.settings\n\n          $.each(_self.settings.flash, function (name, value) {\n            $object.attr(name, value);\n          });\n          break;\n\n        case 'video':\n          $object = $('<video></video>');\n          $object.attr('src', _self.objectData.url); // Add custom attributes from _self.settings\n\n          $.each(_self.settings.video, function (name, value) {\n            $object.attr(name, value);\n          });\n          break;\n\n        default:\n          $object = $('<iframe></iframe>');\n          $object.attr({\n            'src': _self.objectData.url\n          }); // Add custom attributes from _self.settings\n\n          $.each(_self.settings.iframe, function (name, value) {\n            $object.attr(name, value);\n          });\n          break;\n      }\n\n      _self._addObject($object);\n\n      _self._loadObject($object);\n    },\n\n    /**\r\n     * Adds the new object to the markup\r\n     *\r\n     * @param\t{object}\t$object\r\n     * @return\t{void}\r\n     */\n    _addObject: function _addObject($object) {\n      // Add object to content holder\n      _self.objects.contentInner.html($object); // Start loading\n\n\n      _self._loading('start'); // Call onStart hook functions\n\n\n      _self._callHooks(_self.settings.onStart); // Add sequenceInfo to the content holder or hide if its empty\n\n\n      if (_self.settings.showSequenceInfo === true && _self.objectData.isPartOfSequence) {\n        _self.objects.sequenceInfo.html(_self.objectData.sequenceInfo);\n\n        _self.objects.sequenceInfo.show();\n      } else {\n        _self.objects.sequenceInfo.empty();\n\n        _self.objects.sequenceInfo.hide();\n      } // Add title to the content holder or hide if its empty\n\n\n      if (_self.settings.showTitle === true && _self.objectData.title !== undefined && _self.objectData.title !== '') {\n        _self.objects.title.html(_self.objectData.title);\n\n        _self.objects.title.show();\n      } else {\n        _self.objects.title.empty();\n\n        _self.objects.title.hide();\n      } // Add caption to the content holder or hide if its empty\n\n\n      if (_self.settings.showCaption === true && _self.objectData.caption !== undefined && _self.objectData.caption !== '') {\n        _self.objects.caption.html(_self.objectData.caption);\n\n        _self.objects.caption.show();\n      } else {\n        _self.objects.caption.empty();\n\n        _self.objects.caption.hide();\n      }\n    },\n\n    /**\r\n     * Loads the new object\r\n     *\r\n     * @param\t{object}\t$object\r\n     * @return\t{void}\r\n     */\n    _loadObject: function _loadObject($object) {\n      // Load the object\n      switch (_self.objectData.type) {\n        case 'inline':\n          if ($(_self.objectData.url)) {\n            _self._showContent($object);\n          } else {\n            _self.error();\n          }\n\n          break;\n\n        case 'ajax':\n          $.ajax($.extend({}, _self.settings.ajax, {\n            url: _self.objectData.url,\n            type: _self.objectData.requestType,\n            dataType: _self.objectData.requestDataType,\n            data: _self.objectData.requestData,\n            success: function success(data, textStatus, jqXHR) {\n              // Unserialize if data is transferred as json\n              if (_self.objectData.requestDataType === 'json') {\n                _self.objectData.data = data;\n              } else {\n                $object.html(data);\n              }\n\n              _self._showContent($object);\n            },\n            error: function error(jqXHR, textStatus, errorThrown) {\n              _self.error();\n            }\n          }));\n          break;\n\n        case 'flash':\n          _self._showContent($object);\n\n          break;\n\n        case 'video':\n          if (typeof $object.get(0).canPlayType === 'function' || _self.objects[\"case\"].find('video').length === 0) {\n            _self._showContent($object);\n          } else {\n            _self.error();\n          }\n\n          break;\n\n        default:\n          if (_self.objectData.url) {\n            $object.on('load', function () {\n              _self._showContent($object);\n            });\n            $object.on('error', function () {\n              _self.error();\n            });\n          } else {\n            _self.error();\n          }\n\n          break;\n      }\n    },\n\n    /**\r\n     * Throws an error message if something went wrong\r\n     *\r\n     * @return\t{void}\r\n     */\n    error: function error() {\n      _self.objectData.type = 'error';\n      var $object = $('<div class=\"' + _self.settings.classPrefix + 'inlineWrap\"></div>');\n      $object.html(_self.settings.errorMessage);\n\n      _self.objects.contentInner.html($object);\n\n      _self._showContent(_self.objects.contentInner);\n    },\n\n    /**\r\n     * Calculates the dimensions to fit content\r\n     *\r\n     * @param\t{object}\t$object\r\n     * @return\t{void}\r\n     */\n    _calculateDimensions: function _calculateDimensions($object) {\n      _self._cleanupDimensions(); // Set default dimensions\n\n\n      var dimensions = {\n        objectWidth: $object.attr('width') ? $object.attr('width') : $object.attr(_self._prefixAttributeName('width')),\n        objectHeight: $object.attr('height') ? $object.attr('height') : $object.attr(_self._prefixAttributeName('height'))\n      };\n\n      if (!_self.settings.disableShrink) {\n        // Add calculated maximum width/height to dimensions\n        dimensions.maxWidth = parseInt(_self.dimensions.windowWidth * _self.settings.shrinkFactor);\n        dimensions.maxHeight = parseInt(_self.dimensions.windowHeight * _self.settings.shrinkFactor); // If the auto calculated maxWidth/maxHeight greather than the userdefined one, use that.\n\n        if (dimensions.maxWidth > _self.settings.maxWidth) {\n          dimensions.maxWidth = _self.settings.maxWidth;\n        }\n\n        if (dimensions.maxHeight > _self.settings.maxHeight) {\n          dimensions.maxHeight = _self.settings.maxHeight;\n        } // Calculate the difference between screen width/height and image width/height\n\n\n        dimensions.differenceWidthAsPercent = parseInt(100 / dimensions.maxWidth * dimensions.objectWidth);\n        dimensions.differenceHeightAsPercent = parseInt(100 / dimensions.maxHeight * dimensions.objectHeight);\n\n        switch (_self.objectData.type) {\n          case 'image':\n          case 'flash':\n          case 'video':\n            if (dimensions.differenceWidthAsPercent > 100 && dimensions.differenceWidthAsPercent > dimensions.differenceHeightAsPercent) {\n              dimensions.objectWidth = dimensions.maxWidth;\n              dimensions.objectHeight = parseInt(dimensions.objectHeight / dimensions.differenceWidthAsPercent * 100);\n            }\n\n            if (dimensions.differenceHeightAsPercent > 100 && dimensions.differenceHeightAsPercent > dimensions.differenceWidthAsPercent) {\n              dimensions.objectWidth = parseInt(dimensions.objectWidth / dimensions.differenceHeightAsPercent * 100);\n              dimensions.objectHeight = dimensions.maxHeight;\n            }\n\n            if (dimensions.differenceHeightAsPercent > 100 && dimensions.differenceWidthAsPercent < dimensions.differenceHeightAsPercent) {\n              dimensions.objectWidth = parseInt(dimensions.maxWidth / dimensions.differenceHeightAsPercent * dimensions.differenceWidthAsPercent);\n              dimensions.objectHeight = dimensions.maxHeight;\n            }\n\n            break;\n\n          case 'error':\n            if (!isNaN(dimensions.objectWidth) && dimensions.objectWidth > dimensions.maxWidth) {\n              dimensions.objectWidth = dimensions.maxWidth;\n            }\n\n            break;\n\n          default:\n            if ((isNaN(dimensions.objectWidth) || dimensions.objectWidth > dimensions.maxWidth) && !_self.settings.forceWidth) {\n              dimensions.objectWidth = dimensions.maxWidth;\n            }\n\n            if ((isNaN(dimensions.objectHeight) && dimensions.objectHeight !== 'auto' || dimensions.objectHeight > dimensions.maxHeight) && !_self.settings.forceHeight) {\n              dimensions.objectHeight = dimensions.maxHeight;\n            }\n\n            break;\n        }\n      }\n\n      if (_self.settings.forceWidth) {\n        dimensions.maxWidth = dimensions.objectWidth;\n      } else if ($object.attr(_self._prefixAttributeName('max-width'))) {\n        dimensions.maxWidth = $object.attr(_self._prefixAttributeName('max-width'));\n      }\n\n      if (_self.settings.forceHeight) {\n        dimensions.maxHeight = dimensions.objectHeight;\n      } else if ($object.attr(_self._prefixAttributeName('max-height'))) {\n        dimensions.maxHeight = $object.attr(_self._prefixAttributeName('max-height'));\n      }\n\n      _self._adjustDimensions($object, dimensions);\n    },\n\n    /**\r\n     * Adjusts the dimensions\r\n     *\r\n     * @param\t{object}\t$object\r\n     * @param\t{object}\tdimensions\r\n     * @return\t{void}\r\n     */\n    _adjustDimensions: function _adjustDimensions($object, dimensions) {\n      // Adjust width and height\n      $object.css({\n        'width': dimensions.objectWidth,\n        'height': dimensions.objectHeight,\n        'max-width': dimensions.maxWidth,\n        'max-height': dimensions.maxHeight\n      });\n\n      _self.objects.contentInner.css({\n        'width': $object.outerWidth(),\n        'height': $object.outerHeight(),\n        'max-width': '100%'\n      });\n\n      _self.objects[\"case\"].css({\n        'width': _self.objects.contentInner.outerWidth()\n      }); // Adjust margin\n\n\n      _self.objects[\"case\"].css({\n        'margin-top': parseInt(-(_self.objects[\"case\"].outerHeight() / 2)),\n        'margin-left': parseInt(-(_self.objects[\"case\"].outerWidth() / 2))\n      });\n    },\n\n    /**\r\n     * Handles the _loading\r\n     *\r\n     * @param\t{string}\tprocess\r\n     * @return\t{void}\r\n     */\n    _loading: function _loading(process) {\n      if (process === 'start') {\n        _self.objects[\"case\"].addClass(_self.settings.classPrefix + 'loading');\n\n        _self.objects.loading.show();\n      } else if (process === 'end') {\n        _self.objects[\"case\"].removeClass(_self.settings.classPrefix + 'loading');\n\n        _self.objects.loading.hide();\n      }\n    },\n\n    /**\r\n     * Gets the client screen dimensions\r\n     *\r\n     * @return\t{object}\tdimensions\r\n     */\n    getViewportDimensions: function getViewportDimensions() {\n      return {\n        windowWidth: $(window).innerWidth(),\n        windowHeight: $(window).innerHeight()\n      };\n    },\n\n    /**\r\n     * Verifies the url\r\n     *\r\n     * @param\t{string}\tdataUrl\r\n     * @return\t{object}\tdataUrl\tClean url for processing content\r\n     */\n    _verifyDataUrl: function _verifyDataUrl(dataUrl) {\n      if (!dataUrl || dataUrl === undefined || dataUrl === '') {\n        return false;\n      }\n\n      if (dataUrl.indexOf('#') > -1) {\n        dataUrl = dataUrl.split('#');\n        dataUrl = '#' + dataUrl[dataUrl.length - 1];\n      }\n\n      return _self._normalizeUrl(dataUrl.toString());\n    },\n\n    /**\r\n     * Verifies the data type of the content to load\r\n     *\r\n     * @param\t{string}\t\t\turl\r\n     * @return\t{string|boolean}\tArray key if expression matched, else false\r\n     */\n    _verifyDataType: function _verifyDataType(url) {\n      var typeMapping = _self.settings.typeMapping; // Early abort if dataUrl couldn't be verified\n\n      if (!url) {\n        return false;\n      } // Verify the dataType of url according to typeMapping which\n      // has been defined in settings.\n\n\n      for (var key in typeMapping) {\n        if (typeMapping.hasOwnProperty(key)) {\n          var suffixArr = typeMapping[key].split(',');\n\n          for (var i = 0; i < suffixArr.length; i++) {\n            var suffix = suffixArr[i].toLowerCase(),\n                regexp = new RegExp('\\.(' + suffix + ')$', 'i'),\n                // Verify only the last 5 characters of the string\n            str = url.toLowerCase().split('?')[0].substr(-5);\n\n            if (regexp.test(str) === true || key === 'inline' && url.indexOf(suffix) > -1) {\n              return key;\n            }\n          }\n        }\n      } // If no expression matched, return 'iframe'.\n\n\n      return 'iframe';\n    },\n\n    /**\r\n     * Extends html markup with the essential tags\r\n     *\r\n     * @return\t{void}\r\n     */\n    _addElements: function _addElements() {\n      if (typeof _self.objects[\"case\"] !== 'undefined' && $('#' + _self.objects[\"case\"].attr('id')).length) {\n        return;\n      }\n\n      _self.settings.markup();\n    },\n\n    /**\r\n     * Shows the loaded content\r\n     *\r\n     * @param\t{object}\t$object\r\n     * @return\t{void}\r\n     */\n    _showContent: function _showContent($object) {\n      // Add data attribute with the object type\n      _self.objects[\"case\"].attr(_self._prefixAttributeName('type'), _self.objectData.type);\n\n      _self.cache.object = $object;\n\n      _self._calculateDimensions($object); // Call onFinish hook functions\n\n\n      _self._callHooks(_self.settings.onFinish);\n\n      switch (_self.settings.transitionIn) {\n        case 'scrollTop':\n        case 'scrollRight':\n        case 'scrollBottom':\n        case 'scrollLeft':\n        case 'scrollHorizontal':\n        case 'scrollVertical':\n          _self.transition.scroll(_self.objects[\"case\"], 'in', _self.settings.speedIn);\n\n          _self.transition.fade(_self.objects.contentInner, 'in', _self.settings.speedIn);\n\n          break;\n\n        case 'elastic':\n          if (_self.objects[\"case\"].css('opacity') < 1) {\n            _self.transition.zoom(_self.objects[\"case\"], 'in', _self.settings.speedIn);\n\n            _self.transition.fade(_self.objects.contentInner, 'in', _self.settings.speedIn);\n          }\n\n        case 'fade':\n        case 'fadeInline':\n          _self.transition.fade(_self.objects[\"case\"], 'in', _self.settings.speedIn);\n\n          _self.transition.fade(_self.objects.contentInner, 'in', _self.settings.speedIn);\n\n          break;\n\n        default:\n          _self.transition.fade(_self.objects[\"case\"], 'in', 0);\n\n          break;\n      } // End loading.\n\n\n      _self._loading('end');\n\n      _self.isBusy = false;\n    },\n\n    /**\r\n     * Processes the content to show\r\n     *\r\n     * @return\t{void}\r\n     */\n    _processContent: function _processContent() {\n      _self.isBusy = true;\n\n      switch (_self.settings.transitionOut) {\n        case 'scrollTop':\n        case 'scrollRight':\n        case 'scrollBottom':\n        case 'scrollLeft':\n        case 'scrollVertical':\n        case 'scrollHorizontal':\n          if (_self.objects[\"case\"].is(':hidden')) {\n            _self.transition.fade(_self.objects[\"case\"], 'out', 0, 0, function () {\n              _self._loadContent();\n            });\n\n            _self.transition.fade(_self.objects.contentInner, 'out', 0);\n          } else {\n            _self.transition.scroll(_self.objects[\"case\"], 'out', _self.settings.speedOut, function () {\n              _self._loadContent();\n            });\n          }\n\n          break;\n\n        case 'fade':\n          if (_self.objects[\"case\"].is(':hidden')) {\n            _self.transition.fade(_self.objects[\"case\"], 'out', 0, 0, function () {\n              _self._loadContent();\n            });\n          } else {\n            _self.transition.fade(_self.objects[\"case\"], 'out', _self.settings.speedOut, 0, function () {\n              _self._loadContent();\n            });\n          }\n\n          break;\n\n        case 'fadeInline':\n        case 'elastic':\n          if (_self.objects[\"case\"].is(':hidden')) {\n            _self.transition.fade(_self.objects[\"case\"], 'out', 0, 0, function () {\n              _self._loadContent();\n            });\n          } else {\n            _self.transition.fade(_self.objects.contentInner, 'out', _self.settings.speedOut, 0, function () {\n              _self._loadContent();\n            });\n          }\n\n          break;\n\n        default:\n          _self.transition.fade(_self.objects[\"case\"], 'out', 0, 0, function () {\n            _self._loadContent();\n          });\n\n          break;\n      }\n    },\n\n    /**\r\n     * Handles events for gallery buttons\r\n     *\r\n     * @return\t{void}\r\n     */\n    _handleEvents: function _handleEvents() {\n      _self._unbindEvents();\n\n      _self.objects.nav.children().not(_self.objects.close).hide(); // If slideshow is enabled, show play/pause and start timeout.\n\n\n      if (_self.isSlideshowEnabled()) {\n        // Only start the timeout if slideshow autostart is enabled and slideshow is not pausing\n        if ((_self.settings.slideshowAutoStart === true || _self.isSlideshowStarted) && !_self.objects.nav.hasClass(_self.settings.classPrefix + 'paused')) {\n          _self._startTimeout();\n        } else {\n          _self._stopTimeout();\n        }\n      }\n\n      if (_self.settings.liveResize) {\n        _self._watchResizeInteraction();\n      }\n\n      _self.objects.close.click(function (event) {\n        event.preventDefault();\n\n        _self.close();\n      });\n\n      if (_self.settings.closeOnOverlayClick === true) {\n        _self.objects.overlay.css('cursor', 'pointer').click(function (event) {\n          event.preventDefault();\n\n          _self.close();\n        });\n      }\n\n      if (_self.settings.useKeys === true) {\n        _self._addKeyEvents();\n      }\n\n      if (_self.objectData.isPartOfSequence) {\n        _self.objects.nav.attr(_self._prefixAttributeName('ispartofsequence'), true);\n\n        _self.objects.nav.data('items', _self._setNavigation());\n\n        _self.objects.prev.click(function (event) {\n          event.preventDefault();\n\n          if (_self.settings.navigateEndless === true || !_self.item.isFirst()) {\n            _self.objects.prev.unbind('click');\n\n            _self.cache.action = 'prev';\n\n            _self.objects.nav.data('items').prev.click();\n\n            if (_self.isSlideshowEnabled()) {\n              _self._stopTimeout();\n            }\n          }\n        });\n\n        _self.objects.next.click(function (event) {\n          event.preventDefault();\n\n          if (_self.settings.navigateEndless === true || !_self.item.isLast()) {\n            _self.objects.next.unbind('click');\n\n            _self.cache.action = 'next';\n\n            _self.objects.nav.data('items').next.click();\n\n            if (_self.isSlideshowEnabled()) {\n              _self._stopTimeout();\n            }\n          }\n        });\n\n        if (_self.isSlideshowEnabled()) {\n          _self.objects.play.click(function (event) {\n            event.preventDefault();\n\n            _self._startTimeout();\n          });\n\n          _self.objects.pause.click(function (event) {\n            event.preventDefault();\n\n            _self._stopTimeout();\n          });\n        } // Enable swiping if activated\n\n\n        if (_self.settings.swipe === true) {\n          if ($.isPlainObject($.event.special.swipeleft)) {\n            _self.objects[\"case\"].on('swipeleft', function (event) {\n              event.preventDefault();\n\n              _self.objects.next.click();\n\n              if (_self.isSlideshowEnabled()) {\n                _self._stopTimeout();\n              }\n            });\n          }\n\n          if ($.isPlainObject($.event.special.swiperight)) {\n            _self.objects[\"case\"].on('swiperight', function (event) {\n              event.preventDefault();\n\n              _self.objects.prev.click();\n\n              if (_self.isSlideshowEnabled()) {\n                _self._stopTimeout();\n              }\n            });\n          }\n        }\n      }\n    },\n\n    /**\r\n     * Adds the key events\r\n     *\r\n     * @return\t{void}\r\n     */\n    _addKeyEvents: function _addKeyEvents() {\n      $(document).bind('keyup.lightcase', function (event) {\n        // Do nothing if lightcase is in process\n        if (_self.isBusy) {\n          return;\n        }\n\n        switch (event.keyCode) {\n          // Escape key\n          case 27:\n            _self.objects.close.click();\n\n            break;\n          // Backward key\n\n          case 37:\n            if (_self.objectData.isPartOfSequence) {\n              _self.objects.prev.click();\n            }\n\n            break;\n          // Forward key\n\n          case 39:\n            if (_self.objectData.isPartOfSequence) {\n              _self.objects.next.click();\n            }\n\n            break;\n        }\n      });\n    },\n\n    /**\r\n     * Starts the slideshow timeout\r\n     *\r\n     * @return\t{void}\r\n     */\n    _startTimeout: function _startTimeout() {\n      _self.isSlideshowStarted = true;\n\n      _self.objects.play.hide();\n\n      _self.objects.pause.show();\n\n      _self.cache.action = 'next';\n\n      _self.objects.nav.removeClass(_self.settings.classPrefix + 'paused');\n\n      _self.timeout = setTimeout(function () {\n        _self.objects.nav.data('items').next.click();\n      }, _self.settings.timeout);\n    },\n\n    /**\r\n     * Stops the slideshow timeout\r\n     *\r\n     * @return\t{void}\r\n     */\n    _stopTimeout: function _stopTimeout() {\n      _self.objects.play.show();\n\n      _self.objects.pause.hide();\n\n      _self.objects.nav.addClass(_self.settings.classPrefix + 'paused');\n\n      clearTimeout(_self.timeout);\n    },\n\n    /**\r\n     * Sets the navigator buttons (prev/next)\r\n     *\r\n     * @return\t{object}\titems\r\n     */\n    _setNavigation: function _setNavigation() {\n      var $links = $(_self.cache.selector || _self.settings.attr),\n          sequenceLength = _self.objectData.sequenceLength - 1,\n          items = {\n        prev: $links.eq(_self.objectData.prevIndex),\n        next: $links.eq(_self.objectData.nextIndex)\n      };\n\n      if (_self.objectData.currentIndex > 0) {\n        _self.objects.prev.show();\n      } else {\n        items.prevItem = $links.eq(sequenceLength);\n      }\n\n      if (_self.objectData.nextIndex <= sequenceLength) {\n        _self.objects.next.show();\n      } else {\n        items.next = $links.eq(0);\n      }\n\n      if (_self.settings.navigateEndless === true) {\n        _self.objects.prev.show();\n\n        _self.objects.next.show();\n      }\n\n      return items;\n    },\n\n    /**\r\n     * Item information/status\r\n     *\r\n     */\n    item: {\n      /**\r\n       * Verifies if the current item is first item.\r\n       *\r\n       * @return\t{boolean}\r\n       */\n      isFirst: function isFirst() {\n        return _self.objectData.currentIndex === 0;\n      },\n\n      /**\r\n       * Verifies if the current item is last item.\r\n       *\r\n       * @return\t{boolean}\r\n       */\n      isLast: function isLast() {\n        return _self.objectData.currentIndex === _self.objectData.sequenceLength - 1;\n      }\n    },\n\n    /**\r\n     * Clones the object for inline elements\r\n     *\r\n     * @param\t{object}\t$object\r\n     * @return\t{object}\t$clone\r\n     */\n    _cloneObject: function _cloneObject($object) {\n      var $clone = $object.clone(),\n          objectId = $object.attr('id'); // If element is hidden, cache the object and remove\n\n      if ($object.is(':hidden')) {\n        _self._cacheObjectData($object);\n\n        $object.attr('id', _self.settings.idPrefix + 'temp-' + objectId).empty();\n      } else {\n        // Prevent duplicated id's\n        $clone.removeAttr('id');\n      }\n\n      return $clone.show();\n    },\n\n    /**\r\n     * Verifies if it is a mobile device\r\n     *\r\n     * @return\t{boolean}\r\n     */\n    isMobileDevice: function isMobileDevice() {\n      var deviceAgent = navigator.userAgent.toLowerCase(),\n          agentId = deviceAgent.match(_self.settings.mobileMatchExpression);\n      return agentId ? true : false;\n    },\n\n    /**\r\n     * Verifies if css transitions are supported\r\n     *\r\n     * @return\t{string|boolean}\tThe transition prefix if supported, else false.\r\n     */\n    isTransitionSupported: function isTransitionSupported() {\n      var body = $('body').get(0),\n          isTransitionSupported = false,\n          transitionMapping = {\n        'transition': '',\n        'WebkitTransition': '-webkit-',\n        'MozTransition': '-moz-',\n        'OTransition': '-o-',\n        'MsTransition': '-ms-'\n      };\n\n      for (var key in transitionMapping) {\n        if (transitionMapping.hasOwnProperty(key) && key in body.style) {\n          _self.support.transition = transitionMapping[key];\n          isTransitionSupported = true;\n        }\n      }\n\n      return isTransitionSupported;\n    },\n\n    /**\r\n     * Transition types\r\n     *\r\n     */\n    transition: {\n      /**\r\n       * Fades in/out the object\r\n       *\r\n       * @param\t{object}\t$object\r\n       * @param\t{string}\ttype\r\n       * @param\t{number}\tspeed\r\n       * @param\t{number}\topacity\r\n       * @param\t{function}\tcallback\r\n       * @return\t{void}\t\tAnimates an object\r\n       */\n      fade: function fade($object, type, speed, opacity, callback) {\n        var isInTransition = type === 'in',\n            startTransition = {},\n            startOpacity = $object.css('opacity'),\n            endTransition = {},\n            endOpacity = opacity ? opacity : isInTransition ? 1 : 0;\n        if (!_self.isOpen && isInTransition) return;\n        startTransition['opacity'] = startOpacity;\n        endTransition['opacity'] = endOpacity;\n        $object.css(startTransition).show(); // Css transition\n\n        if (_self.support.transitions) {\n          endTransition[_self.support.transition + 'transition'] = speed + 'ms ease';\n          setTimeout(function () {\n            $object.css(endTransition);\n            setTimeout(function () {\n              $object.css(_self.support.transition + 'transition', '');\n\n              if (callback && (_self.isOpen || !isInTransition)) {\n                callback();\n              }\n            }, speed);\n          }, 15);\n        } else {\n          // Fallback to js transition\n          $object.stop();\n          $object.animate(endTransition, speed, callback);\n        }\n      },\n\n      /**\r\n       * Scrolls in/out the object\r\n       *\r\n       * @param\t{object}\t$object\r\n       * @param\t{string}\ttype\r\n       * @param\t{number}\tspeed\r\n       * @param\t{function}\tcallback\r\n       * @return\t{void}\t\tAnimates an object\r\n       */\n      scroll: function scroll($object, type, speed, callback) {\n        var isInTransition = type === 'in',\n            transition = isInTransition ? _self.settings.transitionIn : _self.settings.transitionOut,\n            direction = 'left',\n            startTransition = {},\n            startOpacity = isInTransition ? 0 : 1,\n            startOffset = isInTransition ? '-50%' : '50%',\n            endTransition = {},\n            endOpacity = isInTransition ? 1 : 0,\n            endOffset = isInTransition ? '50%' : '-50%';\n        if (!_self.isOpen && isInTransition) return;\n\n        switch (transition) {\n          case 'scrollTop':\n            direction = 'top';\n            break;\n\n          case 'scrollRight':\n            startOffset = isInTransition ? '150%' : '50%';\n            endOffset = isInTransition ? '50%' : '150%';\n            break;\n\n          case 'scrollBottom':\n            direction = 'top';\n            startOffset = isInTransition ? '150%' : '50%';\n            endOffset = isInTransition ? '50%' : '150%';\n            break;\n\n          case 'scrollHorizontal':\n            startOffset = isInTransition ? '150%' : '50%';\n            endOffset = isInTransition ? '50%' : '-50%';\n            break;\n\n          case 'scrollVertical':\n            direction = 'top';\n            startOffset = isInTransition ? '-50%' : '50%';\n            endOffset = isInTransition ? '50%' : '150%';\n            break;\n        }\n\n        if (_self.cache.action === 'prev') {\n          switch (transition) {\n            case 'scrollHorizontal':\n              startOffset = isInTransition ? '-50%' : '50%';\n              endOffset = isInTransition ? '50%' : '150%';\n              break;\n\n            case 'scrollVertical':\n              startOffset = isInTransition ? '150%' : '50%';\n              endOffset = isInTransition ? '50%' : '-50%';\n              break;\n          }\n        }\n\n        startTransition['opacity'] = startOpacity;\n        startTransition[direction] = startOffset;\n        endTransition['opacity'] = endOpacity;\n        endTransition[direction] = endOffset;\n        $object.css(startTransition).show(); // Css transition\n\n        if (_self.support.transitions) {\n          endTransition[_self.support.transition + 'transition'] = speed + 'ms ease';\n          setTimeout(function () {\n            $object.css(endTransition);\n            setTimeout(function () {\n              $object.css(_self.support.transition + 'transition', '');\n\n              if (callback && (_self.isOpen || !isInTransition)) {\n                callback();\n              }\n            }, speed);\n          }, 15);\n        } else {\n          // Fallback to js transition\n          $object.stop();\n          $object.animate(endTransition, speed, callback);\n        }\n      },\n\n      /**\r\n       * Zooms in/out the object\r\n       *\r\n       * @param\t{object}\t$object\r\n       * @param\t{string}\ttype\r\n       * @param\t{number}\tspeed\r\n       * @param\t{function}\tcallback\r\n       * @return\t{void}\t\tAnimates an object\r\n       */\n      zoom: function zoom($object, type, speed, callback) {\n        var isInTransition = type === 'in',\n            startTransition = {},\n            startOpacity = $object.css('opacity'),\n            startScale = isInTransition ? 'scale(0.75)' : 'scale(1)',\n            endTransition = {},\n            endOpacity = isInTransition ? 1 : 0,\n            endScale = isInTransition ? 'scale(1)' : 'scale(0.75)';\n        if (!_self.isOpen && isInTransition) return;\n        startTransition['opacity'] = startOpacity;\n        startTransition[_self.support.transition + 'transform'] = startScale;\n        endTransition['opacity'] = endOpacity;\n        $object.css(startTransition).show(); // Css transition\n\n        if (_self.support.transitions) {\n          endTransition[_self.support.transition + 'transform'] = endScale;\n          endTransition[_self.support.transition + 'transition'] = speed + 'ms ease';\n          setTimeout(function () {\n            $object.css(endTransition);\n            setTimeout(function () {\n              $object.css(_self.support.transition + 'transform', '');\n              $object.css(_self.support.transition + 'transition', '');\n\n              if (callback && (_self.isOpen || !isInTransition)) {\n                callback();\n              }\n            }, speed);\n          }, 15);\n        } else {\n          // Fallback to js transition\n          $object.stop();\n          $object.animate(endTransition, speed, callback);\n        }\n      }\n    },\n\n    /**\r\n     * Calls all the registered functions of a specific hook\r\n     *\r\n     * @param\t{object}\thooks\r\n     * @return\t{void}\r\n     */\n    _callHooks: function _callHooks(hooks) {\n      if (_typeof(hooks) === 'object') {\n        $.each(hooks, function (index, hook) {\n          if (typeof hook === 'function') {\n            hook.call(_self.origin);\n          }\n        });\n      }\n    },\n\n    /**\r\n     * Caches the object data\r\n     *\r\n     * @param\t{object}\t$object\r\n     * @return\t{void}\r\n     */\n    _cacheObjectData: function _cacheObjectData($object) {\n      $.data($object, 'cache', {\n        id: $object.attr('id'),\n        content: $object.html()\n      });\n      _self.cache.originalObject = $object;\n    },\n\n    /**\r\n     * Restores the object from cache\r\n     *\r\n     * @return\tvoid\r\n     */\n    _restoreObject: function _restoreObject() {\n      var $object = $('[id^=\"' + _self.settings.idPrefix + 'temp-\"]');\n      $object.attr('id', $.data(_self.cache.originalObject, 'cache').id);\n      $object.html($.data(_self.cache.originalObject, 'cache').content);\n    },\n\n    /**\r\n     * Executes functions for a window resize.\r\n     * It stops an eventual timeout and recalculates dimenstions.\r\n     *\r\n     * @return\t{void}\r\n     */\n    resize: function resize() {\n      if (!_self.isOpen) return;\n\n      if (_self.isSlideshowEnabled()) {\n        _self._stopTimeout();\n      }\n\n      _self.dimensions = _self.getViewportDimensions();\n\n      _self._calculateDimensions(_self.cache.object);\n    },\n\n    /**\r\n     * Caches the actual scroll coordinates.\r\n     *\r\n     * @return\t{void}\r\n     */\n    _cacheScrollPosition: function _cacheScrollPosition() {\n      var $window = $(window),\n          $document = $(document),\n          offset = {\n        'top': $window.scrollTop(),\n        'left': $window.scrollLeft()\n      };\n      _self.cache.scrollPosition = _self.cache.scrollPosition || {};\n\n      if (!_self._assertContentInvisible()) {\n        _self.cache.cacheScrollPositionSkipped = true;\n      } else if (_self.cache.cacheScrollPositionSkipped) {\n        delete _self.cache.cacheScrollPositionSkipped;\n\n        _self._restoreScrollPosition();\n      } else {\n        if ($document.width() > $window.width()) {\n          _self.cache.scrollPosition.left = offset.left;\n        }\n\n        if ($document.height() > $window.height()) {\n          _self.cache.scrollPosition.top = offset.top;\n        }\n      }\n    },\n\n    /**\r\n     * Watches for any resize interaction and caches the new sizes.\r\n     *\r\n     * @return\t{void}\r\n     */\n    _watchResizeInteraction: function _watchResizeInteraction() {\n      $(window).resize(_self.resize);\n    },\n\n    /**\r\n     * Stop watching any resize interaction related to _self.\r\n     *\r\n     * @return\t{void}\r\n     */\n    _unwatchResizeInteraction: function _unwatchResizeInteraction() {\n      $(window).off('resize', _self.resize);\n    },\n\n    /**\r\n     * Watches for any scroll interaction and caches the new position.\r\n     *\r\n     * @return\t{void}\r\n     */\n    _watchScrollInteraction: function _watchScrollInteraction() {\n      $(window).scroll(_self._cacheScrollPosition);\n      $(window).resize(_self._cacheScrollPosition);\n    },\n\n    /**\r\n     * Stop watching any scroll interaction related to _self.\r\n     *\r\n     * @return\t{void}\r\n     */\n    _unwatchScrollInteraction: function _unwatchScrollInteraction() {\n      $(window).off('scroll', _self._cacheScrollPosition);\n      $(window).off('resize', _self._cacheScrollPosition);\n    },\n\n    /**\r\n     * Ensures that site content is invisible or has not height.\r\n     *\r\n     * @return\t{boolean}\r\n     */\n    _assertContentInvisible: function _assertContentInvisible() {\n      return $($('body').children().not('[id*=' + _self.settings.idPrefix + ']').get(0)).height() > 0;\n    },\n\n    /**\r\n     * Restores to the original scoll position before\r\n     * lightcase got initialized.\r\n     *\r\n     * @return\t{void}\r\n     */\n    _restoreScrollPosition: function _restoreScrollPosition() {\n      $(window).scrollTop(parseInt(_self.cache.scrollPosition.top)).scrollLeft(parseInt(_self.cache.scrollPosition.left)).resize();\n    },\n\n    /**\r\n     * Switches to the fullscreen mode\r\n     *\r\n     * @return\t{void}\r\n     */\n    _switchToFullScreenMode: function _switchToFullScreenMode() {\n      _self.settings.shrinkFactor = 1;\n      _self.settings.overlayOpacity = 1;\n      $('html').addClass(_self.settings.classPrefix + 'fullScreenMode');\n    },\n\n    /**\r\n     * Enters into the lightcase view\r\n     *\r\n     * @return\t{void}\r\n     */\n    _open: function _open() {\n      _self.isOpen = true;\n      _self.support.transitions = _self.settings.cssTransitions ? _self.isTransitionSupported() : false;\n      _self.support.mobileDevice = _self.isMobileDevice();\n\n      if (_self.support.mobileDevice) {\n        $('html').addClass(_self.settings.classPrefix + 'isMobileDevice');\n\n        if (_self.settings.fullScreenModeForMobile) {\n          _self._switchToFullScreenMode();\n        }\n      }\n\n      if (!_self.settings.transitionIn) {\n        _self.settings.transitionIn = _self.settings.transition;\n      }\n\n      if (!_self.settings.transitionOut) {\n        _self.settings.transitionOut = _self.settings.transition;\n      }\n\n      switch (_self.settings.transitionIn) {\n        case 'fade':\n        case 'fadeInline':\n        case 'elastic':\n        case 'scrollTop':\n        case 'scrollRight':\n        case 'scrollBottom':\n        case 'scrollLeft':\n        case 'scrollVertical':\n        case 'scrollHorizontal':\n          if (_self.objects[\"case\"].is(':hidden')) {\n            _self.objects.close.css('opacity', 0);\n\n            _self.objects.overlay.css('opacity', 0);\n\n            _self.objects[\"case\"].css('opacity', 0);\n\n            _self.objects.contentInner.css('opacity', 0);\n          }\n\n          _self.transition.fade(_self.objects.overlay, 'in', _self.settings.speedIn, _self.settings.overlayOpacity, function () {\n            _self.transition.fade(_self.objects.close, 'in', _self.settings.speedIn);\n\n            _self._handleEvents();\n\n            _self._processContent();\n          });\n\n          break;\n\n        default:\n          _self.transition.fade(_self.objects.overlay, 'in', 0, _self.settings.overlayOpacity, function () {\n            _self.transition.fade(_self.objects.close, 'in', 0);\n\n            _self._handleEvents();\n\n            _self._processContent();\n          });\n\n          break;\n      }\n\n      $('html').addClass(_self.settings.classPrefix + 'open');\n\n      _self.objects[\"case\"].attr('aria-hidden', 'false');\n    },\n\n    /**\r\n     * Escapes from the lightcase view\r\n     *\r\n     * @return\t{void}\r\n     */\n    close: function close() {\n      _self.isOpen = false;\n\n      if (_self.isSlideshowEnabled()) {\n        _self._stopTimeout();\n\n        _self.isSlideshowStarted = false;\n\n        _self.objects.nav.removeClass(_self.settings.classPrefix + 'paused');\n      }\n\n      _self.objects.loading.hide();\n\n      _self._unbindEvents();\n\n      _self._unwatchResizeInteraction();\n\n      _self._unwatchScrollInteraction();\n\n      $('html').removeClass(_self.settings.classPrefix + 'open');\n\n      _self.objects[\"case\"].attr('aria-hidden', 'true');\n\n      _self.objects.nav.children().hide();\n\n      _self._restoreScrollPosition(); // Call onClose hook functions\n\n\n      _self._callHooks(_self.settings.onClose);\n\n      switch (_self.settings.transitionOut) {\n        case 'fade':\n        case 'fadeInline':\n        case 'scrollTop':\n        case 'scrollRight':\n        case 'scrollBottom':\n        case 'scrollLeft':\n        case 'scrollHorizontal':\n        case 'scrollVertical':\n          _self.transition.fade(_self.objects[\"case\"], 'out', _self.settings.speedOut, 0, function () {\n            _self.transition.fade(_self.objects.overlay, 'out', _self.settings.speedOut, 0, function () {\n              _self.cleanup();\n            });\n          });\n\n          break;\n\n        case 'elastic':\n          _self.transition.zoom(_self.objects[\"case\"], 'out', _self.settings.speedOut, function () {\n            _self.transition.fade(_self.objects.overlay, 'out', _self.settings.speedOut, 0, function () {\n              _self.cleanup();\n            });\n          });\n\n          break;\n\n        default:\n          _self.cleanup();\n\n          break;\n      }\n    },\n\n    /**\r\n     * Unbinds all given events\r\n     *\r\n     * @return\t{void}\r\n     */\n    _unbindEvents: function _unbindEvents() {\n      // Unbind overlay event\n      _self.objects.overlay.unbind('click'); // Unbind key events\n\n\n      $(document).unbind('keyup.lightcase'); // Unbind swipe events\n\n      _self.objects[\"case\"].unbind('swipeleft').unbind('swiperight'); // Unbind navigator events\n\n\n      _self.objects.prev.unbind('click');\n\n      _self.objects.next.unbind('click');\n\n      _self.objects.play.unbind('click');\n\n      _self.objects.pause.unbind('click'); // Unbind close event\n\n\n      _self.objects.close.unbind('click');\n    },\n\n    /**\r\n     * Cleans up the dimensions\r\n     *\r\n     * @return\t{void}\r\n     */\n    _cleanupDimensions: function _cleanupDimensions() {\n      var opacity = _self.objects.contentInner.css('opacity');\n\n      _self.objects[\"case\"].css({\n        'width': '',\n        'height': '',\n        'top': '',\n        'left': '',\n        'margin-top': '',\n        'margin-left': ''\n      });\n\n      _self.objects.contentInner.removeAttr('style').css('opacity', opacity);\n\n      _self.objects.contentInner.children().removeAttr('style');\n    },\n\n    /**\r\n     * Cleanup after aborting lightcase\r\n     *\r\n     * @return\t{void}\r\n     */\n    cleanup: function cleanup() {\n      _self._cleanupDimensions();\n\n      _self.objects.loading.hide();\n\n      _self.objects.overlay.hide();\n\n      _self.objects[\"case\"].hide();\n\n      _self.objects.prev.hide();\n\n      _self.objects.next.hide();\n\n      _self.objects.play.hide();\n\n      _self.objects.pause.hide();\n\n      _self.objects[\"case\"].removeAttr(_self._prefixAttributeName('type'));\n\n      _self.objects.nav.removeAttr(_self._prefixAttributeName('ispartofsequence'));\n\n      _self.objects.contentInner.empty().hide();\n\n      _self.objects.info.children().empty();\n\n      if (_self.cache.originalObject) {\n        _self._restoreObject();\n      } // Call onCleanup hook functions\n\n\n      _self._callHooks(_self.settings.onCleanup); // Restore cache\n\n\n      _self.cache = {};\n    },\n\n    /**\r\n     * Returns the supported match media or undefined if the browser\r\n     * doesn't support match media.\r\n     *\r\n     * @return\t{mixed}\r\n     */\n    _matchMedia: function _matchMedia() {\n      return window.matchMedia || window.msMatchMedia;\n    },\n\n    /**\r\n     * Returns the devicePixelRatio if supported. Else, it simply returns\r\n     * 1 as the default.\r\n     *\r\n     * @return\t{number}\r\n     */\n    _devicePixelRatio: function _devicePixelRatio() {\n      return window.devicePixelRatio || 1;\n    },\n\n    /**\r\n     * Checks if method is public\r\n     *\r\n     * @return\t{boolean}\r\n     */\n    _isPublicMethod: function _isPublicMethod(method) {\n      return typeof _self[method] === 'function' && method.charAt(0) !== '_';\n    },\n\n    /**\r\n     * Exports all public methods to be accessible, callable\r\n     * from global scope.\r\n     *\r\n     * @return\t{void}\r\n     */\n    _export: function _export() {\n      window.lightcase = {};\n      $.each(_self, function (property) {\n        if (_self._isPublicMethod(property)) {\n          lightcase[property] = _self[property];\n        }\n      });\n    }\n  };\n\n  _self._export();\n\n  $.fn.lightcase = function (method) {\n    // Method calling logic (only public methods are applied)\n    if (_self._isPublicMethod(method)) {\n      return _self[method].apply(this, Array.prototype.slice.call(arguments, 1));\n    } else if (_typeof(method) === 'object' || !method) {\n      return _self.init.apply(this, arguments);\n    } else {\n      $.error('Method ' + method + ' does not exist on jQuery.lightcase');\n    }\n  };\n})(jQuery);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./package/resources/js/website/lightcase.js\n");

/***/ }),

/***/ "./package/resources/js/website/lightslider.js":
/*!*****************************************************!*\
  !*** ./package/resources/js/website/lightslider.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(jQuery) {(function ($, undefined) {\n  'use strict';\n\n  var defaults = {\n    item: 3,\n    autoWidth: false,\n    slideMove: 1,\n    slideMargin: 10,\n    addClass: '',\n    mode: 'slide',\n    useCSS: true,\n    cssEasing: 'ease',\n    //'cubic-bezier(0.25, 0, 0.25, 1)',\n    easing: 'linear',\n    //'for jquery animation',//\n    speed: 400,\n    //ms'\n    auto: false,\n    pauseOnHover: false,\n    loop: false,\n    slideEndAnimation: true,\n    pause: 2000,\n    keyPress: false,\n    controls: true,\n    prevHtml: '',\n    nextHtml: '',\n    rtl: false,\n    adaptiveHeight: false,\n    vertical: false,\n    verticalHeight: 500,\n    vThumbWidth: 100,\n    thumbItem: 10,\n    pager: true,\n    gallery: false,\n    galleryMargin: 5,\n    thumbMargin: 5,\n    currentPagerPosition: 'middle',\n    enableTouch: true,\n    enableDrag: true,\n    freeMove: true,\n    swipeThreshold: 40,\n    responsive: [],\n\n    /* jshint ignore:start */\n    onBeforeStart: function onBeforeStart($el) {},\n    onSliderLoad: function onSliderLoad($el) {},\n    onBeforeSlide: function onBeforeSlide($el, scene) {},\n    onAfterSlide: function onAfterSlide($el, scene) {},\n    onBeforeNextSlide: function onBeforeNextSlide($el, scene) {},\n    onBeforePrevSlide: function onBeforePrevSlide($el, scene) {}\n    /* jshint ignore:end */\n\n  };\n\n  $.fn.lightSlider = function (options) {\n    if (this.length === 0) {\n      return this;\n    }\n\n    if (this.length > 1) {\n      this.each(function () {\n        $(this).lightSlider(options);\n      });\n      return this;\n    }\n\n    var plugin = {},\n        settings = $.extend(true, {}, defaults, options),\n        settingsTemp = {},\n        $el = this;\n    plugin.$el = this;\n\n    if (settings.mode === 'fade') {\n      settings.vertical = false;\n    }\n\n    var $children = $el.children(),\n        windowW = $(window).width(),\n        breakpoint = null,\n        resposiveObj = null,\n        length = 0,\n        w = 0,\n        on = false,\n        elSize = 0,\n        $slide = '',\n        scene = 0,\n        property = settings.vertical === true ? 'height' : 'width',\n        gutter = settings.vertical === true ? 'margin-bottom' : 'margin-right',\n        slideValue = 0,\n        pagerWidth = 0,\n        slideWidth = 0,\n        thumbWidth = 0,\n        interval = null,\n        isTouch = ('ontouchstart' in document.documentElement);\n    var refresh = {};\n\n    refresh.chbreakpoint = function () {\n      windowW = $(window).width();\n\n      if (settings.responsive.length) {\n        var item;\n\n        if (settings.autoWidth === false) {\n          item = settings.item;\n        }\n\n        if (windowW < settings.responsive[0].breakpoint) {\n          for (var i = 0; i < settings.responsive.length; i++) {\n            if (windowW < settings.responsive[i].breakpoint) {\n              breakpoint = settings.responsive[i].breakpoint;\n              resposiveObj = settings.responsive[i];\n            }\n          }\n        }\n\n        if (typeof resposiveObj !== 'undefined' && resposiveObj !== null) {\n          for (var j in resposiveObj.settings) {\n            if (resposiveObj.settings.hasOwnProperty(j)) {\n              if (typeof settingsTemp[j] === 'undefined' || settingsTemp[j] === null) {\n                settingsTemp[j] = settings[j];\n              }\n\n              settings[j] = resposiveObj.settings[j];\n            }\n          }\n        }\n\n        if (!$.isEmptyObject(settingsTemp) && windowW > settings.responsive[0].breakpoint) {\n          for (var k in settingsTemp) {\n            if (settingsTemp.hasOwnProperty(k)) {\n              settings[k] = settingsTemp[k];\n            }\n          }\n        }\n\n        if (settings.autoWidth === false) {\n          if (slideValue > 0 && slideWidth > 0) {\n            if (item !== settings.item) {\n              scene = Math.round(slideValue / ((slideWidth + settings.slideMargin) * settings.slideMove));\n            }\n          }\n        }\n      }\n    };\n\n    refresh.calSW = function () {\n      if (settings.autoWidth === false) {\n        slideWidth = (elSize - (settings.item * settings.slideMargin - settings.slideMargin)) / settings.item;\n      }\n    };\n\n    refresh.calWidth = function (cln) {\n      var ln = cln === true ? $slide.find('.lslide').length : $children.length;\n\n      if (settings.autoWidth === false) {\n        w = ln * (slideWidth + settings.slideMargin);\n      } else {\n        w = 0;\n\n        for (var i = 0; i < ln; i++) {\n          w += parseInt($children.eq(i).width()) + settings.slideMargin;\n        }\n      }\n\n      return w;\n    };\n\n    plugin = {\n      doCss: function doCss() {\n        var support = function support() {\n          var transition = ['transition', 'MozTransition', 'WebkitTransition', 'OTransition', 'msTransition', 'KhtmlTransition'];\n          var root = document.documentElement;\n\n          for (var i = 0; i < transition.length; i++) {\n            if (transition[i] in root.style) {\n              return true;\n            }\n          }\n        };\n\n        if (settings.useCSS && support()) {\n          return true;\n        }\n\n        return false;\n      },\n      keyPress: function keyPress() {\n        if (settings.keyPress) {\n          $(document).on('keyup.lightslider', function (e) {\n            if (!$(':focus').is('input, textarea')) {\n              if (e.preventDefault) {\n                e.preventDefault();\n              } else {\n                e.returnValue = false;\n              }\n\n              if (e.keyCode === 37) {\n                $el.goToPrevSlide();\n              } else if (e.keyCode === 39) {\n                $el.goToNextSlide();\n              }\n            }\n          });\n        }\n      },\n      controls: function controls() {\n        if (settings.controls) {\n          $el.after('<div class=\"lSAction\"><a class=\"lSPrev\">' + settings.prevHtml + '</a><a class=\"lSNext\">' + settings.nextHtml + '</a></div>');\n\n          if (!settings.autoWidth) {\n            if (length <= settings.item) {\n              $slide.find('.lSAction').hide();\n            }\n          } else {\n            if (refresh.calWidth(false) < elSize) {\n              $slide.find('.lSAction').hide();\n            }\n          }\n\n          $slide.find('.lSAction a').on('click', function (e) {\n            if (e.preventDefault) {\n              e.preventDefault();\n            } else {\n              e.returnValue = false;\n            }\n\n            if ($(this).attr('class') === 'lSPrev') {\n              $el.goToPrevSlide();\n            } else {\n              $el.goToNextSlide();\n            }\n\n            return false;\n          });\n        }\n      },\n      initialStyle: function initialStyle() {\n        var $this = this;\n\n        if (settings.mode === 'fade') {\n          settings.autoWidth = false;\n          settings.slideEndAnimation = false;\n        }\n\n        if (settings.auto) {\n          settings.slideEndAnimation = false;\n        }\n\n        if (settings.autoWidth) {\n          settings.slideMove = 1;\n          settings.item = 1;\n        }\n\n        if (settings.loop) {\n          settings.slideMove = 1;\n          settings.freeMove = false;\n        }\n\n        settings.onBeforeStart.call(this, $el);\n        refresh.chbreakpoint();\n        $el.addClass('lightSlider').wrap('<div class=\"lSSlideOuter ' + settings.addClass + '\"><div class=\"lSSlideWrapper\"></div></div>');\n        $slide = $el.parent('.lSSlideWrapper');\n\n        if (settings.rtl === true) {\n          $slide.parent().addClass('lSrtl');\n        }\n\n        if (settings.vertical) {\n          $slide.parent().addClass('vertical');\n          elSize = settings.verticalHeight;\n          $slide.css('height', elSize + 'px');\n        } else {\n          elSize = $el.outerWidth();\n        }\n\n        $children.addClass('lslide');\n\n        if (settings.loop === true && settings.mode === 'slide') {\n          refresh.calSW();\n\n          refresh.clone = function () {\n            if (refresh.calWidth(true) > elSize) {\n              /**/\n              var tWr = 0,\n                  tI = 0;\n\n              for (var k = 0; k < $children.length; k++) {\n                tWr += parseInt($el.find('.lslide').eq(k).width()) + settings.slideMargin;\n                tI++;\n\n                if (tWr >= elSize + settings.slideMargin) {\n                  break;\n                }\n              }\n\n              var tItem = settings.autoWidth === true ? tI : settings.item;\n              /**/\n\n              if (tItem < $el.find('.clone.left').length) {\n                for (var i = 0; i < $el.find('.clone.left').length - tItem; i++) {\n                  $children.eq(i).remove();\n                }\n              }\n\n              if (tItem < $el.find('.clone.right').length) {\n                for (var j = $children.length - 1; j > $children.length - 1 - $el.find('.clone.right').length; j--) {\n                  scene--;\n                  $children.eq(j).remove();\n                }\n              }\n              /**/\n\n\n              for (var n = $el.find('.clone.right').length; n < tItem; n++) {\n                $el.find('.lslide').eq(n).clone().removeClass('lslide').addClass('clone right').appendTo($el);\n                scene++;\n              }\n\n              for (var m = $el.find('.lslide').length - $el.find('.clone.left').length; m > $el.find('.lslide').length - tItem; m--) {\n                $el.find('.lslide').eq(m - 1).clone().removeClass('lslide').addClass('clone left').prependTo($el);\n              }\n\n              $children = $el.children();\n            } else {\n              if ($children.hasClass('clone')) {\n                $el.find('.clone').remove();\n                $this.move($el, 0);\n              }\n            }\n          };\n\n          refresh.clone();\n        }\n\n        refresh.sSW = function () {\n          length = $children.length;\n\n          if (settings.rtl === true && settings.vertical === false) {\n            gutter = 'margin-left';\n          }\n\n          if (settings.autoWidth === false) {\n            $children.css(property, slideWidth + 'px');\n          }\n\n          $children.css(gutter, settings.slideMargin + 'px');\n          w = refresh.calWidth(false);\n          $el.css(property, w + 'px');\n\n          if (settings.loop === true && settings.mode === 'slide') {\n            if (on === false) {\n              scene = $el.find('.clone.left').length;\n            }\n          }\n        };\n\n        refresh.calL = function () {\n          $children = $el.children();\n          length = $children.length;\n        };\n\n        if (this.doCss()) {\n          $slide.addClass('usingCss');\n        }\n\n        refresh.calL();\n\n        if (settings.mode === 'slide') {\n          refresh.calSW();\n          refresh.sSW();\n\n          if (settings.loop === true) {\n            slideValue = $this.slideValue();\n            this.move($el, slideValue);\n          }\n\n          if (settings.vertical === false) {\n            this.setHeight($el, false);\n          }\n        } else {\n          this.setHeight($el, true);\n          $el.addClass('lSFade');\n\n          if (!this.doCss()) {\n            $children.fadeOut(0);\n            $children.eq(scene).fadeIn(0);\n          }\n        }\n\n        if (settings.loop === true && settings.mode === 'slide') {\n          $children.eq(scene).addClass('active');\n        } else {\n          $children.first().addClass('active');\n        }\n      },\n      pager: function pager() {\n        var $this = this;\n\n        refresh.createPager = function () {\n          thumbWidth = (elSize - (settings.thumbItem * settings.thumbMargin - settings.thumbMargin)) / settings.thumbItem;\n          var $children = $slide.find('.lslide');\n          var length = $slide.find('.lslide').length;\n          var i = 0,\n              pagers = '',\n              v = 0;\n\n          for (i = 0; i < length; i++) {\n            if (settings.mode === 'slide') {\n              // calculate scene * slide value\n              if (!settings.autoWidth) {\n                v = i * ((slideWidth + settings.slideMargin) * settings.slideMove);\n              } else {\n                v += (parseInt($children.eq(i).width()) + settings.slideMargin) * settings.slideMove;\n              }\n            }\n\n            var thumb = $children.eq(i * settings.slideMove).attr('data-thumb');\n\n            if (settings.gallery === true) {\n              pagers += '<li style=\"width:100%;' + property + ':' + thumbWidth + 'px;' + gutter + ':' + settings.thumbMargin + 'px\"><a href=\"#\"><img src=\"' + thumb + '\" /></a></li>';\n            } else {\n              pagers += '<li><a href=\"#\">' + (i + 1) + '</a></li>';\n            }\n\n            if (settings.mode === 'slide') {\n              if (v >= w - elSize - settings.slideMargin) {\n                i = i + 1;\n                var minPgr = 2;\n\n                if (settings.autoWidth) {\n                  pagers += '<li><a href=\"#\">' + (i + 1) + '</a></li>';\n                  minPgr = 1;\n                }\n\n                if (i < minPgr) {\n                  pagers = null;\n                  $slide.parent().addClass('noPager');\n                } else {\n                  $slide.parent().removeClass('noPager');\n                }\n\n                break;\n              }\n            }\n          }\n\n          var $cSouter = $slide.parent();\n          $cSouter.find('.lSPager').html(pagers);\n\n          if (settings.gallery === true) {\n            if (settings.vertical === true) {\n              // set Gallery thumbnail width\n              $cSouter.find('.lSPager').css('width', settings.vThumbWidth + 'px');\n            }\n\n            pagerWidth = i * (settings.thumbMargin + thumbWidth) + 0.5;\n            $cSouter.find('.lSPager').css({\n              property: pagerWidth + 'px',\n              'transition-duration': settings.speed + 'ms'\n            });\n\n            if (settings.vertical === true) {\n              $slide.parent().css('padding-right', settings.vThumbWidth + settings.galleryMargin + 'px');\n            }\n\n            $cSouter.find('.lSPager').css(property, pagerWidth + 'px');\n          }\n\n          var $pager = $cSouter.find('.lSPager').find('li');\n          $pager.first().addClass('active');\n          $pager.on('click', function () {\n            if (settings.loop === true && settings.mode === 'slide') {\n              scene = scene + ($pager.index(this) - $cSouter.find('.lSPager').find('li.active').index());\n            } else {\n              scene = $pager.index(this);\n            }\n\n            $el.mode(false);\n\n            if (settings.gallery === true) {\n              $this.slideThumb();\n            }\n\n            return false;\n          });\n        };\n\n        if (settings.pager) {\n          var cl = 'lSpg';\n\n          if (settings.gallery) {\n            cl = 'lSGallery';\n          }\n\n          $slide.after('<ul class=\"lSPager ' + cl + '\"></ul>');\n          var gMargin = settings.vertical ? 'margin-left' : 'margin-top';\n          $slide.parent().find('.lSPager').css(gMargin, settings.galleryMargin + 'px');\n          refresh.createPager();\n        }\n\n        setTimeout(function () {\n          refresh.init();\n        }, 0);\n      },\n      setHeight: function setHeight(ob, fade) {\n        var obj = null,\n            $this = this;\n\n        if (settings.loop) {\n          obj = ob.children('.lslide ').first();\n        } else {\n          obj = ob.children().first();\n        }\n\n        var setCss = function setCss() {\n          var tH = obj.outerHeight(),\n              tP = 0,\n              tHT = tH;\n\n          if (fade) {\n            tH = 0;\n            tP = tHT * 100 / elSize;\n          }\n\n          ob.css({\n            'height': tH + 'px',\n            'padding-bottom': tP + '%'\n          });\n        };\n\n        setCss();\n\n        if (obj.find('img').length) {\n          if (obj.find('img')[0].complete) {\n            setCss();\n\n            if (!interval) {\n              $this.auto();\n            }\n          } else {\n            obj.find('img').on('load', function () {\n              setTimeout(function () {\n                setCss();\n\n                if (!interval) {\n                  $this.auto();\n                }\n              }, 100);\n            });\n          }\n        } else {\n          if (!interval) {\n            $this.auto();\n          }\n        }\n      },\n      active: function active(ob, t) {\n        if (this.doCss() && settings.mode === 'fade') {\n          $slide.addClass('on');\n        }\n\n        var sc = 0;\n\n        if (scene * settings.slideMove < length) {\n          ob.removeClass('active');\n\n          if (!this.doCss() && settings.mode === 'fade' && t === false) {\n            ob.fadeOut(settings.speed);\n          }\n\n          if (t === true) {\n            sc = scene;\n          } else {\n            sc = scene * settings.slideMove;\n          } //t === true ? sc = scene : sc = scene * settings.slideMove;\n\n\n          var l, nl;\n\n          if (t === true) {\n            l = ob.length;\n            nl = l - 1;\n\n            if (sc + 1 >= l) {\n              sc = nl;\n            }\n          }\n\n          if (settings.loop === true && settings.mode === 'slide') {\n            //t === true ? sc = scene - $el.find('.clone.left').length : sc = scene * settings.slideMove;\n            if (t === true) {\n              sc = scene - $el.find('.clone.left').length;\n            } else {\n              sc = scene * settings.slideMove;\n            }\n\n            if (t === true) {\n              l = ob.length;\n              nl = l - 1;\n\n              if (sc + 1 === l) {\n                sc = nl;\n              } else if (sc + 1 > l) {\n                sc = 0;\n              }\n            }\n          }\n\n          if (!this.doCss() && settings.mode === 'fade' && t === false) {\n            ob.eq(sc).fadeIn(settings.speed);\n          }\n\n          ob.eq(sc).addClass('active');\n        } else {\n          ob.removeClass('active');\n          ob.eq(ob.length - 1).addClass('active');\n\n          if (!this.doCss() && settings.mode === 'fade' && t === false) {\n            ob.fadeOut(settings.speed);\n            ob.eq(sc).fadeIn(settings.speed);\n          }\n        }\n      },\n      move: function move(ob, v) {\n        if (settings.rtl === true) {\n          v = -v;\n        }\n\n        if (this.doCss()) {\n          if (settings.vertical === true) {\n            ob.css({\n              'transform': 'translate3d(0px, ' + -v + 'px, 0px)',\n              '-webkit-transform': 'translate3d(0px, ' + -v + 'px, 0px)'\n            });\n          } else {\n            ob.css({\n              'transform': 'translate3d(' + -v + 'px, 0px, 0px)',\n              '-webkit-transform': 'translate3d(' + -v + 'px, 0px, 0px)'\n            });\n          }\n        } else {\n          if (settings.vertical === true) {\n            ob.css('position', 'relative').animate({\n              top: -v + 'px'\n            }, settings.speed, settings.easing);\n          } else {\n            ob.css('position', 'relative').animate({\n              left: -v + 'px'\n            }, settings.speed, settings.easing);\n          }\n        }\n\n        var $thumb = $slide.parent().find('.lSPager').find('li');\n        this.active($thumb, true);\n      },\n      fade: function fade() {\n        this.active($children, false);\n        var $thumb = $slide.parent().find('.lSPager').find('li');\n        this.active($thumb, true);\n      },\n      slide: function slide() {\n        var $this = this;\n\n        refresh.calSlide = function () {\n          if (w > elSize) {\n            slideValue = $this.slideValue();\n            $this.active($children, false);\n\n            if (slideValue > w - elSize - settings.slideMargin) {\n              slideValue = w - elSize - settings.slideMargin;\n            } else if (slideValue < 0) {\n              slideValue = 0;\n            }\n\n            $this.move($el, slideValue);\n\n            if (settings.loop === true && settings.mode === 'slide') {\n              if (scene >= length - $el.find('.clone.left').length / settings.slideMove) {\n                $this.resetSlide($el.find('.clone.left').length);\n              }\n\n              if (scene === 0) {\n                $this.resetSlide($slide.find('.lslide').length);\n              }\n            }\n          }\n        };\n\n        refresh.calSlide();\n      },\n      resetSlide: function resetSlide(s) {\n        var $this = this;\n        $slide.find('.lSAction a').addClass('disabled');\n        setTimeout(function () {\n          scene = s;\n          $slide.css('transition-duration', '0ms');\n          slideValue = $this.slideValue();\n          $this.active($children, false);\n          plugin.move($el, slideValue);\n          setTimeout(function () {\n            $slide.css('transition-duration', settings.speed + 'ms');\n            $slide.find('.lSAction a').removeClass('disabled');\n          }, 50);\n        }, settings.speed + 100);\n      },\n      slideValue: function slideValue() {\n        var _sV = 0;\n\n        if (settings.autoWidth === false) {\n          _sV = scene * ((slideWidth + settings.slideMargin) * settings.slideMove);\n        } else {\n          _sV = 0;\n\n          for (var i = 0; i < scene; i++) {\n            _sV += parseInt($children.eq(i).width()) + settings.slideMargin;\n          }\n        }\n\n        return _sV;\n      },\n      slideThumb: function slideThumb() {\n        var position;\n\n        switch (settings.currentPagerPosition) {\n          case 'left':\n            position = 0;\n            break;\n\n          case 'middle':\n            position = elSize / 2 - thumbWidth / 2;\n            break;\n\n          case 'right':\n            position = elSize - thumbWidth;\n        }\n\n        var sc = scene - $el.find('.clone.left').length;\n        var $pager = $slide.parent().find('.lSPager');\n\n        if (settings.mode === 'slide' && settings.loop === true) {\n          if (sc >= $pager.children().length) {\n            sc = 0;\n          } else if (sc < 0) {\n            sc = $pager.children().length;\n          }\n        }\n\n        var thumbSlide = sc * (thumbWidth + settings.thumbMargin) - position;\n\n        if (thumbSlide + elSize > pagerWidth) {\n          thumbSlide = pagerWidth - elSize - settings.thumbMargin;\n        }\n\n        if (thumbSlide < 0) {\n          thumbSlide = 0;\n        }\n\n        this.move($pager, thumbSlide);\n      },\n      auto: function auto() {\n        if (settings.auto) {\n          clearInterval(interval);\n          interval = setInterval(function () {\n            $el.goToNextSlide();\n          }, settings.pause);\n        }\n      },\n      pauseOnHover: function pauseOnHover() {\n        var $this = this;\n\n        if (settings.auto && settings.pauseOnHover) {\n          $slide.on('mouseenter', function () {\n            $(this).addClass('ls-hover');\n            $el.pause();\n            settings.auto = true;\n          });\n          $slide.on('mouseleave', function () {\n            $(this).removeClass('ls-hover');\n\n            if (!$slide.find('.lightSlider').hasClass('lsGrabbing')) {\n              $this.auto();\n            }\n          });\n        }\n      },\n      touchMove: function touchMove(endCoords, startCoords) {\n        $slide.css('transition-duration', '0ms');\n\n        if (settings.mode === 'slide') {\n          var distance = endCoords - startCoords;\n          var swipeVal = slideValue - distance;\n\n          if (swipeVal >= w - elSize - settings.slideMargin) {\n            if (settings.freeMove === false) {\n              swipeVal = w - elSize - settings.slideMargin;\n            } else {\n              var swipeValT = w - elSize - settings.slideMargin;\n              swipeVal = swipeValT + (swipeVal - swipeValT) / 5;\n            }\n          } else if (swipeVal < 0) {\n            if (settings.freeMove === false) {\n              swipeVal = 0;\n            } else {\n              swipeVal = swipeVal / 5;\n            }\n          }\n\n          this.move($el, swipeVal);\n        }\n      },\n      touchEnd: function touchEnd(distance) {\n        $slide.css('transition-duration', settings.speed + 'ms');\n\n        if (settings.mode === 'slide') {\n          var mxVal = false;\n          var _next = true;\n          slideValue = slideValue - distance;\n\n          if (slideValue > w - elSize - settings.slideMargin) {\n            slideValue = w - elSize - settings.slideMargin;\n\n            if (settings.autoWidth === false) {\n              mxVal = true;\n            }\n          } else if (slideValue < 0) {\n            slideValue = 0;\n          }\n\n          var gC = function gC(next) {\n            var ad = 0;\n\n            if (!mxVal) {\n              if (next) {\n                ad = 1;\n              }\n            }\n\n            if (!settings.autoWidth) {\n              var num = slideValue / ((slideWidth + settings.slideMargin) * settings.slideMove);\n              scene = parseInt(num) + ad;\n\n              if (slideValue >= w - elSize - settings.slideMargin) {\n                if (num % 1 !== 0) {\n                  scene++;\n                }\n              }\n            } else {\n              var tW = 0;\n\n              for (var i = 0; i < $children.length; i++) {\n                tW += parseInt($children.eq(i).width()) + settings.slideMargin;\n                scene = i + ad;\n\n                if (tW >= slideValue) {\n                  break;\n                }\n              }\n            }\n          };\n\n          if (distance >= settings.swipeThreshold) {\n            gC(false);\n            _next = false;\n          } else if (distance <= -settings.swipeThreshold) {\n            gC(true);\n            _next = false;\n          }\n\n          $el.mode(_next);\n          this.slideThumb();\n        } else {\n          if (distance >= settings.swipeThreshold) {\n            $el.goToPrevSlide();\n          } else if (distance <= -settings.swipeThreshold) {\n            $el.goToNextSlide();\n          }\n        }\n      },\n      enableDrag: function enableDrag() {\n        var $this = this;\n\n        if (!isTouch) {\n          var startCoords = 0,\n              endCoords = 0,\n              isDraging = false;\n          $slide.find('.lightSlider').addClass('lsGrab');\n          $slide.on('mousedown', function (e) {\n            if (w < elSize) {\n              if (w !== 0) {\n                return false;\n              }\n            }\n\n            if ($(e.target).attr('class') !== 'lSPrev' && $(e.target).attr('class') !== 'lSNext') {\n              startCoords = settings.vertical === true ? e.pageY : e.pageX;\n              isDraging = true;\n\n              if (e.preventDefault) {\n                e.preventDefault();\n              } else {\n                e.returnValue = false;\n              } // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723\n\n\n              $slide.scrollLeft += 1;\n              $slide.scrollLeft -= 1; // *\n\n              $slide.find('.lightSlider').removeClass('lsGrab').addClass('lsGrabbing');\n              clearInterval(interval);\n            }\n          });\n          $(window).on('mousemove', function (e) {\n            if (isDraging) {\n              endCoords = settings.vertical === true ? e.pageY : e.pageX;\n              $this.touchMove(endCoords, startCoords);\n            }\n          });\n          $(window).on('mouseup', function (e) {\n            if (isDraging) {\n              $slide.find('.lightSlider').removeClass('lsGrabbing').addClass('lsGrab');\n              isDraging = false;\n              endCoords = settings.vertical === true ? e.pageY : e.pageX;\n              var distance = endCoords - startCoords;\n\n              if (Math.abs(distance) >= settings.swipeThreshold) {\n                $(window).on('click.ls', function (e) {\n                  if (e.preventDefault) {\n                    e.preventDefault();\n                  } else {\n                    e.returnValue = false;\n                  }\n\n                  e.stopImmediatePropagation();\n                  e.stopPropagation();\n                  $(window).off('click.ls');\n                });\n              }\n\n              $this.touchEnd(distance);\n            }\n          });\n        }\n      },\n      enableTouch: function enableTouch() {\n        var $this = this;\n\n        if (isTouch) {\n          var startCoords = {},\n              endCoords = {};\n          $slide.on('touchstart', function (e) {\n            endCoords = e.originalEvent.targetTouches[0];\n            startCoords.pageX = e.originalEvent.targetTouches[0].pageX;\n            startCoords.pageY = e.originalEvent.targetTouches[0].pageY;\n            clearInterval(interval);\n          });\n          $slide.on('touchmove', function (e) {\n            if (w < elSize) {\n              if (w !== 0) {\n                return false;\n              }\n            }\n\n            var orig = e.originalEvent;\n            endCoords = orig.targetTouches[0];\n            var xMovement = Math.abs(endCoords.pageX - startCoords.pageX);\n            var yMovement = Math.abs(endCoords.pageY - startCoords.pageY);\n\n            if (settings.vertical === true) {\n              if (yMovement * 3 > xMovement) {\n                e.preventDefault();\n              }\n\n              $this.touchMove(endCoords.pageY, startCoords.pageY);\n            } else {\n              if (xMovement * 3 > yMovement) {\n                e.preventDefault();\n              }\n\n              $this.touchMove(endCoords.pageX, startCoords.pageX);\n            }\n          });\n          $slide.on('touchend', function () {\n            if (w < elSize) {\n              if (w !== 0) {\n                return false;\n              }\n            }\n\n            var distance;\n\n            if (settings.vertical === true) {\n              distance = endCoords.pageY - startCoords.pageY;\n            } else {\n              distance = endCoords.pageX - startCoords.pageX;\n            }\n\n            $this.touchEnd(distance);\n          });\n        }\n      },\n      build: function build() {\n        var $this = this;\n        $this.initialStyle();\n\n        if (this.doCss()) {\n          if (settings.enableTouch === true) {\n            $this.enableTouch();\n          }\n\n          if (settings.enableDrag === true) {\n            $this.enableDrag();\n          }\n        }\n\n        $(window).on('focus', function () {\n          $this.auto();\n        });\n        $(window).on('blur', function () {\n          clearInterval(interval);\n        });\n        $this.pager();\n        $this.pauseOnHover();\n        $this.controls();\n        $this.keyPress();\n      }\n    };\n    plugin.build();\n\n    refresh.init = function () {\n      refresh.chbreakpoint();\n\n      if (settings.vertical === true) {\n        if (settings.item > 1) {\n          elSize = settings.verticalHeight;\n        } else {\n          elSize = $children.outerHeight();\n        }\n\n        $slide.css('height', elSize + 'px');\n      } else {\n        elSize = $slide.outerWidth();\n      }\n\n      if (settings.loop === true && settings.mode === 'slide') {\n        refresh.clone();\n      }\n\n      refresh.calL();\n\n      if (settings.mode === 'slide') {\n        $el.removeClass('lSSlide');\n      }\n\n      if (settings.mode === 'slide') {\n        refresh.calSW();\n        refresh.sSW();\n      }\n\n      setTimeout(function () {\n        if (settings.mode === 'slide') {\n          $el.addClass('lSSlide');\n        }\n      }, 1000);\n\n      if (settings.pager) {\n        refresh.createPager();\n      }\n\n      if (settings.adaptiveHeight === true && settings.vertical === false) {\n        $el.css('height', $children.eq(scene).outerHeight(true));\n      }\n\n      if (settings.adaptiveHeight === false) {\n        if (settings.mode === 'slide') {\n          if (settings.vertical === false) {\n            plugin.setHeight($el, false);\n          } else {\n            plugin.auto();\n          }\n        } else {\n          plugin.setHeight($el, true);\n        }\n      }\n\n      if (settings.gallery === true) {\n        plugin.slideThumb();\n      }\n\n      if (settings.mode === 'slide') {\n        plugin.slide();\n      }\n\n      if (settings.autoWidth === false) {\n        if ($children.length <= settings.item) {\n          $slide.find('.lSAction').hide();\n        } else {\n          $slide.find('.lSAction').show();\n        }\n      } else {\n        if (refresh.calWidth(false) < elSize && w !== 0) {\n          $slide.find('.lSAction').hide();\n        } else {\n          $slide.find('.lSAction').show();\n        }\n      }\n    };\n\n    $el.goToPrevSlide = function () {\n      if (scene > 0) {\n        settings.onBeforePrevSlide.call(this, $el, scene);\n        scene--;\n        $el.mode(false);\n\n        if (settings.gallery === true) {\n          plugin.slideThumb();\n        }\n      } else {\n        if (settings.loop === true) {\n          settings.onBeforePrevSlide.call(this, $el, scene);\n\n          if (settings.mode === 'fade') {\n            var l = length - 1;\n            scene = parseInt(l / settings.slideMove);\n          }\n\n          $el.mode(false);\n\n          if (settings.gallery === true) {\n            plugin.slideThumb();\n          }\n        } else if (settings.slideEndAnimation === true) {\n          $el.addClass('leftEnd');\n          setTimeout(function () {\n            $el.removeClass('leftEnd');\n          }, 400);\n        }\n      }\n    };\n\n    $el.goToNextSlide = function () {\n      var nextI = true;\n\n      if (settings.mode === 'slide') {\n        var _slideValue = plugin.slideValue();\n\n        nextI = _slideValue < w - elSize - settings.slideMargin;\n      }\n\n      if (scene * settings.slideMove < length - settings.slideMove && nextI) {\n        settings.onBeforeNextSlide.call(this, $el, scene);\n        scene++;\n        $el.mode(false);\n\n        if (settings.gallery === true) {\n          plugin.slideThumb();\n        }\n      } else {\n        if (settings.loop === true) {\n          settings.onBeforeNextSlide.call(this, $el, scene);\n          scene = 0;\n          $el.mode(false);\n\n          if (settings.gallery === true) {\n            plugin.slideThumb();\n          }\n        } else if (settings.slideEndAnimation === true) {\n          $el.addClass('rightEnd');\n          setTimeout(function () {\n            $el.removeClass('rightEnd');\n          }, 400);\n        }\n      }\n    };\n\n    $el.mode = function (_touch) {\n      if (settings.adaptiveHeight === true && settings.vertical === false) {\n        $el.css('height', $children.eq(scene).outerHeight(true));\n      }\n\n      if (on === false) {\n        if (settings.mode === 'slide') {\n          if (plugin.doCss()) {\n            $el.addClass('lSSlide');\n\n            if (settings.speed !== '') {\n              $slide.css('transition-duration', settings.speed + 'ms');\n            }\n\n            if (settings.cssEasing !== '') {\n              $slide.css('transition-timing-function', settings.cssEasing);\n            }\n          }\n        } else {\n          if (plugin.doCss()) {\n            if (settings.speed !== '') {\n              $el.css('transition-duration', settings.speed + 'ms');\n            }\n\n            if (settings.cssEasing !== '') {\n              $el.css('transition-timing-function', settings.cssEasing);\n            }\n          }\n        }\n      }\n\n      if (!_touch) {\n        settings.onBeforeSlide.call(this, $el, scene);\n      }\n\n      if (settings.mode === 'slide') {\n        plugin.slide();\n      } else {\n        plugin.fade();\n      }\n\n      if (!$slide.hasClass('ls-hover')) {\n        plugin.auto();\n      }\n\n      setTimeout(function () {\n        if (!_touch) {\n          settings.onAfterSlide.call(this, $el, scene);\n        }\n      }, settings.speed);\n      on = true;\n    };\n\n    $el.play = function () {\n      $el.goToNextSlide();\n      settings.auto = true;\n      plugin.auto();\n    };\n\n    $el.pause = function () {\n      settings.auto = false;\n      clearInterval(interval);\n    };\n\n    $el.refresh = function () {\n      refresh.init();\n    };\n\n    $el.getCurrentSlideCount = function () {\n      var sc = scene;\n\n      if (settings.loop) {\n        var ln = $slide.find('.lslide').length,\n            cl = $el.find('.clone.left').length;\n\n        if (scene <= cl - 1) {\n          sc = ln + (scene - cl);\n        } else if (scene >= ln + cl) {\n          sc = scene - ln - cl;\n        } else {\n          sc = scene - cl;\n        }\n      }\n\n      return sc + 1;\n    };\n\n    $el.getTotalSlideCount = function () {\n      return $slide.find('.lslide').length;\n    };\n\n    $el.goToSlide = function (s) {\n      if (settings.loop) {\n        scene = s + $el.find('.clone.left').length - 1;\n      } else {\n        scene = s;\n      }\n\n      $el.mode(false);\n\n      if (settings.gallery === true) {\n        plugin.slideThumb();\n      }\n    };\n\n    $el.destroy = function () {\n      if ($el.lightSlider) {\n        $el.goToPrevSlide = function () {};\n\n        $el.goToNextSlide = function () {};\n\n        $el.mode = function () {};\n\n        $el.play = function () {};\n\n        $el.pause = function () {};\n\n        $el.refresh = function () {};\n\n        $el.getCurrentSlideCount = function () {};\n\n        $el.getTotalSlideCount = function () {};\n\n        $el.goToSlide = function () {};\n\n        $el.lightSlider = null;\n        refresh = {\n          init: function init() {}\n        };\n        $el.parent().parent().find('.lSAction, .lSPager').remove();\n        $el.removeClass('lightSlider lSFade lSSlide lsGrab lsGrabbing leftEnd right').removeAttr('style').unwrap().unwrap();\n        $el.children().removeAttr('style');\n        $children.removeClass('lslide active');\n        $el.find('.clone').remove();\n        $children = null;\n        interval = null;\n        on = false;\n        scene = 0;\n      }\n    };\n\n    setTimeout(function () {\n      settings.onSliderLoad.call(this, $el);\n    }, 10);\n    $(window).on('resize orientationchange', function (e) {\n      setTimeout(function () {\n        if (e.preventDefault) {\n          e.preventDefault();\n        } else {\n          e.returnValue = false;\n        }\n\n        refresh.init();\n      }, 200);\n    });\n    return this;\n  };\n})(jQuery);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./package/resources/js/website/lightslider.js\n");

/***/ }),

/***/ "./package/resources/js/website/main.js":
/*!**********************************************!*\
  !*** ./package/resources/js/website/main.js ***!
  \**********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var _lightslider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lightslider */ \"./package/resources/js/website/lightslider.js\");\n/* harmony import */ var _lightslider__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lightslider__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lightcase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lightcase */ \"./package/resources/js/website/lightcase.js\");\n/* harmony import */ var _lightcase__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_lightcase__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _cs_select__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cs-select */ \"./package/resources/js/website/cs-select.js\");\n/* harmony import */ var _cs_select__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_cs_select__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _slick__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./slick */ \"./package/resources/js/website/slick.js\");\n/* harmony import */ var _slick__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_slick__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _sticky__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sticky */ \"./package/resources/js/website/sticky.js\");\n/* harmony import */ var _sticky__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_sticky__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _blazy__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./blazy */ \"./package/resources/js/website/blazy.js\");\n/* harmony import */ var _blazy__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_blazy__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _yt__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./yt */ \"./package/resources/js/website/yt.js\");\n/* harmony import */ var _yt__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_yt__WEBPACK_IMPORTED_MODULE_6__);\n// window.axios = require('axios');\n// window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n\n/**\n * Next we will register the CSRF Token as a common header with Axios so that\n * all outgoing HTTP requests automatically have it attached. This is just\n * a simple convenience so we don't have to attach every token manually.\n */\n// let token = document.head.querySelector('meta[name=\"csrf-token\"]');\n// if (token) {\n//     window.axios.defaults.headers.common['X-CSRF-TOKEN'] = token.content;\n// } else {\n//     console.error('CSRF token not found: https://laravel.com/docs/csrf#csrf-x-csrf-token');\n// }\n\n/**\n * Echo exposes an expressive API for subscribing to channels and listening\n * for events that are broadcast by Laravel. Echo and event broadcasting\n * allows your team to easily build robust real-time web applications.\n */\n// import Echo from 'laravel-echo'\n// window.Pusher = require('pusher-js');\n// window.Echo = new Echo({\n//     broadcaster: 'pusher',\n//     key: process.env.MIX_PUSHER_APP_KEY,\n//     cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n//     encrypted: true\n// });\n\n\n\n\n\n\n\n/*\nif(!document.__defineGetter__) {\n\tObject.defineProperty(document, 'cookie', {\n\t    get: function(){return ''},\n\t    set: function(){return true},\n\t});\n} else {\n    document.__defineGetter__(\"cookie\", function() { return '';} );\n    document.__defineSetter__(\"cookie\", function() {} );\n}\n*/\n\n$(document).ready(function () {\n  $(\"body\").removeClass(\"preload\");\n  $(\"#load__overlay\").addClass(\"hidden\");\n\n  if ($.isFunction(window[\"Blazy\"])) {\n    var bLazy = new Blazy();\n  } else {//alert(\"not a function\");\n  } //STICKY NAV\n\n\n  $(function () {\n    function stickNav() {\n      var st = $(window).scrollTop();\n\n      if (st > $('body').offset().top + 100) {\n        $(\"header\").addClass(\"sticky\");\n      } else {\n        $(\"header\").removeClass(\"sticky\");\n      }\n    }\n\n    ;\n    $(window).scroll(function () {\n      stickNav();\n    });\n    stickNav();\n  });\n  $(\"header .fa-bars\").click(function () {\n    $(\"nav\").toggleClass(\"active\");\n    $(\".mobile-overlay\").toggleClass(\"active\");\n  });\n  $(\".mobile-overlay\").click(function () {\n    $(\"nav\").toggleClass(\"active\");\n    $(\".mobile-overlay\").toggleClass(\"active\");\n  });\n\n  function backgroundSlider(action, slide) {\n    var slides = $(\"#header .background img\");\n    var count = slides.length;\n    $(\"#background__slider-nav\").empty();\n    slides.each(function (index) {\n      $(this).attr(\"data-id\", index + 1);\n    });\n\n    if (typeof action === 'undefined' || !action) {\n      $(\"#header .background img[data-id='1']\").addClass(\"active\");\n      var title = $(\"#header .background img[data-id='1']\").attr(\"data-title\");\n      var link = $(\"#header .background img[data-id='1']\").attr(\"data-link\");\n      $(\"#header-bar h6\").html(title);\n      $(\"#header-bar a\").attr('href', link);\n    }\n\n    if (action === \"next\") {\n      var id = parseInt($(\"#header .background img.active\").attr(\"data-id\"));\n      id++;\n      slides.removeClass(\"active\");\n\n      if (id > count) {\n        $(\"#header .background img[data-id='1']\").addClass(\"active\");\n        $(\"#header .background img[data-id='\" + count + \"']\").removeClass(\"hidden\");\n        var title = $(\"#header .background img[data-id='1']\").attr(\"data-title\");\n        var link = $(\"#header .background img[data-id='1']\").attr(\"data-link\");\n        $(\"#header-bar h6\").html(title);\n        $(\"#header-bar a\").attr('href', link);\n      } else {\n        $(\"#header .background img[data-id='\" + id + \"']\").addClass(\"active\");\n        $(\"#header .background img[data-id='\" + count + \"']\").removeClass(\"hidden\");\n        var title = $(\"#header .background img[data-id='\" + id + \"']\").attr(\"data-title\");\n        var link = $(\"#header .background img[data-id='\" + id + \"']\").attr(\"data-link\");\n        $(\"#header-bar h6\").html(title);\n        $(\"#header-bar a\").attr('href', link);\n      }\n    }\n\n    if (action === \"prev\") {\n      var id = parseInt($(\"#header .background img.active\").attr(\"data-id\"));\n      id--;\n      slides.removeClass(\"active\");\n\n      if (id === 0) {\n        $(\"#header .background img[data-id='\" + count + \"']\").addClass(\"active\");\n        $(\"#header .background img[data-id='\" + count + \"']\").removeClass(\"hidden\");\n        var title = $(\"#header .background img[data-id='\" + count + \"']\").attr(\"data-title\");\n        var link = $(\"#header .background img[data-id='\" + count + \"']\").attr(\"data-link\");\n        $(\"#header-bar h6\").html(title);\n        $(\"#header-bar a\").attr('href', link);\n      } else {\n        $(\"#header .background img[data-id='\" + id + \"']\").addClass(\"active\");\n        $(\"#header .background img[data-id='\" + count + \"']\").removeClass(\"hidden\");\n        var title = $(\"#header .background img[data-id='\" + id + \"']\").attr(\"data-title\");\n        var link = $(\"#header .background img[data-id='\" + id + \"']\").attr(\"data-link\");\n        $(\"#header-bar h6\").html(title);\n        $(\"#header-bar a\").attr('href', link);\n      }\n    }\n    /*\n    \t\tvar bLazy = new Blazy();\n    \t\tbLazy.revalidate();\n    */\n\n  }\n\n  ;\n  backgroundSlider();\n  var interval = setInterval(function () {\n    backgroundSlider(\"next\");\n  }, 7000);\n  $(\"#next\").click(function () {\n    backgroundSlider(\"next\");\n    window.clearInterval(interval);\n    interval = setInterval(function () {\n      backgroundSlider(\"next\");\n    }, 7000);\n  });\n  $(\"#prev\").click(function () {\n    backgroundSlider(\"prev\");\n    window.clearInterval(interval);\n    interval = setInterval(function () {\n      backgroundSlider(\"prev\");\n    }, 7000);\n  }); //YT video\n\n  $('#video-home').YTPlayer({\n    fitToBackground: true,\n    videoId: 'GXPdpj7MU6A',\n    start: 12,\n    startSeconds: 12\n  }); //RECAPTHCA\n\n  function isCaptchaChecked() {\n    return grecaptcha && grecaptcha.getResponse().length !== 0;\n  } //FORM AJAX\n\n\n  $(\"form\").submit(function (e) {\n    var errorMsg = $(this).attr('data-error');\n    var count = 0;\n    var valCount = 0;\n    $(this).find(\".form-group\").each(function (index) {\n      var input = $(this).find('input, textarea');\n\n      if (input.prop('required')) {\n        count++;\n\n        if (input.val().length > 3) {\n          valCount++;\n          input.parent().removeClass('error');\n        } else {\n          input.parent().addClass('error');\n        }\n      }\n    });\n\n    if (count == valCount) {\n      //console.log('done');\n      return;\n    }\n\n    e.preventDefault();\n  });\n  /*\n  \t$(\"#form__post\").click(function() {\n  \t\t\n  \t\twarnings = 0;\n  \t\t\n  \t\t$(\"form .input\").each(function(index){\n  \t\t\tif($(this).find('input:checkbox:not(:checked)').length > 0){\n  \t\t\t\t$(this).find('.input-error').html('Oeps, een veldje vergeten!');\n  \t\t\t\t$(this).find(':input').addClass('warning');\n  \t\t\t\t$(this).addClass('warning');\n  \t\t\t}else{\n  \t\t\t\tif( !$($(this).find(\":input\")).val() || $($(this).find(\":input\")).val().length < 2 && $(this).find(\":input\").prop('required') ) {\n  \t\t\t        $(this).find('.input-error').html('Oeps, een veldje vergeten!');\n  \t\t\t        $(this).find(':input').addClass('warning');\n  \t\t\t        warnings++;\n  \t\t\t    }\n  \t\t\t}\t\n  \t\t});\n  \t\t\n  \t\t//REMOVE WARNING WHEN VALUE IS CLICKED (checkbox, radio and file)\n  \t\t$(\".warning, .checkbox-custom-label\").change(function(){\n  \t\t\tif( $(this).val() || $($(this).find(\":input\")).val().length > 2 && $(this).prop('required') ) {\n  \t\t        $(this).parent().find('.input-error').html('');\n  \t\t        $(this).parent().removeClass('warning');\n  \t\t        $(this).removeClass('warning');\n  \t\t    }\n  \t\t});\n  \t\t\n  \t\t//REMOVE WARNING WHEN VALUE IS TYPED (type inputs)\n  \t\t$(\".warning, .checkbox-custom-label\").keyup(function(){\n  \t\t\tif( $(this).val() || $($(this).find(\":input\")).val().length > 2 && $(this).prop('required') ) {\n  \t\t        $(this).parent().find('.input-error').html('');\n  \t\t        $(this).parent().removeClass('warning');\n  \t\t        $(this).removeClass('warning');\n  \t\t    }\n  \t\t});\n  \t\t\n  \t\t//captcha check\n  \t\tif (isCaptchaChecked()) {\n  \t\t  \t$(\".input-error-recaptcha\").html('');\n  \t\t}else{\n  \t\t\t$(\".input-error-recaptcha\").html('Oeps, een veldje vergeten!');\n  \t\t\twarnings++;\n  \t\t}\n  \t\t\n  \t\t//FILE SIZE CHECK\n  \t\tfile_size_check();\n  \t\t\n  \t\t//CHECK IF FORM IS READY TO SUBMIT\n  \t\tif(warnings == 0 && fileSize == true){\n  \t\t\t$(\"form\").submit();\n  \t\t}\n  \t\t\n  \t\treturn false;\n  \t\te.preventDefault();\n  \t});\n  \t\n  \t$(\"form\").submit(function(e) {\n  \t\t\n  \t\t$(\"form .btn\").css(\"width\",\"50px\");\n  \t\t$(\"form .btn\").attr(\"id\",\"\");\n  \t\t$(\"form .btn span\").addClass(\"hidden\");\n  \t\t$(\"form .btn .form__loader\").removeClass(\"hidden\");\n  \t\t\n  \t\t//\n  \t\tvar files = e.target.files;\n  \t\t\n  \t\te.stopPropagation();\n  \t    e.preventDefault();\n  \t    \n  \t\tvar data = new FormData($(this)[0]);\n  \n  \t\t//\n  \t\t\n  \t\tvar url = \"/functions/submit_form.php\"; //reCAPTCHA placeholder element must be empty\n  \t    $.ajax({\n  \t\t\ttype: \"POST\",\n  \t\t\turl: url,\n  \t\t\t\n  \t \t\t//data: $(\"form\").serialize(), // serializes the form's elements.\n  \t\t\t\n  \t\t\tdata: data,\n  \t\t\tcache: false,\n  \t\t\tprocessData: false,\n  \t\t\tcontentType: false,\n  \t\t\t\n  \t\t\tsuccess: function(data)\n  \t\t\t{\n  \t\t\t\t\n  \t\t\t\tif(data == \"1\"){\n  \t\t\t\t\t$(\"form\").find(\".grid\").remove();\n  \t\t\t\t\t$(\"form\").html(\"<p class='text--green'>Uw bericht is verstuurd! Wij nemen spoedig contact met u op.</p>\");\n  \t\t\t\t}else{\n  \t\t\t\t\t$(\"form\").find(\".grid\").remove();\n  \t\t\t\t\t$(\"form\").html(\"<p class='text--red'>Oeps er is iets fout gelopen! Ververs de pagina en probeer opnieuw.</p>\");\n  \t\t\t\t}\n  \t\t\t},\n  \t        error: function() {\n  \t\t        console.log(data);\n  \t\t\t\t$(\"form\").find(\".grid\").remove();\n  \t\t\t\t$(\"form\").html(\"<p class='text--red'>Oeps er is iets fout gelopen! Ververs de pagina en probeer opnieuw.</p>\");\n  \t        }\n  \t    });\n  \t    return false; // avoid to execute the actual submit of the form.\n  \t});\n  */\n});\n/*==========  Slick  ==========*/\n\n$('.slider').slick({\n  infinite: true,\n  prevArrow: $('.slider-prev'),\n  nextArrow: $('.slider-next')\n});\n/*==========  Map  ==========*/\n\nvar geocoder;\nvar map;\n\nfunction initialize_full_width_map() {\n  if ($('#map-footer').length) {\n    var myLatLng = new google.maps.LatLng(51.3473044, 4.6432419999999865);\n    var mapOptions = {\n      zoom: 15,\n      center: myLatLng,\n      scrollwheel: false,\n      panControl: false,\n      zoomControl: false,\n      scaleControl: false,\n      mapTypeControl: false,\n      streetViewControl: false,\n      styles: [{\n        \"featureType\": \"landscape\",\n        \"elementType\": \"labels\",\n        \"stylers\": [{\n          \"visibility\": \"off\"\n        }]\n      }, {\n        \"featureType\": \"transit\",\n        \"elementType\": \"labels\",\n        \"stylers\": [{\n          \"visibility\": \"off\"\n        }]\n      }, {\n        \"featureType\": \"poi\",\n        \"elementType\": \"labels\",\n        \"stylers\": [{\n          \"visibility\": \"off\"\n        }]\n      }, {\n        \"featureType\": \"water\",\n        \"elementType\": \"labels\",\n        \"stylers\": [{\n          \"visibility\": \"off\"\n        }]\n      }, {\n        \"featureType\": \"road\",\n        \"elementType\": \"labels.icon\",\n        \"stylers\": [{\n          \"visibility\": \"off\"\n        }]\n      }, {\n        \"stylers\": [{\n          \"hue\": \"#00aaff\"\n        }, {\n          \"saturation\": -100\n        }, {\n          \"gamma\": 1.15\n        }, {\n          \"lightness\": 10\n        }]\n      }, {\n        \"featureType\": \"road\",\n        \"elementType\": \"labels.text.fill\",\n        \"stylers\": [{\n          \"visibility\": \"on\"\n        }, {\n          \"lightness\": 50\n        }]\n      }, {\n        \"featureType\": \"road\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [{\n          \"lightness\": 30\n        }]\n      }]\n    };\n    map = new google.maps.Map(document.getElementById('map-footer'), mapOptions);\n    var marker = new google.maps.Marker({\n      position: myLatLng,\n      map: map,\n      title: 'Provad',\n      icon: '/public/images/mapmarker.png'\n    });\n\n    if ($('#map-project').length) {\n      map = new google.maps.Map(document.getElementById('map-project'), mapOptions);\n      var geocoder = new google.maps.Geocoder();\n      geocoder.geocode({\n        'address': $('#map-project').attr(\"data-address\")\n      }, function (results, status) {\n        if (status == google.maps.GeocoderStatus.OK) {\n          new google.maps.Marker({\n            position: results[0].geometry.location,\n            map: map,\n            title: 'Provad',\n            icon: '/public/images/mapmarker.png'\n          });\n          map.setCenter(results[0].geometry.location);\n        }\n      });\n      /*\n      \t\t\tmap = new google.maps.Map(document.getElementById('map-project'), mapOptions);\n      \t\t\tvar marker = new google.maps.Marker({\n      \t\t\t\tposition: myLatLng,\n      \t\t\t\tmap: map,\n      \t\t\t\ttitle: 'Provad',\n      \t\t\t\ticon: '/public/images/mapmarker.png'\n      \t\t\t});\n      */\n    }\n  } else {\n    return false;\n  }\n\n  return false;\n}\n\ngoogle.maps.event.addDomListener(window, 'load', initialize_full_width_map);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWNrYWdlL3Jlc291cmNlcy9qcy93ZWJzaXRlL21haW4uanM/ZTJlMyJdLCJuYW1lcyI6WyIkIiwiZG9jdW1lbnQiLCJyZWFkeSIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJpc0Z1bmN0aW9uIiwid2luZG93IiwiYkxhenkiLCJCbGF6eSIsInN0aWNrTmF2Iiwic3QiLCJzY3JvbGxUb3AiLCJvZmZzZXQiLCJ0b3AiLCJzY3JvbGwiLCJjbGljayIsInRvZ2dsZUNsYXNzIiwiYmFja2dyb3VuZFNsaWRlciIsImFjdGlvbiIsInNsaWRlIiwic2xpZGVzIiwiY291bnQiLCJsZW5ndGgiLCJlbXB0eSIsImVhY2giLCJpbmRleCIsImF0dHIiLCJ0aXRsZSIsImxpbmsiLCJodG1sIiwiaWQiLCJwYXJzZUludCIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiWVRQbGF5ZXIiLCJmaXRUb0JhY2tncm91bmQiLCJ2aWRlb0lkIiwic3RhcnQiLCJzdGFydFNlY29uZHMiLCJpc0NhcHRjaGFDaGVja2VkIiwiZ3JlY2FwdGNoYSIsImdldFJlc3BvbnNlIiwic3VibWl0IiwiZSIsImVycm9yTXNnIiwidmFsQ291bnQiLCJmaW5kIiwiaW5wdXQiLCJwcm9wIiwidmFsIiwicGFyZW50IiwicHJldmVudERlZmF1bHQiLCJzbGljayIsImluZmluaXRlIiwicHJldkFycm93IiwibmV4dEFycm93IiwiZ2VvY29kZXIiLCJtYXAiLCJpbml0aWFsaXplX2Z1bGxfd2lkdGhfbWFwIiwibXlMYXRMbmciLCJnb29nbGUiLCJtYXBzIiwiTGF0TG5nIiwibWFwT3B0aW9ucyIsInpvb20iLCJjZW50ZXIiLCJzY3JvbGx3aGVlbCIsInBhbkNvbnRyb2wiLCJ6b29tQ29udHJvbCIsInNjYWxlQ29udHJvbCIsIm1hcFR5cGVDb250cm9sIiwic3RyZWV0Vmlld0NvbnRyb2wiLCJzdHlsZXMiLCJNYXAiLCJnZXRFbGVtZW50QnlJZCIsIm1hcmtlciIsIk1hcmtlciIsInBvc2l0aW9uIiwiaWNvbiIsIkdlb2NvZGVyIiwiZ2VvY29kZSIsInJlc3VsdHMiLCJzdGF0dXMiLCJHZW9jb2RlclN0YXR1cyIsIk9LIiwiZ2VvbWV0cnkiLCJsb2NhdGlvbiIsInNldENlbnRlciIsImV2ZW50IiwiYWRkRG9tTGlzdGVuZXIiXSwibWFwcGluZ3MiOiJBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQUEsQ0FBQyxDQUFDQyxRQUFELENBQUQsQ0FBWUMsS0FBWixDQUFrQixZQUFXO0FBRTVCRixHQUFDLENBQUMsTUFBRCxDQUFELENBQVVHLFdBQVYsQ0FBc0IsU0FBdEI7QUFDQUgsR0FBQyxDQUFDLGdCQUFELENBQUQsQ0FBb0JJLFFBQXBCLENBQTZCLFFBQTdCOztBQUVBLE1BQUlKLENBQUMsQ0FBQ0ssVUFBRixDQUFhQyxNQUFNLENBQUMsT0FBRCxDQUFuQixDQUFKLEVBQW1DO0FBQy9CLFFBQUlDLEtBQUssR0FBRyxJQUFJQyxLQUFKLEVBQVo7QUFDSCxHQUZELE1BRU8sQ0FDSDtBQUNILEdBVDJCLENBVzVCOzs7QUFDQVIsR0FBQyxDQUFDLFlBQVc7QUFFWixhQUFTUyxRQUFULEdBQW1CO0FBQ2xCLFVBQUlDLEVBQUUsR0FBR1YsQ0FBQyxDQUFDTSxNQUFELENBQUQsQ0FBVUssU0FBVixFQUFUOztBQUNNLFVBQUlELEVBQUUsR0FBR1YsQ0FBQyxDQUFDLE1BQUQsQ0FBRCxDQUFVWSxNQUFWLEdBQW1CQyxHQUFuQixHQUF5QixHQUFsQyxFQUF1QztBQUNuQ2IsU0FBQyxDQUFDLFFBQUQsQ0FBRCxDQUFZSSxRQUFaLENBQXFCLFFBQXJCO0FBQ0gsT0FGRCxNQUVPO0FBQ0hKLFNBQUMsQ0FBQyxRQUFELENBQUQsQ0FBWUcsV0FBWixDQUF3QixRQUF4QjtBQUNIO0FBQ1A7O0FBQUE7QUFFRUgsS0FBQyxDQUFDTSxNQUFELENBQUQsQ0FBVVEsTUFBVixDQUFpQixZQUFXO0FBQ3hCTCxjQUFRO0FBQ1gsS0FGRDtBQUlBQSxZQUFRO0FBQ1gsR0FoQkEsQ0FBRDtBQXFCQVQsR0FBQyxDQUFDLGlCQUFELENBQUQsQ0FBcUJlLEtBQXJCLENBQTJCLFlBQVc7QUFDckNmLEtBQUMsQ0FBQyxLQUFELENBQUQsQ0FBU2dCLFdBQVQsQ0FBcUIsUUFBckI7QUFDQWhCLEtBQUMsQ0FBQyxpQkFBRCxDQUFELENBQXFCZ0IsV0FBckIsQ0FBaUMsUUFBakM7QUFDQSxHQUhEO0FBS0FoQixHQUFDLENBQUMsaUJBQUQsQ0FBRCxDQUFxQmUsS0FBckIsQ0FBMkIsWUFBVztBQUNyQ2YsS0FBQyxDQUFDLEtBQUQsQ0FBRCxDQUFTZ0IsV0FBVCxDQUFxQixRQUFyQjtBQUNBaEIsS0FBQyxDQUFDLGlCQUFELENBQUQsQ0FBcUJnQixXQUFyQixDQUFpQyxRQUFqQztBQUNBLEdBSEQ7O0FBS0EsV0FBU0MsZ0JBQVQsQ0FBMEJDLE1BQTFCLEVBQWtDQyxLQUFsQyxFQUF3QztBQUN2QyxRQUFJQyxNQUFNLEdBQUdwQixDQUFDLENBQUMseUJBQUQsQ0FBZDtBQUNBLFFBQUlxQixLQUFLLEdBQUdELE1BQU0sQ0FBQ0UsTUFBbkI7QUFFQXRCLEtBQUMsQ0FBQyx5QkFBRCxDQUFELENBQTZCdUIsS0FBN0I7QUFFQUgsVUFBTSxDQUFDSSxJQUFQLENBQVksVUFBU0MsS0FBVCxFQUFlO0FBQzFCekIsT0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRMEIsSUFBUixDQUFhLFNBQWIsRUFBd0JELEtBQUssR0FBQyxDQUE5QjtBQUNBLEtBRkQ7O0FBSUEsUUFBRyxPQUFPUCxNQUFQLEtBQWtCLFdBQWxCLElBQWlDLENBQUNBLE1BQXJDLEVBQTRDO0FBQzNDbEIsT0FBQyxDQUFDLHNDQUFELENBQUQsQ0FBMENJLFFBQTFDLENBQW1ELFFBQW5EO0FBQ0EsVUFBSXVCLEtBQUssR0FBRzNCLENBQUMsQ0FBQyxzQ0FBRCxDQUFELENBQTBDMEIsSUFBMUMsQ0FBK0MsWUFBL0MsQ0FBWjtBQUNBLFVBQUlFLElBQUksR0FBRzVCLENBQUMsQ0FBQyxzQ0FBRCxDQUFELENBQTBDMEIsSUFBMUMsQ0FBK0MsV0FBL0MsQ0FBWDtBQUVBMUIsT0FBQyxDQUFDLGdCQUFELENBQUQsQ0FBb0I2QixJQUFwQixDQUF5QkYsS0FBekI7QUFDQTNCLE9BQUMsQ0FBQyxlQUFELENBQUQsQ0FBbUIwQixJQUFuQixDQUF3QixNQUF4QixFQUErQkUsSUFBL0I7QUFDQTs7QUFFRCxRQUFHVixNQUFNLEtBQUssTUFBZCxFQUFxQjtBQUNwQixVQUFJWSxFQUFFLEdBQUdDLFFBQVEsQ0FBQy9CLENBQUMsQ0FBQyxnQ0FBRCxDQUFELENBQW9DMEIsSUFBcEMsQ0FBeUMsU0FBekMsQ0FBRCxDQUFqQjtBQUNBSSxRQUFFO0FBRUZWLFlBQU0sQ0FBQ2pCLFdBQVAsQ0FBbUIsUUFBbkI7O0FBRUEsVUFBRzJCLEVBQUUsR0FBR1QsS0FBUixFQUFjO0FBQ2JyQixTQUFDLENBQUMsc0NBQUQsQ0FBRCxDQUEwQ0ksUUFBMUMsQ0FBbUQsUUFBbkQ7QUFDQUosU0FBQyxDQUFDLHNDQUFvQ3FCLEtBQXBDLEdBQTBDLElBQTNDLENBQUQsQ0FBa0RsQixXQUFsRCxDQUE4RCxRQUE5RDtBQUNBLFlBQUl3QixLQUFLLEdBQUczQixDQUFDLENBQUMsc0NBQUQsQ0FBRCxDQUEwQzBCLElBQTFDLENBQStDLFlBQS9DLENBQVo7QUFDQSxZQUFJRSxJQUFJLEdBQUc1QixDQUFDLENBQUMsc0NBQUQsQ0FBRCxDQUEwQzBCLElBQTFDLENBQStDLFdBQS9DLENBQVg7QUFFQTFCLFNBQUMsQ0FBQyxnQkFBRCxDQUFELENBQW9CNkIsSUFBcEIsQ0FBeUJGLEtBQXpCO0FBQ0EzQixTQUFDLENBQUMsZUFBRCxDQUFELENBQW1CMEIsSUFBbkIsQ0FBd0IsTUFBeEIsRUFBK0JFLElBQS9CO0FBQ0EsT0FSRCxNQVFLO0FBQ0o1QixTQUFDLENBQUMsc0NBQW9DOEIsRUFBcEMsR0FBdUMsSUFBeEMsQ0FBRCxDQUErQzFCLFFBQS9DLENBQXdELFFBQXhEO0FBQ0FKLFNBQUMsQ0FBQyxzQ0FBb0NxQixLQUFwQyxHQUEwQyxJQUEzQyxDQUFELENBQWtEbEIsV0FBbEQsQ0FBOEQsUUFBOUQ7QUFDQSxZQUFJd0IsS0FBSyxHQUFHM0IsQ0FBQyxDQUFDLHNDQUFvQzhCLEVBQXBDLEdBQXVDLElBQXhDLENBQUQsQ0FBK0NKLElBQS9DLENBQW9ELFlBQXBELENBQVo7QUFDQSxZQUFJRSxJQUFJLEdBQUc1QixDQUFDLENBQUMsc0NBQW9DOEIsRUFBcEMsR0FBdUMsSUFBeEMsQ0FBRCxDQUErQ0osSUFBL0MsQ0FBb0QsV0FBcEQsQ0FBWDtBQUVBMUIsU0FBQyxDQUFDLGdCQUFELENBQUQsQ0FBb0I2QixJQUFwQixDQUF5QkYsS0FBekI7QUFDQTNCLFNBQUMsQ0FBQyxlQUFELENBQUQsQ0FBbUIwQixJQUFuQixDQUF3QixNQUF4QixFQUErQkUsSUFBL0I7QUFDQTtBQUNEOztBQUVELFFBQUdWLE1BQU0sS0FBSyxNQUFkLEVBQXFCO0FBQ3BCLFVBQUlZLEVBQUUsR0FBR0MsUUFBUSxDQUFDL0IsQ0FBQyxDQUFDLGdDQUFELENBQUQsQ0FBb0MwQixJQUFwQyxDQUF5QyxTQUF6QyxDQUFELENBQWpCO0FBQ0FJLFFBQUU7QUFFRlYsWUFBTSxDQUFDakIsV0FBUCxDQUFtQixRQUFuQjs7QUFFQSxVQUFHMkIsRUFBRSxLQUFLLENBQVYsRUFBWTtBQUNYOUIsU0FBQyxDQUFDLHNDQUFvQ3FCLEtBQXBDLEdBQTBDLElBQTNDLENBQUQsQ0FBa0RqQixRQUFsRCxDQUEyRCxRQUEzRDtBQUNBSixTQUFDLENBQUMsc0NBQW9DcUIsS0FBcEMsR0FBMEMsSUFBM0MsQ0FBRCxDQUFrRGxCLFdBQWxELENBQThELFFBQTlEO0FBQ0EsWUFBSXdCLEtBQUssR0FBRzNCLENBQUMsQ0FBQyxzQ0FBb0NxQixLQUFwQyxHQUEwQyxJQUEzQyxDQUFELENBQWtESyxJQUFsRCxDQUF1RCxZQUF2RCxDQUFaO0FBQ0EsWUFBSUUsSUFBSSxHQUFHNUIsQ0FBQyxDQUFDLHNDQUFvQ3FCLEtBQXBDLEdBQTBDLElBQTNDLENBQUQsQ0FBa0RLLElBQWxELENBQXVELFdBQXZELENBQVg7QUFFQTFCLFNBQUMsQ0FBQyxnQkFBRCxDQUFELENBQW9CNkIsSUFBcEIsQ0FBeUJGLEtBQXpCO0FBQ0EzQixTQUFDLENBQUMsZUFBRCxDQUFELENBQW1CMEIsSUFBbkIsQ0FBd0IsTUFBeEIsRUFBK0JFLElBQS9CO0FBQ0EsT0FSRCxNQVFLO0FBQ0o1QixTQUFDLENBQUMsc0NBQW9DOEIsRUFBcEMsR0FBdUMsSUFBeEMsQ0FBRCxDQUErQzFCLFFBQS9DLENBQXdELFFBQXhEO0FBQ0FKLFNBQUMsQ0FBQyxzQ0FBb0NxQixLQUFwQyxHQUEwQyxJQUEzQyxDQUFELENBQWtEbEIsV0FBbEQsQ0FBOEQsUUFBOUQ7QUFDQSxZQUFJd0IsS0FBSyxHQUFHM0IsQ0FBQyxDQUFDLHNDQUFvQzhCLEVBQXBDLEdBQXVDLElBQXhDLENBQUQsQ0FBK0NKLElBQS9DLENBQW9ELFlBQXBELENBQVo7QUFDQSxZQUFJRSxJQUFJLEdBQUc1QixDQUFDLENBQUMsc0NBQW9DOEIsRUFBcEMsR0FBdUMsSUFBeEMsQ0FBRCxDQUErQ0osSUFBL0MsQ0FBb0QsV0FBcEQsQ0FBWDtBQUVBMUIsU0FBQyxDQUFDLGdCQUFELENBQUQsQ0FBb0I2QixJQUFwQixDQUF5QkYsS0FBekI7QUFDQTNCLFNBQUMsQ0FBQyxlQUFELENBQUQsQ0FBbUIwQixJQUFuQixDQUF3QixNQUF4QixFQUErQkUsSUFBL0I7QUFDQTtBQUNEO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBQ0U7O0FBQUE7QUFFRFgsa0JBQWdCO0FBRWhCLE1BQUllLFFBQVEsR0FBR0MsV0FBVyxDQUFDLFlBQVU7QUFBQ2hCLG9CQUFnQixDQUFDLE1BQUQsQ0FBaEI7QUFBMEIsR0FBdEMsRUFBdUMsSUFBdkMsQ0FBMUI7QUFFQWpCLEdBQUMsQ0FBQyxPQUFELENBQUQsQ0FBV2UsS0FBWCxDQUFpQixZQUFXO0FBQzNCRSxvQkFBZ0IsQ0FBQyxNQUFELENBQWhCO0FBQ0FYLFVBQU0sQ0FBQzRCLGFBQVAsQ0FBcUJGLFFBQXJCO0FBQ0FBLFlBQVEsR0FBR0MsV0FBVyxDQUFDLFlBQVU7QUFBQ2hCLHNCQUFnQixDQUFDLE1BQUQsQ0FBaEI7QUFBMEIsS0FBdEMsRUFBdUMsSUFBdkMsQ0FBdEI7QUFDQSxHQUpEO0FBTUFqQixHQUFDLENBQUMsT0FBRCxDQUFELENBQVdlLEtBQVgsQ0FBaUIsWUFBVztBQUMzQkUsb0JBQWdCLENBQUMsTUFBRCxDQUFoQjtBQUNBWCxVQUFNLENBQUM0QixhQUFQLENBQXFCRixRQUFyQjtBQUNBQSxZQUFRLEdBQUdDLFdBQVcsQ0FBQyxZQUFVO0FBQUNoQixzQkFBZ0IsQ0FBQyxNQUFELENBQWhCO0FBQTBCLEtBQXRDLEVBQXVDLElBQXZDLENBQXRCO0FBQ0EsR0FKRCxFQS9INEIsQ0FxSTVCOztBQUNBakIsR0FBQyxDQUFDLGFBQUQsQ0FBRCxDQUFpQm1DLFFBQWpCLENBQTBCO0FBQ3RCQyxtQkFBZSxFQUFFLElBREs7QUFFdEJDLFdBQU8sRUFBRSxhQUZhO0FBR3RCQyxTQUFLLEVBQUUsRUFIZTtBQUl0QkMsZ0JBQVksRUFBRTtBQUpRLEdBQTFCLEVBdEk0QixDQTZJNUI7O0FBQ0EsV0FBU0MsZ0JBQVQsR0FBNEI7QUFDMUIsV0FBT0MsVUFBVSxJQUFJQSxVQUFVLENBQUNDLFdBQVgsR0FBeUJwQixNQUF6QixLQUFvQyxDQUF6RDtBQUNELEdBaEoyQixDQWtKNUI7OztBQUVBdEIsR0FBQyxDQUFDLE1BQUQsQ0FBRCxDQUFVMkMsTUFBVixDQUFpQixVQUFTQyxDQUFULEVBQVk7QUFFNUIsUUFBSUMsUUFBUSxHQUFHN0MsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRMEIsSUFBUixDQUFhLFlBQWIsQ0FBZjtBQUNBLFFBQUlMLEtBQUssR0FBRyxDQUFaO0FBQ0EsUUFBSXlCLFFBQVEsR0FBRyxDQUFmO0FBRUE5QyxLQUFDLENBQUMsSUFBRCxDQUFELENBQVErQyxJQUFSLENBQWEsYUFBYixFQUE0QnZCLElBQTVCLENBQWlDLFVBQVNDLEtBQVQsRUFBZTtBQUMvQyxVQUFJdUIsS0FBSyxHQUFHaEQsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRK0MsSUFBUixDQUFhLGlCQUFiLENBQVo7O0FBRUEsVUFBR0MsS0FBSyxDQUFDQyxJQUFOLENBQVcsVUFBWCxDQUFILEVBQTBCO0FBQ3pCNUIsYUFBSzs7QUFDTCxZQUFHMkIsS0FBSyxDQUFDRSxHQUFOLEdBQVk1QixNQUFaLEdBQXFCLENBQXhCLEVBQTBCO0FBQ3pCd0Isa0JBQVE7QUFDUkUsZUFBSyxDQUFDRyxNQUFOLEdBQWVoRCxXQUFmLENBQTJCLE9BQTNCO0FBQ0EsU0FIRCxNQUdLO0FBQ0o2QyxlQUFLLENBQUNHLE1BQU4sR0FBZS9DLFFBQWYsQ0FBd0IsT0FBeEI7QUFDQTtBQUNEO0FBQ0QsS0FaRDs7QUFjQSxRQUFHaUIsS0FBSyxJQUFJeUIsUUFBWixFQUFxQjtBQUNwQjtBQUNBO0FBQ0E7O0FBRURGLEtBQUMsQ0FBQ1EsY0FBRjtBQUNBLEdBMUJEO0FBMkJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUMsQ0ExUkQ7QUE0UkE7O0FBRUFwRCxDQUFDLENBQUMsU0FBRCxDQUFELENBQWFxRCxLQUFiLENBQW1CO0FBQ2xCQyxVQUFRLEVBQUUsSUFEUTtBQUVsQkMsV0FBUyxFQUFFdkQsQ0FBQyxDQUFDLGNBQUQsQ0FGTTtBQUdsQndELFdBQVMsRUFBRXhELENBQUMsQ0FBQyxjQUFEO0FBSE0sQ0FBbkI7QUFNQTs7QUFDQSxJQUFJeUQsUUFBSjtBQUNBLElBQUlDLEdBQUo7O0FBQ0EsU0FBU0MseUJBQVQsR0FBcUM7QUFDcEMsTUFBSTNELENBQUMsQ0FBQyxhQUFELENBQUQsQ0FBaUJzQixNQUFyQixFQUE2QjtBQUM1QixRQUFJc0MsUUFBUSxHQUFHLElBQUlDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZQyxNQUFoQixDQUF1QixVQUF2QixFQUFtQyxrQkFBbkMsQ0FBZjtBQUNBLFFBQUlDLFVBQVUsR0FBRztBQUNoQkMsVUFBSSxFQUFFLEVBRFU7QUFFaEJDLFlBQU0sRUFBRU4sUUFGUTtBQUdoQk8saUJBQVcsRUFBRSxLQUhHO0FBSWhCQyxnQkFBVSxFQUFFLEtBSkk7QUFLaEJDLGlCQUFXLEVBQUUsS0FMRztBQU1oQkMsa0JBQVksRUFBRSxLQU5FO0FBT2hCQyxvQkFBYyxFQUFFLEtBUEE7QUFRaEJDLHVCQUFpQixFQUFFLEtBUkg7QUFTaEJDLFlBQU0sRUFBRSxDQUFDO0FBQUMsdUJBQWMsV0FBZjtBQUEyQix1QkFBYyxRQUF6QztBQUFrRCxtQkFBVSxDQUFDO0FBQUMsd0JBQWE7QUFBZCxTQUFEO0FBQTVELE9BQUQsRUFBcUY7QUFBQyx1QkFBYyxTQUFmO0FBQXlCLHVCQUFjLFFBQXZDO0FBQWdELG1CQUFVLENBQUM7QUFBQyx3QkFBYTtBQUFkLFNBQUQ7QUFBMUQsT0FBckYsRUFBdUs7QUFBQyx1QkFBYyxLQUFmO0FBQXFCLHVCQUFjLFFBQW5DO0FBQTRDLG1CQUFVLENBQUM7QUFBQyx3QkFBYTtBQUFkLFNBQUQ7QUFBdEQsT0FBdkssRUFBcVA7QUFBQyx1QkFBYyxPQUFmO0FBQXVCLHVCQUFjLFFBQXJDO0FBQThDLG1CQUFVLENBQUM7QUFBQyx3QkFBYTtBQUFkLFNBQUQ7QUFBeEQsT0FBclAsRUFBcVU7QUFBQyx1QkFBYyxNQUFmO0FBQXNCLHVCQUFjLGFBQXBDO0FBQWtELG1CQUFVLENBQUM7QUFBQyx3QkFBYTtBQUFkLFNBQUQ7QUFBNUQsT0FBclUsRUFBeVo7QUFBQyxtQkFBVSxDQUFDO0FBQUMsaUJBQU07QUFBUCxTQUFELEVBQW1CO0FBQUMsd0JBQWEsQ0FBQztBQUFmLFNBQW5CLEVBQXVDO0FBQUMsbUJBQVE7QUFBVCxTQUF2QyxFQUFzRDtBQUFDLHVCQUFZO0FBQWIsU0FBdEQ7QUFBWCxPQUF6WixFQUE2ZTtBQUFDLHVCQUFjLE1BQWY7QUFBc0IsdUJBQWMsa0JBQXBDO0FBQXVELG1CQUFVLENBQUM7QUFBQyx3QkFBYTtBQUFkLFNBQUQsRUFBcUI7QUFBQyx1QkFBWTtBQUFiLFNBQXJCO0FBQWpFLE9BQTdlLEVBQXNsQjtBQUFDLHVCQUFjLE1BQWY7QUFBc0IsdUJBQWMsVUFBcEM7QUFBK0MsbUJBQVUsQ0FBQztBQUFDLHVCQUFZO0FBQWIsU0FBRDtBQUF6RCxPQUF0bEI7QUFUUSxLQUFqQjtBQVdBZixPQUFHLEdBQUcsSUFBSUcsTUFBTSxDQUFDQyxJQUFQLENBQVlZLEdBQWhCLENBQW9CekUsUUFBUSxDQUFDMEUsY0FBVCxDQUF3QixZQUF4QixDQUFwQixFQUEyRFgsVUFBM0QsQ0FBTjtBQUNBLFFBQUlZLE1BQU0sR0FBRyxJQUFJZixNQUFNLENBQUNDLElBQVAsQ0FBWWUsTUFBaEIsQ0FBdUI7QUFDbkNDLGNBQVEsRUFBRWxCLFFBRHlCO0FBRW5DRixTQUFHLEVBQUVBLEdBRjhCO0FBR25DL0IsV0FBSyxFQUFFLFFBSDRCO0FBSW5Db0QsVUFBSSxFQUFFO0FBSjZCLEtBQXZCLENBQWI7O0FBT0EsUUFBSS9FLENBQUMsQ0FBQyxjQUFELENBQUQsQ0FBa0JzQixNQUF0QixFQUE4QjtBQUU3Qm9DLFNBQUcsR0FBRyxJQUFJRyxNQUFNLENBQUNDLElBQVAsQ0FBWVksR0FBaEIsQ0FBb0J6RSxRQUFRLENBQUMwRSxjQUFULENBQXdCLGFBQXhCLENBQXBCLEVBQTREWCxVQUE1RCxDQUFOO0FBRUEsVUFBSVAsUUFBUSxHQUFHLElBQUlJLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZa0IsUUFBaEIsRUFBZjtBQUVFdkIsY0FBUSxDQUFDd0IsT0FBVCxDQUFpQjtBQUNkLG1CQUFXakYsQ0FBQyxDQUFDLGNBQUQsQ0FBRCxDQUFrQjBCLElBQWxCLENBQXVCLGNBQXZCO0FBREcsT0FBakIsRUFHQSxVQUFTd0QsT0FBVCxFQUFrQkMsTUFBbEIsRUFBMEI7QUFDdkIsWUFBR0EsTUFBTSxJQUFJdEIsTUFBTSxDQUFDQyxJQUFQLENBQVlzQixjQUFaLENBQTJCQyxFQUF4QyxFQUE0QztBQUN6QyxjQUFJeEIsTUFBTSxDQUFDQyxJQUFQLENBQVllLE1BQWhCLENBQXVCO0FBQ3BCQyxvQkFBUSxFQUFFSSxPQUFPLENBQUMsQ0FBRCxDQUFQLENBQVdJLFFBQVgsQ0FBb0JDLFFBRFY7QUFFcEI3QixlQUFHLEVBQUVBLEdBRmU7QUFHN0IvQixpQkFBSyxFQUFFLFFBSHNCO0FBSTdCb0QsZ0JBQUksRUFBRTtBQUp1QixXQUF2QjtBQU1BckIsYUFBRyxDQUFDOEIsU0FBSixDQUFjTixPQUFPLENBQUMsQ0FBRCxDQUFQLENBQVdJLFFBQVgsQ0FBb0JDLFFBQWxDO0FBQ0Y7QUFDSCxPQWJEO0FBZUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0c7QUFDRCxHQXRERCxNQXNETztBQUNOLFdBQU8sS0FBUDtBQUNBOztBQUNELFNBQU8sS0FBUDtBQUNBOztBQUNEMUIsTUFBTSxDQUFDQyxJQUFQLENBQVkyQixLQUFaLENBQWtCQyxjQUFsQixDQUFpQ3BGLE1BQWpDLEVBQXlDLE1BQXpDLEVBQWlEcUQseUJBQWpELEUiLCJmaWxlIjoiLi9wYWNrYWdlL3Jlc291cmNlcy9qcy93ZWJzaXRlL21haW4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vIHdpbmRvdy5heGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5cbi8vIHdpbmRvdy5heGlvcy5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1SZXF1ZXN0ZWQtV2l0aCddID0gJ1hNTEh0dHBSZXF1ZXN0JztcblxuLyoqXG4gKiBOZXh0IHdlIHdpbGwgcmVnaXN0ZXIgdGhlIENTUkYgVG9rZW4gYXMgYSBjb21tb24gaGVhZGVyIHdpdGggQXhpb3Mgc28gdGhhdFxuICogYWxsIG91dGdvaW5nIEhUVFAgcmVxdWVzdHMgYXV0b21hdGljYWxseSBoYXZlIGl0IGF0dGFjaGVkLiBUaGlzIGlzIGp1c3RcbiAqIGEgc2ltcGxlIGNvbnZlbmllbmNlIHNvIHdlIGRvbid0IGhhdmUgdG8gYXR0YWNoIGV2ZXJ5IHRva2VuIG1hbnVhbGx5LlxuICovXG5cbi8vIGxldCB0b2tlbiA9IGRvY3VtZW50LmhlYWQucXVlcnlTZWxlY3RvcignbWV0YVtuYW1lPVwiY3NyZi10b2tlblwiXScpO1xuXG4vLyBpZiAodG9rZW4pIHtcbi8vICAgICB3aW5kb3cuYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQ1NSRi1UT0tFTiddID0gdG9rZW4uY29udGVudDtcbi8vIH0gZWxzZSB7XG4vLyAgICAgY29uc29sZS5lcnJvcignQ1NSRiB0b2tlbiBub3QgZm91bmQ6IGh0dHBzOi8vbGFyYXZlbC5jb20vZG9jcy9jc3JmI2NzcmYteC1jc3JmLXRva2VuJyk7XG4vLyB9XG5cbi8qKlxuICogRWNobyBleHBvc2VzIGFuIGV4cHJlc3NpdmUgQVBJIGZvciBzdWJzY3JpYmluZyB0byBjaGFubmVscyBhbmQgbGlzdGVuaW5nXG4gKiBmb3IgZXZlbnRzIHRoYXQgYXJlIGJyb2FkY2FzdCBieSBMYXJhdmVsLiBFY2hvIGFuZCBldmVudCBicm9hZGNhc3RpbmdcbiAqIGFsbG93cyB5b3VyIHRlYW0gdG8gZWFzaWx5IGJ1aWxkIHJvYnVzdCByZWFsLXRpbWUgd2ViIGFwcGxpY2F0aW9ucy5cbiAqL1xuXG4vLyBpbXBvcnQgRWNobyBmcm9tICdsYXJhdmVsLWVjaG8nXG5cbi8vIHdpbmRvdy5QdXNoZXIgPSByZXF1aXJlKCdwdXNoZXItanMnKTtcblxuLy8gd2luZG93LkVjaG8gPSBuZXcgRWNobyh7XG4vLyAgICAgYnJvYWRjYXN0ZXI6ICdwdXNoZXInLFxuLy8gICAgIGtleTogcHJvY2Vzcy5lbnYuTUlYX1BVU0hFUl9BUFBfS0VZLFxuLy8gICAgIGNsdXN0ZXI6IHByb2Nlc3MuZW52Lk1JWF9QVVNIRVJfQVBQX0NMVVNURVIsXG4vLyAgICAgZW5jcnlwdGVkOiB0cnVlXG4vLyB9KTtcblxuaW1wb3J0ICcuL2xpZ2h0c2xpZGVyJztcbmltcG9ydCAnLi9saWdodGNhc2UnO1xuaW1wb3J0ICcuL2NzLXNlbGVjdCc7XG5pbXBvcnQgJy4vc2xpY2snO1xuaW1wb3J0ICcuL3N0aWNreSc7XG5pbXBvcnQgJy4vYmxhenknO1xuaW1wb3J0ICcuL3l0JztcblxuLypcbmlmKCFkb2N1bWVudC5fX2RlZmluZUdldHRlcl9fKSB7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkb2N1bWVudCwgJ2Nvb2tpZScsIHtcblx0ICAgIGdldDogZnVuY3Rpb24oKXtyZXR1cm4gJyd9LFxuXHQgICAgc2V0OiBmdW5jdGlvbigpe3JldHVybiB0cnVlfSxcblx0fSk7XG59IGVsc2Uge1xuICAgIGRvY3VtZW50Ll9fZGVmaW5lR2V0dGVyX18oXCJjb29raWVcIiwgZnVuY3Rpb24oKSB7IHJldHVybiAnJzt9ICk7XG4gICAgZG9jdW1lbnQuX19kZWZpbmVTZXR0ZXJfXyhcImNvb2tpZVwiLCBmdW5jdGlvbigpIHt9ICk7XG59XG4qL1xuXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblx0XG5cdCQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKFwicHJlbG9hZFwiKTtcblx0JChcIiNsb2FkX19vdmVybGF5XCIpLmFkZENsYXNzKFwiaGlkZGVuXCIpO1xuXHRcblx0aWYgKCQuaXNGdW5jdGlvbih3aW5kb3dbXCJCbGF6eVwiXSkpIHtcblx0ICAgIHZhciBiTGF6eSA9IG5ldyBCbGF6eSgpO1xuXHR9IGVsc2Uge1xuXHQgICAgLy9hbGVydChcIm5vdCBhIGZ1bmN0aW9uXCIpO1xuXHR9XG5cdFxuXHQvL1NUSUNLWSBOQVZcblx0JChmdW5jdGlvbigpIHtcblx0XHRcblx0XHRmdW5jdGlvbiBzdGlja05hdigpe1xuXHRcdFx0dmFyIHN0ID0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpO1xuXHQgICAgICAgIGlmIChzdCA+ICQoJ2JvZHknKS5vZmZzZXQoKS50b3AgKyAxMDApIHtcblx0ICAgICAgICAgICAgJChcImhlYWRlclwiKS5hZGRDbGFzcyhcInN0aWNreVwiKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAkKFwiaGVhZGVyXCIpLnJlbW92ZUNsYXNzKFwic3RpY2t5XCIpO1xuXHQgICAgICAgIH1cblx0XHR9O1xuXHRcdFxuXHQgICAgJCh3aW5kb3cpLnNjcm9sbChmdW5jdGlvbigpIHtcblx0ICAgICAgICBzdGlja05hdigpO1xuXHQgICAgfSk7XG5cdCAgICBcblx0ICAgIHN0aWNrTmF2KCk7XG5cdH0pO1xuXHRcblx0XG5cdFxuXHRcblx0JChcImhlYWRlciAuZmEtYmFyc1wiKS5jbGljayhmdW5jdGlvbigpIHtcblx0XHQkKFwibmF2XCIpLnRvZ2dsZUNsYXNzKFwiYWN0aXZlXCIpO1xuXHRcdCQoXCIubW9iaWxlLW92ZXJsYXlcIikudG9nZ2xlQ2xhc3MoXCJhY3RpdmVcIik7XG5cdH0pO1xuXHRcblx0JChcIi5tb2JpbGUtb3ZlcmxheVwiKS5jbGljayhmdW5jdGlvbigpIHtcblx0XHQkKFwibmF2XCIpLnRvZ2dsZUNsYXNzKFwiYWN0aXZlXCIpO1xuXHRcdCQoXCIubW9iaWxlLW92ZXJsYXlcIikudG9nZ2xlQ2xhc3MoXCJhY3RpdmVcIik7XG5cdH0pO1xuXHRcblx0ZnVuY3Rpb24gYmFja2dyb3VuZFNsaWRlcihhY3Rpb24sIHNsaWRlKXtcblx0XHR2YXIgc2xpZGVzID0gJChcIiNoZWFkZXIgLmJhY2tncm91bmQgaW1nXCIpO1xuXHRcdHZhciBjb3VudCA9IHNsaWRlcy5sZW5ndGg7XG5cdFx0XG5cdFx0JChcIiNiYWNrZ3JvdW5kX19zbGlkZXItbmF2XCIpLmVtcHR5KCk7XG5cdFx0XG5cdFx0c2xpZGVzLmVhY2goZnVuY3Rpb24oaW5kZXgpe1xuXHRcdFx0JCh0aGlzKS5hdHRyKFwiZGF0YS1pZFwiLCBpbmRleCsxKTtcblx0XHR9KTtcblx0XHRcblx0XHRpZih0eXBlb2YgYWN0aW9uID09PSAndW5kZWZpbmVkJyB8fCAhYWN0aW9uKXtcblx0XHRcdCQoXCIjaGVhZGVyIC5iYWNrZ3JvdW5kIGltZ1tkYXRhLWlkPScxJ11cIikuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XG5cdFx0XHR2YXIgdGl0bGUgPSAkKFwiI2hlYWRlciAuYmFja2dyb3VuZCBpbWdbZGF0YS1pZD0nMSddXCIpLmF0dHIoXCJkYXRhLXRpdGxlXCIpO1xuXHRcdFx0dmFyIGxpbmsgPSAkKFwiI2hlYWRlciAuYmFja2dyb3VuZCBpbWdbZGF0YS1pZD0nMSddXCIpLmF0dHIoXCJkYXRhLWxpbmtcIik7XG5cdFx0XHRcblx0XHRcdCQoXCIjaGVhZGVyLWJhciBoNlwiKS5odG1sKHRpdGxlKTtcblx0XHRcdCQoXCIjaGVhZGVyLWJhciBhXCIpLmF0dHIoJ2hyZWYnLGxpbmspO1xuXHRcdH1cblx0XHRcblx0XHRpZihhY3Rpb24gPT09IFwibmV4dFwiKXtcblx0XHRcdHZhciBpZCA9IHBhcnNlSW50KCQoXCIjaGVhZGVyIC5iYWNrZ3JvdW5kIGltZy5hY3RpdmVcIikuYXR0cihcImRhdGEtaWRcIikpO1xuXHRcdFx0aWQrKztcblx0XHRcdFxuXHRcdFx0c2xpZGVzLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xuXHRcdFx0XG5cdFx0XHRpZihpZCA+IGNvdW50KXtcblx0XHRcdFx0JChcIiNoZWFkZXIgLmJhY2tncm91bmQgaW1nW2RhdGEtaWQ9JzEnXVwiKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcblx0XHRcdFx0JChcIiNoZWFkZXIgLmJhY2tncm91bmQgaW1nW2RhdGEtaWQ9J1wiK2NvdW50K1wiJ11cIikucmVtb3ZlQ2xhc3MoXCJoaWRkZW5cIik7XG5cdFx0XHRcdHZhciB0aXRsZSA9ICQoXCIjaGVhZGVyIC5iYWNrZ3JvdW5kIGltZ1tkYXRhLWlkPScxJ11cIikuYXR0cihcImRhdGEtdGl0bGVcIik7XG5cdFx0XHRcdHZhciBsaW5rID0gJChcIiNoZWFkZXIgLmJhY2tncm91bmQgaW1nW2RhdGEtaWQ9JzEnXVwiKS5hdHRyKFwiZGF0YS1saW5rXCIpO1xuXHRcdFx0XHRcblx0XHRcdFx0JChcIiNoZWFkZXItYmFyIGg2XCIpLmh0bWwodGl0bGUpO1xuXHRcdFx0XHQkKFwiI2hlYWRlci1iYXIgYVwiKS5hdHRyKCdocmVmJyxsaW5rKTtcblx0XHRcdH1lbHNle1xuXHRcdFx0XHQkKFwiI2hlYWRlciAuYmFja2dyb3VuZCBpbWdbZGF0YS1pZD0nXCIraWQrXCInXVwiKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcblx0XHRcdFx0JChcIiNoZWFkZXIgLmJhY2tncm91bmQgaW1nW2RhdGEtaWQ9J1wiK2NvdW50K1wiJ11cIikucmVtb3ZlQ2xhc3MoXCJoaWRkZW5cIik7XG5cdFx0XHRcdHZhciB0aXRsZSA9ICQoXCIjaGVhZGVyIC5iYWNrZ3JvdW5kIGltZ1tkYXRhLWlkPSdcIitpZCtcIiddXCIpLmF0dHIoXCJkYXRhLXRpdGxlXCIpO1xuXHRcdFx0XHR2YXIgbGluayA9ICQoXCIjaGVhZGVyIC5iYWNrZ3JvdW5kIGltZ1tkYXRhLWlkPSdcIitpZCtcIiddXCIpLmF0dHIoXCJkYXRhLWxpbmtcIik7XG5cdFx0XHRcdFxuXHRcdFx0XHQkKFwiI2hlYWRlci1iYXIgaDZcIikuaHRtbCh0aXRsZSk7XG5cdFx0XHRcdCQoXCIjaGVhZGVyLWJhciBhXCIpLmF0dHIoJ2hyZWYnLGxpbmspO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRpZihhY3Rpb24gPT09IFwicHJldlwiKXtcblx0XHRcdHZhciBpZCA9IHBhcnNlSW50KCQoXCIjaGVhZGVyIC5iYWNrZ3JvdW5kIGltZy5hY3RpdmVcIikuYXR0cihcImRhdGEtaWRcIikpO1xuXHRcdFx0aWQtLTtcblx0XHRcdFxuXHRcdFx0c2xpZGVzLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xuXHRcdFx0XG5cdFx0XHRpZihpZCA9PT0gMCl7XG5cdFx0XHRcdCQoXCIjaGVhZGVyIC5iYWNrZ3JvdW5kIGltZ1tkYXRhLWlkPSdcIitjb3VudCtcIiddXCIpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xuXHRcdFx0XHQkKFwiI2hlYWRlciAuYmFja2dyb3VuZCBpbWdbZGF0YS1pZD0nXCIrY291bnQrXCInXVwiKS5yZW1vdmVDbGFzcyhcImhpZGRlblwiKTtcblx0XHRcdFx0dmFyIHRpdGxlID0gJChcIiNoZWFkZXIgLmJhY2tncm91bmQgaW1nW2RhdGEtaWQ9J1wiK2NvdW50K1wiJ11cIikuYXR0cihcImRhdGEtdGl0bGVcIik7XG5cdFx0XHRcdHZhciBsaW5rID0gJChcIiNoZWFkZXIgLmJhY2tncm91bmQgaW1nW2RhdGEtaWQ9J1wiK2NvdW50K1wiJ11cIikuYXR0cihcImRhdGEtbGlua1wiKTtcblx0XHRcdFx0XG5cdFx0XHRcdCQoXCIjaGVhZGVyLWJhciBoNlwiKS5odG1sKHRpdGxlKTtcblx0XHRcdFx0JChcIiNoZWFkZXItYmFyIGFcIikuYXR0cignaHJlZicsbGluayk7XG5cdFx0XHR9ZWxzZXtcblx0XHRcdFx0JChcIiNoZWFkZXIgLmJhY2tncm91bmQgaW1nW2RhdGEtaWQ9J1wiK2lkK1wiJ11cIikuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XG5cdFx0XHRcdCQoXCIjaGVhZGVyIC5iYWNrZ3JvdW5kIGltZ1tkYXRhLWlkPSdcIitjb3VudCtcIiddXCIpLnJlbW92ZUNsYXNzKFwiaGlkZGVuXCIpO1xuXHRcdFx0XHR2YXIgdGl0bGUgPSAkKFwiI2hlYWRlciAuYmFja2dyb3VuZCBpbWdbZGF0YS1pZD0nXCIraWQrXCInXVwiKS5hdHRyKFwiZGF0YS10aXRsZVwiKTtcblx0XHRcdFx0dmFyIGxpbmsgPSAkKFwiI2hlYWRlciAuYmFja2dyb3VuZCBpbWdbZGF0YS1pZD0nXCIraWQrXCInXVwiKS5hdHRyKFwiZGF0YS1saW5rXCIpO1xuXHRcdFx0XHRcblx0XHRcdFx0JChcIiNoZWFkZXItYmFyIGg2XCIpLmh0bWwodGl0bGUpO1xuXHRcdFx0XHQkKFwiI2hlYWRlci1iYXIgYVwiKS5hdHRyKCdocmVmJyxsaW5rKTtcblx0XHRcdH1cblx0XHR9XHRcbi8qXG5cdFx0dmFyIGJMYXp5ID0gbmV3IEJsYXp5KCk7XG5cdFx0YkxhenkucmV2YWxpZGF0ZSgpO1xuKi9cblx0fTtcblx0XG5cdGJhY2tncm91bmRTbGlkZXIoKTtcblxuXHR2YXIgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpe2JhY2tncm91bmRTbGlkZXIoXCJuZXh0XCIpO30sNzAwMCk7XG5cdFxuXHQkKFwiI25leHRcIikuY2xpY2soZnVuY3Rpb24oKSB7XG5cdFx0YmFja2dyb3VuZFNsaWRlcihcIm5leHRcIik7XG5cdFx0d2luZG93LmNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuXHRcdGludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtiYWNrZ3JvdW5kU2xpZGVyKFwibmV4dFwiKTt9LDcwMDApO1xuXHR9KTtcblx0XG5cdCQoXCIjcHJldlwiKS5jbGljayhmdW5jdGlvbigpIHtcblx0XHRiYWNrZ3JvdW5kU2xpZGVyKFwicHJldlwiKTtcblx0XHR3aW5kb3cuY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG5cdFx0aW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpe2JhY2tncm91bmRTbGlkZXIoXCJwcmV2XCIpO30sNzAwMCk7XG5cdH0pO1xuXHRcblx0Ly9ZVCB2aWRlb1xuXHQkKCcjdmlkZW8taG9tZScpLllUUGxheWVyKHtcblx0ICAgIGZpdFRvQmFja2dyb3VuZDogdHJ1ZSxcblx0ICAgIHZpZGVvSWQ6ICdHWFBkcGo3TVU2QScsXG5cdCAgICBzdGFydDogMTIsXG5cdCAgICBzdGFydFNlY29uZHM6IDEyXG5cdH0pO1xuXHRcblx0Ly9SRUNBUFRIQ0Fcblx0ZnVuY3Rpb24gaXNDYXB0Y2hhQ2hlY2tlZCgpIHtcblx0ICByZXR1cm4gZ3JlY2FwdGNoYSAmJiBncmVjYXB0Y2hhLmdldFJlc3BvbnNlKCkubGVuZ3RoICE9PSAwO1xuXHR9XG5cdFxuXHQvL0ZPUk0gQUpBWFxuXHRcblx0JChcImZvcm1cIikuc3VibWl0KGZ1bmN0aW9uKGUpIHtcblx0XHRcblx0XHR2YXIgZXJyb3JNc2cgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtZXJyb3InKTtcblx0XHR2YXIgY291bnQgPSAwO1xuXHRcdHZhciB2YWxDb3VudCA9IDA7XG5cdFx0XG5cdFx0JCh0aGlzKS5maW5kKFwiLmZvcm0tZ3JvdXBcIikuZWFjaChmdW5jdGlvbihpbmRleCl7XG5cdFx0XHR2YXIgaW5wdXQgPSAkKHRoaXMpLmZpbmQoJ2lucHV0LCB0ZXh0YXJlYScpO1xuXHRcdFx0XG5cdFx0XHRpZihpbnB1dC5wcm9wKCdyZXF1aXJlZCcpKXtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0aWYoaW5wdXQudmFsKCkubGVuZ3RoID4gMyl7XG5cdFx0XHRcdFx0dmFsQ291bnQrKztcblx0XHRcdFx0XHRpbnB1dC5wYXJlbnQoKS5yZW1vdmVDbGFzcygnZXJyb3InKTtcblx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0aW5wdXQucGFyZW50KCkuYWRkQ2xhc3MoJ2Vycm9yJyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRpZihjb3VudCA9PSB2YWxDb3VudCl7XG5cdFx0XHQvL2NvbnNvbGUubG9nKCdkb25lJyk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdFxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0fSk7XG4vKlxuXHQkKFwiI2Zvcm1fX3Bvc3RcIikuY2xpY2soZnVuY3Rpb24oKSB7XG5cdFx0XG5cdFx0d2FybmluZ3MgPSAwO1xuXHRcdFxuXHRcdCQoXCJmb3JtIC5pbnB1dFwiKS5lYWNoKGZ1bmN0aW9uKGluZGV4KXtcblx0XHRcdGlmKCQodGhpcykuZmluZCgnaW5wdXQ6Y2hlY2tib3g6bm90KDpjaGVja2VkKScpLmxlbmd0aCA+IDApe1xuXHRcdFx0XHQkKHRoaXMpLmZpbmQoJy5pbnB1dC1lcnJvcicpLmh0bWwoJ09lcHMsIGVlbiB2ZWxkamUgdmVyZ2V0ZW4hJyk7XG5cdFx0XHRcdCQodGhpcykuZmluZCgnOmlucHV0JykuYWRkQ2xhc3MoJ3dhcm5pbmcnKTtcblx0XHRcdFx0JCh0aGlzKS5hZGRDbGFzcygnd2FybmluZycpO1xuXHRcdFx0fWVsc2V7XG5cdFx0XHRcdGlmKCAhJCgkKHRoaXMpLmZpbmQoXCI6aW5wdXRcIikpLnZhbCgpIHx8ICQoJCh0aGlzKS5maW5kKFwiOmlucHV0XCIpKS52YWwoKS5sZW5ndGggPCAyICYmICQodGhpcykuZmluZChcIjppbnB1dFwiKS5wcm9wKCdyZXF1aXJlZCcpICkge1xuXHRcdFx0ICAgICAgICAkKHRoaXMpLmZpbmQoJy5pbnB1dC1lcnJvcicpLmh0bWwoJ09lcHMsIGVlbiB2ZWxkamUgdmVyZ2V0ZW4hJyk7XG5cdFx0XHQgICAgICAgICQodGhpcykuZmluZCgnOmlucHV0JykuYWRkQ2xhc3MoJ3dhcm5pbmcnKTtcblx0XHRcdCAgICAgICAgd2FybmluZ3MrKztcblx0XHRcdCAgICB9XG5cdFx0XHR9XHRcblx0XHR9KTtcblx0XHRcblx0XHQvL1JFTU9WRSBXQVJOSU5HIFdIRU4gVkFMVUUgSVMgQ0xJQ0tFRCAoY2hlY2tib3gsIHJhZGlvIGFuZCBmaWxlKVxuXHRcdCQoXCIud2FybmluZywgLmNoZWNrYm94LWN1c3RvbS1sYWJlbFwiKS5jaGFuZ2UoZnVuY3Rpb24oKXtcblx0XHRcdGlmKCAkKHRoaXMpLnZhbCgpIHx8ICQoJCh0aGlzKS5maW5kKFwiOmlucHV0XCIpKS52YWwoKS5sZW5ndGggPiAyICYmICQodGhpcykucHJvcCgncmVxdWlyZWQnKSApIHtcblx0XHQgICAgICAgICQodGhpcykucGFyZW50KCkuZmluZCgnLmlucHV0LWVycm9yJykuaHRtbCgnJyk7XG5cdFx0ICAgICAgICAkKHRoaXMpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCd3YXJuaW5nJyk7XG5cdFx0ICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCd3YXJuaW5nJyk7XG5cdFx0ICAgIH1cblx0XHR9KTtcblx0XHRcblx0XHQvL1JFTU9WRSBXQVJOSU5HIFdIRU4gVkFMVUUgSVMgVFlQRUQgKHR5cGUgaW5wdXRzKVxuXHRcdCQoXCIud2FybmluZywgLmNoZWNrYm94LWN1c3RvbS1sYWJlbFwiKS5rZXl1cChmdW5jdGlvbigpe1xuXHRcdFx0aWYoICQodGhpcykudmFsKCkgfHwgJCgkKHRoaXMpLmZpbmQoXCI6aW5wdXRcIikpLnZhbCgpLmxlbmd0aCA+IDIgJiYgJCh0aGlzKS5wcm9wKCdyZXF1aXJlZCcpICkge1xuXHRcdCAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5maW5kKCcuaW5wdXQtZXJyb3InKS5odG1sKCcnKTtcblx0XHQgICAgICAgICQodGhpcykucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ3dhcm5pbmcnKTtcblx0XHQgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ3dhcm5pbmcnKTtcblx0XHQgICAgfVxuXHRcdH0pO1xuXHRcdFxuXHRcdC8vY2FwdGNoYSBjaGVja1xuXHRcdGlmIChpc0NhcHRjaGFDaGVja2VkKCkpIHtcblx0XHQgIFx0JChcIi5pbnB1dC1lcnJvci1yZWNhcHRjaGFcIikuaHRtbCgnJyk7XG5cdFx0fWVsc2V7XG5cdFx0XHQkKFwiLmlucHV0LWVycm9yLXJlY2FwdGNoYVwiKS5odG1sKCdPZXBzLCBlZW4gdmVsZGplIHZlcmdldGVuIScpO1xuXHRcdFx0d2FybmluZ3MrKztcblx0XHR9XG5cdFx0XG5cdFx0Ly9GSUxFIFNJWkUgQ0hFQ0tcblx0XHRmaWxlX3NpemVfY2hlY2soKTtcblx0XHRcblx0XHQvL0NIRUNLIElGIEZPUk0gSVMgUkVBRFkgVE8gU1VCTUlUXG5cdFx0aWYod2FybmluZ3MgPT0gMCAmJiBmaWxlU2l6ZSA9PSB0cnVlKXtcblx0XHRcdCQoXCJmb3JtXCIpLnN1Ym1pdCgpO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHR9KTtcblx0XG5cdCQoXCJmb3JtXCIpLnN1Ym1pdChmdW5jdGlvbihlKSB7XG5cdFx0XG5cdFx0JChcImZvcm0gLmJ0blwiKS5jc3MoXCJ3aWR0aFwiLFwiNTBweFwiKTtcblx0XHQkKFwiZm9ybSAuYnRuXCIpLmF0dHIoXCJpZFwiLFwiXCIpO1xuXHRcdCQoXCJmb3JtIC5idG4gc3BhblwiKS5hZGRDbGFzcyhcImhpZGRlblwiKTtcblx0XHQkKFwiZm9ybSAuYnRuIC5mb3JtX19sb2FkZXJcIikucmVtb3ZlQ2xhc3MoXCJoaWRkZW5cIik7XG5cdFx0XG5cdFx0Ly9cblx0XHR2YXIgZmlsZXMgPSBlLnRhcmdldC5maWxlcztcblx0XHRcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHQgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgXG5cdFx0dmFyIGRhdGEgPSBuZXcgRm9ybURhdGEoJCh0aGlzKVswXSk7XG5cblx0XHQvL1xuXHRcdFxuXHRcdHZhciB1cmwgPSBcIi9mdW5jdGlvbnMvc3VibWl0X2Zvcm0ucGhwXCI7IC8vcmVDQVBUQ0hBIHBsYWNlaG9sZGVyIGVsZW1lbnQgbXVzdCBiZSBlbXB0eVxuXHQgICAgJC5hamF4KHtcblx0XHRcdHR5cGU6IFwiUE9TVFwiLFxuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHRcblx0IFx0XHQvL2RhdGE6ICQoXCJmb3JtXCIpLnNlcmlhbGl6ZSgpLCAvLyBzZXJpYWxpemVzIHRoZSBmb3JtJ3MgZWxlbWVudHMuXG5cdFx0XHRcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRjYWNoZTogZmFsc2UsXG5cdFx0XHRwcm9jZXNzRGF0YTogZmFsc2UsXG5cdFx0XHRjb250ZW50VHlwZTogZmFsc2UsXG5cdFx0XHRcblx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpXG5cdFx0XHR7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihkYXRhID09IFwiMVwiKXtcblx0XHRcdFx0XHQkKFwiZm9ybVwiKS5maW5kKFwiLmdyaWRcIikucmVtb3ZlKCk7XG5cdFx0XHRcdFx0JChcImZvcm1cIikuaHRtbChcIjxwIGNsYXNzPSd0ZXh0LS1ncmVlbic+VXcgYmVyaWNodCBpcyB2ZXJzdHV1cmQhIFdpaiBuZW1lbiBzcG9lZGlnIGNvbnRhY3QgbWV0IHUgb3AuPC9wPlwiKTtcblx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0JChcImZvcm1cIikuZmluZChcIi5ncmlkXCIpLnJlbW92ZSgpO1xuXHRcdFx0XHRcdCQoXCJmb3JtXCIpLmh0bWwoXCI8cCBjbGFzcz0ndGV4dC0tcmVkJz5PZXBzIGVyIGlzIGlldHMgZm91dCBnZWxvcGVuISBWZXJ2ZXJzIGRlIHBhZ2luYSBlbiBwcm9iZWVyIG9wbmlldXcuPC9wPlwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0ICAgICAgICBlcnJvcjogZnVuY3Rpb24oKSB7XG5cdFx0ICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcblx0XHRcdFx0JChcImZvcm1cIikuZmluZChcIi5ncmlkXCIpLnJlbW92ZSgpO1xuXHRcdFx0XHQkKFwiZm9ybVwiKS5odG1sKFwiPHAgY2xhc3M9J3RleHQtLXJlZCc+T2VwcyBlciBpcyBpZXRzIGZvdXQgZ2Vsb3BlbiEgVmVydmVycyBkZSBwYWdpbmEgZW4gcHJvYmVlciBvcG5pZXV3LjwvcD5cIik7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICByZXR1cm4gZmFsc2U7IC8vIGF2b2lkIHRvIGV4ZWN1dGUgdGhlIGFjdHVhbCBzdWJtaXQgb2YgdGhlIGZvcm0uXG5cdH0pO1xuKi9cblx0XG59KTtcblxuLyo9PT09PT09PT09ICBTbGljayAgPT09PT09PT09PSovXG5cbiQoJy5zbGlkZXInKS5zbGljayh7XG5cdGluZmluaXRlOiB0cnVlLFxuXHRwcmV2QXJyb3c6ICQoJy5zbGlkZXItcHJldicpLFxuXHRuZXh0QXJyb3c6ICQoJy5zbGlkZXItbmV4dCcpXG59KTtcblxuLyo9PT09PT09PT09ICBNYXAgID09PT09PT09PT0qL1xudmFyIGdlb2NvZGVyO1xudmFyIG1hcDtcbmZ1bmN0aW9uIGluaXRpYWxpemVfZnVsbF93aWR0aF9tYXAoKSB7XG5cdGlmICgkKCcjbWFwLWZvb3RlcicpLmxlbmd0aCkge1xuXHRcdHZhciBteUxhdExuZyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcoNTEuMzQ3MzA0NCwgNC42NDMyNDE5OTk5OTk5ODY1KTtcblx0XHR2YXIgbWFwT3B0aW9ucyA9IHtcblx0XHRcdHpvb206IDE1LFxuXHRcdFx0Y2VudGVyOiBteUxhdExuZyxcblx0XHRcdHNjcm9sbHdoZWVsOiBmYWxzZSxcblx0XHRcdHBhbkNvbnRyb2w6IGZhbHNlLFxuXHRcdFx0em9vbUNvbnRyb2w6IGZhbHNlLFxuXHRcdFx0c2NhbGVDb250cm9sOiBmYWxzZSxcblx0XHRcdG1hcFR5cGVDb250cm9sOiBmYWxzZSxcblx0XHRcdHN0cmVldFZpZXdDb250cm9sOiBmYWxzZSxcblx0XHRcdHN0eWxlczogW3tcImZlYXR1cmVUeXBlXCI6XCJsYW5kc2NhcGVcIixcImVsZW1lbnRUeXBlXCI6XCJsYWJlbHNcIixcInN0eWxlcnNcIjpbe1widmlzaWJpbGl0eVwiOlwib2ZmXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInRyYW5zaXRcIixcImVsZW1lbnRUeXBlXCI6XCJsYWJlbHNcIixcInN0eWxlcnNcIjpbe1widmlzaWJpbGl0eVwiOlwib2ZmXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInBvaVwiLFwiZWxlbWVudFR5cGVcIjpcImxhYmVsc1wiLFwic3R5bGVyc1wiOlt7XCJ2aXNpYmlsaXR5XCI6XCJvZmZcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwid2F0ZXJcIixcImVsZW1lbnRUeXBlXCI6XCJsYWJlbHNcIixcInN0eWxlcnNcIjpbe1widmlzaWJpbGl0eVwiOlwib2ZmXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInJvYWRcIixcImVsZW1lbnRUeXBlXCI6XCJsYWJlbHMuaWNvblwiLFwic3R5bGVyc1wiOlt7XCJ2aXNpYmlsaXR5XCI6XCJvZmZcIn1dfSx7XCJzdHlsZXJzXCI6W3tcImh1ZVwiOlwiIzAwYWFmZlwifSx7XCJzYXR1cmF0aW9uXCI6LTEwMH0se1wiZ2FtbWFcIjoxLjE1fSx7XCJsaWdodG5lc3NcIjoxMH1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicm9hZFwiLFwiZWxlbWVudFR5cGVcIjpcImxhYmVscy50ZXh0LmZpbGxcIixcInN0eWxlcnNcIjpbe1widmlzaWJpbGl0eVwiOlwib25cIn0se1wibGlnaHRuZXNzXCI6NTB9XX0se1wiZmVhdHVyZVR5cGVcIjpcInJvYWRcIixcImVsZW1lbnRUeXBlXCI6XCJnZW9tZXRyeVwiLFwic3R5bGVyc1wiOlt7XCJsaWdodG5lc3NcIjozMH1dfV1cblx0XHR9O1xuXHRcdG1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcC1mb290ZXInKSwgbWFwT3B0aW9ucyk7XG5cdFx0dmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoe1xuXHRcdFx0cG9zaXRpb246IG15TGF0TG5nLFxuXHRcdFx0bWFwOiBtYXAsXG5cdFx0XHR0aXRsZTogJ1Byb3ZhZCcsXG5cdFx0XHRpY29uOiAnL3B1YmxpYy9pbWFnZXMvbWFwbWFya2VyLnBuZydcblx0XHR9KTtcblx0XHRcblx0XHRpZiAoJCgnI21hcC1wcm9qZWN0JykubGVuZ3RoKSB7XG5cdFx0XHRcblx0XHRcdG1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcC1wcm9qZWN0JyksIG1hcE9wdGlvbnMpO1xuXHRcdFx0XG5cdFx0XHR2YXIgZ2VvY29kZXIgPSBuZXcgZ29vZ2xlLm1hcHMuR2VvY29kZXIoKTtcblxuXHRcdCAgIGdlb2NvZGVyLmdlb2NvZGUoe1xuXHRcdCAgICAgICdhZGRyZXNzJzogJCgnI21hcC1wcm9qZWN0JykuYXR0cihcImRhdGEtYWRkcmVzc1wiKVxuXHRcdCAgIH0sXG5cdFx0ICAgZnVuY3Rpb24ocmVzdWx0cywgc3RhdHVzKSB7XG5cdFx0ICAgICAgaWYoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9LKSB7XG5cdFx0ICAgICAgICAgbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7XG5cdFx0ICAgICAgICAgICAgcG9zaXRpb246IHJlc3VsdHNbMF0uZ2VvbWV0cnkubG9jYXRpb24sXG5cdFx0ICAgICAgICAgICAgbWFwOiBtYXAsXG5cdFx0XHRcdFx0dGl0bGU6ICdQcm92YWQnLFxuXHRcdFx0XHRcdGljb246ICcvcHVibGljL2ltYWdlcy9tYXBtYXJrZXIucG5nJ1xuXHRcdCAgICAgICAgIH0pO1xuXHRcdCAgICAgICAgIG1hcC5zZXRDZW50ZXIocmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbik7XG5cdFx0ICAgICAgfVxuXHRcdCAgIH0pO1xuXHRcdFx0XG4vKlxuXHRcdFx0bWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwLXByb2plY3QnKSwgbWFwT3B0aW9ucyk7XG5cdFx0XHR2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7XG5cdFx0XHRcdHBvc2l0aW9uOiBteUxhdExuZyxcblx0XHRcdFx0bWFwOiBtYXAsXG5cdFx0XHRcdHRpdGxlOiAnUHJvdmFkJyxcblx0XHRcdFx0aWNvbjogJy9wdWJsaWMvaW1hZ2VzL21hcG1hcmtlci5wbmcnXG5cdFx0XHR9KTtcbiovXG5cdFx0XHRcblx0XHRcdFxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufVxuZ29vZ2xlLm1hcHMuZXZlbnQuYWRkRG9tTGlzdGVuZXIod2luZG93LCAnbG9hZCcsIGluaXRpYWxpemVfZnVsbF93aWR0aF9tYXApOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./package/resources/js/website/main.js\n");

/***/ }),

/***/ "./package/resources/js/website/slick.js":
/*!***********************************************!*\
  !*** ./package/resources/js/website/slick.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n     _ _      _       _\n ___| (_) ___| | __  (_)___\n/ __| | |/ __| |/ /  | / __|\n\\__ \\ | | (__|   < _ | \\__ \\\n|___/_|_|\\___|_|\\_(_)/ |___/\n                   |__/\n\n Version: 1.8.0\n  Author: Ken Wheeler\n Website: http://kenwheeler.github.io\n    Docs: http://kenwheeler.github.io/slick\n    Repo: http://github.com/kenwheeler/slick\n  Issues: http://github.com/kenwheeler/slick/issues\n\n */\n\n/* global window, document, define, jQuery, setInterval, clearInterval */\n;\n\n(function (factory) {\n  'use strict';\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(function ($) {\n  'use strict';\n\n  var Slick = window.Slick || {};\n\n  Slick = function () {\n    var instanceUid = 0;\n\n    function Slick(element, settings) {\n      var _ = this,\n          dataSettings;\n\n      _.defaults = {\n        accessibility: true,\n        adaptiveHeight: false,\n        appendArrows: $(element),\n        appendDots: $(element),\n        arrows: true,\n        asNavFor: null,\n        prevArrow: '<button class=\"slick-prev\" aria-label=\"Previous\" type=\"button\">Previous</button>',\n        nextArrow: '<button class=\"slick-next\" aria-label=\"Next\" type=\"button\">Next</button>',\n        autoplay: false,\n        autoplaySpeed: 3000,\n        centerMode: false,\n        centerPadding: '50px',\n        cssEase: 'ease',\n        customPaging: function customPaging(slider, i) {\n          return $('<button type=\"button\" />').text(i + 1);\n        },\n        dots: false,\n        dotsClass: 'slick-dots',\n        draggable: true,\n        easing: 'linear',\n        edgeFriction: 0.35,\n        fade: false,\n        focusOnSelect: false,\n        focusOnChange: false,\n        infinite: true,\n        initialSlide: 0,\n        lazyLoad: 'ondemand',\n        mobileFirst: false,\n        pauseOnHover: true,\n        pauseOnFocus: true,\n        pauseOnDotsHover: false,\n        respondTo: 'window',\n        responsive: null,\n        rows: 1,\n        rtl: false,\n        slide: '',\n        slidesPerRow: 1,\n        slidesToShow: 1,\n        slidesToScroll: 1,\n        speed: 500,\n        swipe: true,\n        swipeToSlide: false,\n        touchMove: true,\n        touchThreshold: 5,\n        useCSS: true,\n        useTransform: true,\n        variableWidth: false,\n        vertical: false,\n        verticalSwiping: false,\n        waitForAnimate: true,\n        zIndex: 1000\n      };\n      _.initials = {\n        animating: false,\n        dragging: false,\n        autoPlayTimer: null,\n        currentDirection: 0,\n        currentLeft: null,\n        currentSlide: 0,\n        direction: 1,\n        $dots: null,\n        listWidth: null,\n        listHeight: null,\n        loadIndex: 0,\n        $nextArrow: null,\n        $prevArrow: null,\n        scrolling: false,\n        slideCount: null,\n        slideWidth: null,\n        $slideTrack: null,\n        $slides: null,\n        sliding: false,\n        slideOffset: 0,\n        swipeLeft: null,\n        swiping: false,\n        $list: null,\n        touchObject: {},\n        transformsEnabled: false,\n        unslicked: false\n      };\n      $.extend(_, _.initials);\n      _.activeBreakpoint = null;\n      _.animType = null;\n      _.animProp = null;\n      _.breakpoints = [];\n      _.breakpointSettings = [];\n      _.cssTransitions = false;\n      _.focussed = false;\n      _.interrupted = false;\n      _.hidden = 'hidden';\n      _.paused = true;\n      _.positionProp = null;\n      _.respondTo = null;\n      _.rowCount = 1;\n      _.shouldClick = true;\n      _.$slider = $(element);\n      _.$slidesCache = null;\n      _.transformType = null;\n      _.transitionType = null;\n      _.visibilityChange = 'visibilitychange';\n      _.windowWidth = 0;\n      _.windowTimer = null;\n      dataSettings = $(element).data('slick') || {};\n      _.options = $.extend({}, _.defaults, settings, dataSettings);\n      _.currentSlide = _.options.initialSlide;\n      _.originalSettings = _.options;\n\n      if (typeof document.mozHidden !== 'undefined') {\n        _.hidden = 'mozHidden';\n        _.visibilityChange = 'mozvisibilitychange';\n      } else if (typeof document.webkitHidden !== 'undefined') {\n        _.hidden = 'webkitHidden';\n        _.visibilityChange = 'webkitvisibilitychange';\n      }\n\n      _.autoPlay = $.proxy(_.autoPlay, _);\n      _.autoPlayClear = $.proxy(_.autoPlayClear, _);\n      _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);\n      _.changeSlide = $.proxy(_.changeSlide, _);\n      _.clickHandler = $.proxy(_.clickHandler, _);\n      _.selectHandler = $.proxy(_.selectHandler, _);\n      _.setPosition = $.proxy(_.setPosition, _);\n      _.swipeHandler = $.proxy(_.swipeHandler, _);\n      _.dragHandler = $.proxy(_.dragHandler, _);\n      _.keyHandler = $.proxy(_.keyHandler, _);\n      _.instanceUid = instanceUid++; // A simple way to check for HTML strings\n      // Strict HTML recognition (must start with <)\n      // Extracted from jQuery v1.11 source\n\n      _.htmlExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*)$/;\n\n      _.registerBreakpoints();\n\n      _.init(true);\n    }\n\n    return Slick;\n  }();\n\n  Slick.prototype.activateADA = function () {\n    var _ = this;\n\n    _.$slideTrack.find('.slick-active').attr({\n      'aria-hidden': 'false'\n    }).find('a, input, button, select').attr({\n      'tabindex': '0'\n    });\n  };\n\n  Slick.prototype.addSlide = Slick.prototype.slickAdd = function (markup, index, addBefore) {\n    var _ = this;\n\n    if (typeof index === 'boolean') {\n      addBefore = index;\n      index = null;\n    } else if (index < 0 || index >= _.slideCount) {\n      return false;\n    }\n\n    _.unload();\n\n    if (typeof index === 'number') {\n      if (index === 0 && _.$slides.length === 0) {\n        $(markup).appendTo(_.$slideTrack);\n      } else if (addBefore) {\n        $(markup).insertBefore(_.$slides.eq(index));\n      } else {\n        $(markup).insertAfter(_.$slides.eq(index));\n      }\n    } else {\n      if (addBefore === true) {\n        $(markup).prependTo(_.$slideTrack);\n      } else {\n        $(markup).appendTo(_.$slideTrack);\n      }\n    }\n\n    _.$slides = _.$slideTrack.children(this.options.slide);\n\n    _.$slideTrack.children(this.options.slide).detach();\n\n    _.$slideTrack.append(_.$slides);\n\n    _.$slides.each(function (index, element) {\n      $(element).attr('data-slick-index', index);\n    });\n\n    _.$slidesCache = _.$slides;\n\n    _.reinit();\n  };\n\n  Slick.prototype.animateHeight = function () {\n    var _ = this;\n\n    if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {\n      var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);\n\n      _.$list.animate({\n        height: targetHeight\n      }, _.options.speed);\n    }\n  };\n\n  Slick.prototype.animateSlide = function (targetLeft, callback) {\n    var animProps = {},\n        _ = this;\n\n    _.animateHeight();\n\n    if (_.options.rtl === true && _.options.vertical === false) {\n      targetLeft = -targetLeft;\n    }\n\n    if (_.transformsEnabled === false) {\n      if (_.options.vertical === false) {\n        _.$slideTrack.animate({\n          left: targetLeft\n        }, _.options.speed, _.options.easing, callback);\n      } else {\n        _.$slideTrack.animate({\n          top: targetLeft\n        }, _.options.speed, _.options.easing, callback);\n      }\n    } else {\n      if (_.cssTransitions === false) {\n        if (_.options.rtl === true) {\n          _.currentLeft = -_.currentLeft;\n        }\n\n        $({\n          animStart: _.currentLeft\n        }).animate({\n          animStart: targetLeft\n        }, {\n          duration: _.options.speed,\n          easing: _.options.easing,\n          step: function step(now) {\n            now = Math.ceil(now);\n\n            if (_.options.vertical === false) {\n              animProps[_.animType] = 'translate(' + now + 'px, 0px)';\n\n              _.$slideTrack.css(animProps);\n            } else {\n              animProps[_.animType] = 'translate(0px,' + now + 'px)';\n\n              _.$slideTrack.css(animProps);\n            }\n          },\n          complete: function complete() {\n            if (callback) {\n              callback.call();\n            }\n          }\n        });\n      } else {\n        _.applyTransition();\n\n        targetLeft = Math.ceil(targetLeft);\n\n        if (_.options.vertical === false) {\n          animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';\n        } else {\n          animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';\n        }\n\n        _.$slideTrack.css(animProps);\n\n        if (callback) {\n          setTimeout(function () {\n            _.disableTransition();\n\n            callback.call();\n          }, _.options.speed);\n        }\n      }\n    }\n  };\n\n  Slick.prototype.getNavTarget = function () {\n    var _ = this,\n        asNavFor = _.options.asNavFor;\n\n    if (asNavFor && asNavFor !== null) {\n      asNavFor = $(asNavFor).not(_.$slider);\n    }\n\n    return asNavFor;\n  };\n\n  Slick.prototype.asNavFor = function (index) {\n    var _ = this,\n        asNavFor = _.getNavTarget();\n\n    if (asNavFor !== null && _typeof(asNavFor) === 'object') {\n      asNavFor.each(function () {\n        var target = $(this).slick('getSlick');\n\n        if (!target.unslicked) {\n          target.slideHandler(index, true);\n        }\n      });\n    }\n  };\n\n  Slick.prototype.applyTransition = function (slide) {\n    var _ = this,\n        transition = {};\n\n    if (_.options.fade === false) {\n      transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;\n    } else {\n      transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;\n    }\n\n    if (_.options.fade === false) {\n      _.$slideTrack.css(transition);\n    } else {\n      _.$slides.eq(slide).css(transition);\n    }\n  };\n\n  Slick.prototype.autoPlay = function () {\n    var _ = this;\n\n    _.autoPlayClear();\n\n    if (_.slideCount > _.options.slidesToShow) {\n      _.autoPlayTimer = setInterval(_.autoPlayIterator, _.options.autoplaySpeed);\n    }\n  };\n\n  Slick.prototype.autoPlayClear = function () {\n    var _ = this;\n\n    if (_.autoPlayTimer) {\n      clearInterval(_.autoPlayTimer);\n    }\n  };\n\n  Slick.prototype.autoPlayIterator = function () {\n    var _ = this,\n        slideTo = _.currentSlide + _.options.slidesToScroll;\n\n    if (!_.paused && !_.interrupted && !_.focussed) {\n      if (_.options.infinite === false) {\n        if (_.direction === 1 && _.currentSlide + 1 === _.slideCount - 1) {\n          _.direction = 0;\n        } else if (_.direction === 0) {\n          slideTo = _.currentSlide - _.options.slidesToScroll;\n\n          if (_.currentSlide - 1 === 0) {\n            _.direction = 1;\n          }\n        }\n      }\n\n      _.slideHandler(slideTo);\n    }\n  };\n\n  Slick.prototype.buildArrows = function () {\n    var _ = this;\n\n    if (_.options.arrows === true) {\n      _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');\n      _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');\n\n      if (_.slideCount > _.options.slidesToShow) {\n        _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');\n\n        _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');\n\n        if (_.htmlExpr.test(_.options.prevArrow)) {\n          _.$prevArrow.prependTo(_.options.appendArrows);\n        }\n\n        if (_.htmlExpr.test(_.options.nextArrow)) {\n          _.$nextArrow.appendTo(_.options.appendArrows);\n        }\n\n        if (_.options.infinite !== true) {\n          _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\n        }\n      } else {\n        _.$prevArrow.add(_.$nextArrow).addClass('slick-hidden').attr({\n          'aria-disabled': 'true',\n          'tabindex': '-1'\n        });\n      }\n    }\n  };\n\n  Slick.prototype.buildDots = function () {\n    var _ = this,\n        i,\n        dot;\n\n    if (_.options.dots === true) {\n      _.$slider.addClass('slick-dotted');\n\n      dot = $('<ul />').addClass(_.options.dotsClass);\n\n      for (i = 0; i <= _.getDotCount(); i += 1) {\n        dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));\n      }\n\n      _.$dots = dot.appendTo(_.options.appendDots);\n\n      _.$dots.find('li').first().addClass('slick-active');\n    }\n  };\n\n  Slick.prototype.buildOut = function () {\n    var _ = this;\n\n    _.$slides = _.$slider.children(_.options.slide + ':not(.slick-cloned)').addClass('slick-slide');\n    _.slideCount = _.$slides.length;\n\n    _.$slides.each(function (index, element) {\n      $(element).attr('data-slick-index', index).data('originalStyling', $(element).attr('style') || '');\n    });\n\n    _.$slider.addClass('slick-slider');\n\n    _.$slideTrack = _.slideCount === 0 ? $('<div class=\"slick-track\"/>').appendTo(_.$slider) : _.$slides.wrapAll('<div class=\"slick-track\"/>').parent();\n    _.$list = _.$slideTrack.wrap('<div class=\"slick-list\"/>').parent();\n\n    _.$slideTrack.css('opacity', 0);\n\n    if (_.options.centerMode === true || _.options.swipeToSlide === true) {\n      _.options.slidesToScroll = 1;\n    }\n\n    $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');\n\n    _.setupInfinite();\n\n    _.buildArrows();\n\n    _.buildDots();\n\n    _.updateDots();\n\n    _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);\n\n    if (_.options.draggable === true) {\n      _.$list.addClass('draggable');\n    }\n  };\n\n  Slick.prototype.buildRows = function () {\n    var _ = this,\n        a,\n        b,\n        c,\n        newSlides,\n        numOfSlides,\n        originalSlides,\n        slidesPerSection;\n\n    newSlides = document.createDocumentFragment();\n    originalSlides = _.$slider.children();\n\n    if (_.options.rows > 1) {\n      slidesPerSection = _.options.slidesPerRow * _.options.rows;\n      numOfSlides = Math.ceil(originalSlides.length / slidesPerSection);\n\n      for (a = 0; a < numOfSlides; a++) {\n        var slide = document.createElement('div');\n\n        for (b = 0; b < _.options.rows; b++) {\n          var row = document.createElement('div');\n\n          for (c = 0; c < _.options.slidesPerRow; c++) {\n            var target = a * slidesPerSection + (b * _.options.slidesPerRow + c);\n\n            if (originalSlides.get(target)) {\n              row.appendChild(originalSlides.get(target));\n            }\n          }\n\n          slide.appendChild(row);\n        }\n\n        newSlides.appendChild(slide);\n      }\n\n      _.$slider.empty().append(newSlides);\n\n      _.$slider.children().children().children().css({\n        'width': 100 / _.options.slidesPerRow + '%',\n        'display': 'inline-block'\n      });\n    }\n  };\n\n  Slick.prototype.checkResponsive = function (initial, forceUpdate) {\n    var _ = this,\n        breakpoint,\n        targetBreakpoint,\n        respondToWidth,\n        triggerBreakpoint = false;\n\n    var sliderWidth = _.$slider.width();\n\n    var windowWidth = window.innerWidth || $(window).width();\n\n    if (_.respondTo === 'window') {\n      respondToWidth = windowWidth;\n    } else if (_.respondTo === 'slider') {\n      respondToWidth = sliderWidth;\n    } else if (_.respondTo === 'min') {\n      respondToWidth = Math.min(windowWidth, sliderWidth);\n    }\n\n    if (_.options.responsive && _.options.responsive.length && _.options.responsive !== null) {\n      targetBreakpoint = null;\n\n      for (breakpoint in _.breakpoints) {\n        if (_.breakpoints.hasOwnProperty(breakpoint)) {\n          if (_.originalSettings.mobileFirst === false) {\n            if (respondToWidth < _.breakpoints[breakpoint]) {\n              targetBreakpoint = _.breakpoints[breakpoint];\n            }\n          } else {\n            if (respondToWidth > _.breakpoints[breakpoint]) {\n              targetBreakpoint = _.breakpoints[breakpoint];\n            }\n          }\n        }\n      }\n\n      if (targetBreakpoint !== null) {\n        if (_.activeBreakpoint !== null) {\n          if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {\n            _.activeBreakpoint = targetBreakpoint;\n\n            if (_.breakpointSettings[targetBreakpoint] === 'unslick') {\n              _.unslick(targetBreakpoint);\n            } else {\n              _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);\n\n              if (initial === true) {\n                _.currentSlide = _.options.initialSlide;\n              }\n\n              _.refresh(initial);\n            }\n\n            triggerBreakpoint = targetBreakpoint;\n          }\n        } else {\n          _.activeBreakpoint = targetBreakpoint;\n\n          if (_.breakpointSettings[targetBreakpoint] === 'unslick') {\n            _.unslick(targetBreakpoint);\n          } else {\n            _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);\n\n            if (initial === true) {\n              _.currentSlide = _.options.initialSlide;\n            }\n\n            _.refresh(initial);\n          }\n\n          triggerBreakpoint = targetBreakpoint;\n        }\n      } else {\n        if (_.activeBreakpoint !== null) {\n          _.activeBreakpoint = null;\n          _.options = _.originalSettings;\n\n          if (initial === true) {\n            _.currentSlide = _.options.initialSlide;\n          }\n\n          _.refresh(initial);\n\n          triggerBreakpoint = targetBreakpoint;\n        }\n      } // only trigger breakpoints during an actual break. not on initialize.\n\n\n      if (!initial && triggerBreakpoint !== false) {\n        _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);\n      }\n    }\n  };\n\n  Slick.prototype.changeSlide = function (event, dontAnimate) {\n    var _ = this,\n        $target = $(event.currentTarget),\n        indexOffset,\n        slideOffset,\n        unevenOffset; // If target is a link, prevent default action.\n\n\n    if ($target.is('a')) {\n      event.preventDefault();\n    } // If target is not the <li> element (ie: a child), find the <li>.\n\n\n    if (!$target.is('li')) {\n      $target = $target.closest('li');\n    }\n\n    unevenOffset = _.slideCount % _.options.slidesToScroll !== 0;\n    indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;\n\n    switch (event.data.message) {\n      case 'previous':\n        slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;\n\n        if (_.slideCount > _.options.slidesToShow) {\n          _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);\n        }\n\n        break;\n\n      case 'next':\n        slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;\n\n        if (_.slideCount > _.options.slidesToShow) {\n          _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);\n        }\n\n        break;\n\n      case 'index':\n        var index = event.data.index === 0 ? 0 : event.data.index || $target.index() * _.options.slidesToScroll;\n\n        _.slideHandler(_.checkNavigable(index), false, dontAnimate);\n\n        $target.children().trigger('focus');\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  Slick.prototype.checkNavigable = function (index) {\n    var _ = this,\n        navigables,\n        prevNavigable;\n\n    navigables = _.getNavigableIndexes();\n    prevNavigable = 0;\n\n    if (index > navigables[navigables.length - 1]) {\n      index = navigables[navigables.length - 1];\n    } else {\n      for (var n in navigables) {\n        if (index < navigables[n]) {\n          index = prevNavigable;\n          break;\n        }\n\n        prevNavigable = navigables[n];\n      }\n    }\n\n    return index;\n  };\n\n  Slick.prototype.cleanUpEvents = function () {\n    var _ = this;\n\n    if (_.options.dots && _.$dots !== null) {\n      $('li', _.$dots).off('click.slick', _.changeSlide).off('mouseenter.slick', $.proxy(_.interrupt, _, true)).off('mouseleave.slick', $.proxy(_.interrupt, _, false));\n\n      if (_.options.accessibility === true) {\n        _.$dots.off('keydown.slick', _.keyHandler);\n      }\n    }\n\n    _.$slider.off('focus.slick blur.slick');\n\n    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n      _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);\n      _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);\n\n      if (_.options.accessibility === true) {\n        _.$prevArrow && _.$prevArrow.off('keydown.slick', _.keyHandler);\n        _.$nextArrow && _.$nextArrow.off('keydown.slick', _.keyHandler);\n      }\n    }\n\n    _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);\n\n    _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);\n\n    _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);\n\n    _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);\n\n    _.$list.off('click.slick', _.clickHandler);\n\n    $(document).off(_.visibilityChange, _.visibility);\n\n    _.cleanUpSlideEvents();\n\n    if (_.options.accessibility === true) {\n      _.$list.off('keydown.slick', _.keyHandler);\n    }\n\n    if (_.options.focusOnSelect === true) {\n      $(_.$slideTrack).children().off('click.slick', _.selectHandler);\n    }\n\n    $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);\n    $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);\n    $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);\n    $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);\n  };\n\n  Slick.prototype.cleanUpSlideEvents = function () {\n    var _ = this;\n\n    _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));\n\n    _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));\n  };\n\n  Slick.prototype.cleanUpRows = function () {\n    var _ = this,\n        originalSlides;\n\n    if (_.options.rows > 1) {\n      originalSlides = _.$slides.children().children();\n      originalSlides.removeAttr('style');\n\n      _.$slider.empty().append(originalSlides);\n    }\n  };\n\n  Slick.prototype.clickHandler = function (event) {\n    var _ = this;\n\n    if (_.shouldClick === false) {\n      event.stopImmediatePropagation();\n      event.stopPropagation();\n      event.preventDefault();\n    }\n  };\n\n  Slick.prototype.destroy = function (refresh) {\n    var _ = this;\n\n    _.autoPlayClear();\n\n    _.touchObject = {};\n\n    _.cleanUpEvents();\n\n    $('.slick-cloned', _.$slider).detach();\n\n    if (_.$dots) {\n      _.$dots.remove();\n    }\n\n    if (_.$prevArrow && _.$prevArrow.length) {\n      _.$prevArrow.removeClass('slick-disabled slick-arrow slick-hidden').removeAttr('aria-hidden aria-disabled tabindex').css('display', '');\n\n      if (_.htmlExpr.test(_.options.prevArrow)) {\n        _.$prevArrow.remove();\n      }\n    }\n\n    if (_.$nextArrow && _.$nextArrow.length) {\n      _.$nextArrow.removeClass('slick-disabled slick-arrow slick-hidden').removeAttr('aria-hidden aria-disabled tabindex').css('display', '');\n\n      if (_.htmlExpr.test(_.options.nextArrow)) {\n        _.$nextArrow.remove();\n      }\n    }\n\n    if (_.$slides) {\n      _.$slides.removeClass('slick-slide slick-active slick-center slick-visible slick-current').removeAttr('aria-hidden').removeAttr('data-slick-index').each(function () {\n        $(this).attr('style', $(this).data('originalStyling'));\n      });\n\n      _.$slideTrack.children(this.options.slide).detach();\n\n      _.$slideTrack.detach();\n\n      _.$list.detach();\n\n      _.$slider.append(_.$slides);\n    }\n\n    _.cleanUpRows();\n\n    _.$slider.removeClass('slick-slider');\n\n    _.$slider.removeClass('slick-initialized');\n\n    _.$slider.removeClass('slick-dotted');\n\n    _.unslicked = true;\n\n    if (!refresh) {\n      _.$slider.trigger('destroy', [_]);\n    }\n  };\n\n  Slick.prototype.disableTransition = function (slide) {\n    var _ = this,\n        transition = {};\n\n    transition[_.transitionType] = '';\n\n    if (_.options.fade === false) {\n      _.$slideTrack.css(transition);\n    } else {\n      _.$slides.eq(slide).css(transition);\n    }\n  };\n\n  Slick.prototype.fadeSlide = function (slideIndex, callback) {\n    var _ = this;\n\n    if (_.cssTransitions === false) {\n      _.$slides.eq(slideIndex).css({\n        zIndex: _.options.zIndex\n      });\n\n      _.$slides.eq(slideIndex).animate({\n        opacity: 1\n      }, _.options.speed, _.options.easing, callback);\n    } else {\n      _.applyTransition(slideIndex);\n\n      _.$slides.eq(slideIndex).css({\n        opacity: 1,\n        zIndex: _.options.zIndex\n      });\n\n      if (callback) {\n        setTimeout(function () {\n          _.disableTransition(slideIndex);\n\n          callback.call();\n        }, _.options.speed);\n      }\n    }\n  };\n\n  Slick.prototype.fadeSlideOut = function (slideIndex) {\n    var _ = this;\n\n    if (_.cssTransitions === false) {\n      _.$slides.eq(slideIndex).animate({\n        opacity: 0,\n        zIndex: _.options.zIndex - 2\n      }, _.options.speed, _.options.easing);\n    } else {\n      _.applyTransition(slideIndex);\n\n      _.$slides.eq(slideIndex).css({\n        opacity: 0,\n        zIndex: _.options.zIndex - 2\n      });\n    }\n  };\n\n  Slick.prototype.filterSlides = Slick.prototype.slickFilter = function (filter) {\n    var _ = this;\n\n    if (filter !== null) {\n      _.$slidesCache = _.$slides;\n\n      _.unload();\n\n      _.$slideTrack.children(this.options.slide).detach();\n\n      _.$slidesCache.filter(filter).appendTo(_.$slideTrack);\n\n      _.reinit();\n    }\n  };\n\n  Slick.prototype.focusHandler = function () {\n    var _ = this;\n\n    _.$slider.off('focus.slick blur.slick').on('focus.slick blur.slick', '*', function (event) {\n      event.stopImmediatePropagation();\n      var $sf = $(this);\n      setTimeout(function () {\n        if (_.options.pauseOnFocus) {\n          _.focussed = $sf.is(':focus');\n\n          _.autoPlay();\n        }\n      }, 0);\n    });\n  };\n\n  Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function () {\n    var _ = this;\n\n    return _.currentSlide;\n  };\n\n  Slick.prototype.getDotCount = function () {\n    var _ = this;\n\n    var breakPoint = 0;\n    var counter = 0;\n    var pagerQty = 0;\n\n    if (_.options.infinite === true) {\n      if (_.slideCount <= _.options.slidesToShow) {\n        ++pagerQty;\n      } else {\n        while (breakPoint < _.slideCount) {\n          ++pagerQty;\n          breakPoint = counter + _.options.slidesToScroll;\n          counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\n        }\n      }\n    } else if (_.options.centerMode === true) {\n      pagerQty = _.slideCount;\n    } else if (!_.options.asNavFor) {\n      pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);\n    } else {\n      while (breakPoint < _.slideCount) {\n        ++pagerQty;\n        breakPoint = counter + _.options.slidesToScroll;\n        counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\n      }\n    }\n\n    return pagerQty - 1;\n  };\n\n  Slick.prototype.getLeft = function (slideIndex) {\n    var _ = this,\n        targetLeft,\n        verticalHeight,\n        verticalOffset = 0,\n        targetSlide,\n        coef;\n\n    _.slideOffset = 0;\n    verticalHeight = _.$slides.first().outerHeight(true);\n\n    if (_.options.infinite === true) {\n      if (_.slideCount > _.options.slidesToShow) {\n        _.slideOffset = _.slideWidth * _.options.slidesToShow * -1;\n        coef = -1;\n\n        if (_.options.vertical === true && _.options.centerMode === true) {\n          if (_.options.slidesToShow === 2) {\n            coef = -1.5;\n          } else if (_.options.slidesToShow === 1) {\n            coef = -2;\n          }\n        }\n\n        verticalOffset = verticalHeight * _.options.slidesToShow * coef;\n      }\n\n      if (_.slideCount % _.options.slidesToScroll !== 0) {\n        if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {\n          if (slideIndex > _.slideCount) {\n            _.slideOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth * -1;\n            verticalOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight * -1;\n          } else {\n            _.slideOffset = _.slideCount % _.options.slidesToScroll * _.slideWidth * -1;\n            verticalOffset = _.slideCount % _.options.slidesToScroll * verticalHeight * -1;\n          }\n        }\n      }\n    } else {\n      if (slideIndex + _.options.slidesToShow > _.slideCount) {\n        _.slideOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * _.slideWidth;\n        verticalOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * verticalHeight;\n      }\n    }\n\n    if (_.slideCount <= _.options.slidesToShow) {\n      _.slideOffset = 0;\n      verticalOffset = 0;\n    }\n\n    if (_.options.centerMode === true && _.slideCount <= _.options.slidesToShow) {\n      _.slideOffset = _.slideWidth * Math.floor(_.options.slidesToShow) / 2 - _.slideWidth * _.slideCount / 2;\n    } else if (_.options.centerMode === true && _.options.infinite === true) {\n      _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;\n    } else if (_.options.centerMode === true) {\n      _.slideOffset = 0;\n      _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);\n    }\n\n    if (_.options.vertical === false) {\n      targetLeft = slideIndex * _.slideWidth * -1 + _.slideOffset;\n    } else {\n      targetLeft = slideIndex * verticalHeight * -1 + verticalOffset;\n    }\n\n    if (_.options.variableWidth === true) {\n      if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {\n        targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);\n      } else {\n        targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);\n      }\n\n      if (_.options.rtl === true) {\n        if (targetSlide[0]) {\n          targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;\n        } else {\n          targetLeft = 0;\n        }\n      } else {\n        targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;\n      }\n\n      if (_.options.centerMode === true) {\n        if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {\n          targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);\n        } else {\n          targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);\n        }\n\n        if (_.options.rtl === true) {\n          if (targetSlide[0]) {\n            targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;\n          } else {\n            targetLeft = 0;\n          }\n        } else {\n          targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;\n        }\n\n        targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;\n      }\n    }\n\n    return targetLeft;\n  };\n\n  Slick.prototype.getOption = Slick.prototype.slickGetOption = function (option) {\n    var _ = this;\n\n    return _.options[option];\n  };\n\n  Slick.prototype.getNavigableIndexes = function () {\n    var _ = this,\n        breakPoint = 0,\n        counter = 0,\n        indexes = [],\n        max;\n\n    if (_.options.infinite === false) {\n      max = _.slideCount;\n    } else {\n      breakPoint = _.options.slidesToScroll * -1;\n      counter = _.options.slidesToScroll * -1;\n      max = _.slideCount * 2;\n    }\n\n    while (breakPoint < max) {\n      indexes.push(breakPoint);\n      breakPoint = counter + _.options.slidesToScroll;\n      counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\n    }\n\n    return indexes;\n  };\n\n  Slick.prototype.getSlick = function () {\n    return this;\n  };\n\n  Slick.prototype.getSlideCount = function () {\n    var _ = this,\n        slidesTraversed,\n        swipedSlide,\n        centerOffset;\n\n    centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;\n\n    if (_.options.swipeToSlide === true) {\n      _.$slideTrack.find('.slick-slide').each(function (index, slide) {\n        if (slide.offsetLeft - centerOffset + $(slide).outerWidth() / 2 > _.swipeLeft * -1) {\n          swipedSlide = slide;\n          return false;\n        }\n      });\n\n      slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;\n      return slidesTraversed;\n    } else {\n      return _.options.slidesToScroll;\n    }\n  };\n\n  Slick.prototype.goTo = Slick.prototype.slickGoTo = function (slide, dontAnimate) {\n    var _ = this;\n\n    _.changeSlide({\n      data: {\n        message: 'index',\n        index: parseInt(slide)\n      }\n    }, dontAnimate);\n  };\n\n  Slick.prototype.init = function (creation) {\n    var _ = this;\n\n    if (!$(_.$slider).hasClass('slick-initialized')) {\n      $(_.$slider).addClass('slick-initialized');\n\n      _.buildRows();\n\n      _.buildOut();\n\n      _.setProps();\n\n      _.startLoad();\n\n      _.loadSlider();\n\n      _.initializeEvents();\n\n      _.updateArrows();\n\n      _.updateDots();\n\n      _.checkResponsive(true);\n\n      _.focusHandler();\n    }\n\n    if (creation) {\n      _.$slider.trigger('init', [_]);\n    }\n\n    if (_.options.accessibility === true) {\n      _.initADA();\n    }\n\n    if (_.options.autoplay) {\n      _.paused = false;\n\n      _.autoPlay();\n    }\n  };\n\n  Slick.prototype.initADA = function () {\n    var _ = this,\n        numDotGroups = Math.ceil(_.slideCount / _.options.slidesToShow),\n        tabControlIndexes = _.getNavigableIndexes().filter(function (val) {\n      return val >= 0 && val < _.slideCount;\n    });\n\n    _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({\n      'aria-hidden': 'true',\n      'tabindex': '-1'\n    }).find('a, input, button, select').attr({\n      'tabindex': '-1'\n    });\n\n    if (_.$dots !== null) {\n      _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function (i) {\n        var slideControlIndex = tabControlIndexes.indexOf(i);\n        $(this).attr({\n          'role': 'tabpanel',\n          'id': 'slick-slide' + _.instanceUid + i,\n          'tabindex': -1\n        });\n\n        if (slideControlIndex !== -1) {\n          $(this).attr({\n            'aria-describedby': 'slick-slide-control' + _.instanceUid + slideControlIndex\n          });\n        }\n      });\n\n      _.$dots.attr('role', 'tablist').find('li').each(function (i) {\n        var mappedSlideIndex = tabControlIndexes[i];\n        $(this).attr({\n          'role': 'presentation'\n        });\n        $(this).find('button').first().attr({\n          'role': 'tab',\n          'id': 'slick-slide-control' + _.instanceUid + i,\n          'aria-controls': 'slick-slide' + _.instanceUid + mappedSlideIndex,\n          'aria-label': i + 1 + ' of ' + numDotGroups,\n          'aria-selected': null,\n          'tabindex': '-1'\n        });\n      }).eq(_.currentSlide).find('button').attr({\n        'aria-selected': 'true',\n        'tabindex': '0'\n      }).end();\n    }\n\n    for (var i = _.currentSlide, max = i + _.options.slidesToShow; i < max; i++) {\n      _.$slides.eq(i).attr('tabindex', 0);\n    }\n\n    _.activateADA();\n  };\n\n  Slick.prototype.initArrowEvents = function () {\n    var _ = this;\n\n    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n      _.$prevArrow.off('click.slick').on('click.slick', {\n        message: 'previous'\n      }, _.changeSlide);\n\n      _.$nextArrow.off('click.slick').on('click.slick', {\n        message: 'next'\n      }, _.changeSlide);\n\n      if (_.options.accessibility === true) {\n        _.$prevArrow.on('keydown.slick', _.keyHandler);\n\n        _.$nextArrow.on('keydown.slick', _.keyHandler);\n      }\n    }\n  };\n\n  Slick.prototype.initDotEvents = function () {\n    var _ = this;\n\n    if (_.options.dots === true) {\n      $('li', _.$dots).on('click.slick', {\n        message: 'index'\n      }, _.changeSlide);\n\n      if (_.options.accessibility === true) {\n        _.$dots.on('keydown.slick', _.keyHandler);\n      }\n    }\n\n    if (_.options.dots === true && _.options.pauseOnDotsHover === true) {\n      $('li', _.$dots).on('mouseenter.slick', $.proxy(_.interrupt, _, true)).on('mouseleave.slick', $.proxy(_.interrupt, _, false));\n    }\n  };\n\n  Slick.prototype.initSlideEvents = function () {\n    var _ = this;\n\n    if (_.options.pauseOnHover) {\n      _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));\n\n      _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));\n    }\n  };\n\n  Slick.prototype.initializeEvents = function () {\n    var _ = this;\n\n    _.initArrowEvents();\n\n    _.initDotEvents();\n\n    _.initSlideEvents();\n\n    _.$list.on('touchstart.slick mousedown.slick', {\n      action: 'start'\n    }, _.swipeHandler);\n\n    _.$list.on('touchmove.slick mousemove.slick', {\n      action: 'move'\n    }, _.swipeHandler);\n\n    _.$list.on('touchend.slick mouseup.slick', {\n      action: 'end'\n    }, _.swipeHandler);\n\n    _.$list.on('touchcancel.slick mouseleave.slick', {\n      action: 'end'\n    }, _.swipeHandler);\n\n    _.$list.on('click.slick', _.clickHandler);\n\n    $(document).on(_.visibilityChange, $.proxy(_.visibility, _));\n\n    if (_.options.accessibility === true) {\n      _.$list.on('keydown.slick', _.keyHandler);\n    }\n\n    if (_.options.focusOnSelect === true) {\n      $(_.$slideTrack).children().on('click.slick', _.selectHandler);\n    }\n\n    $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));\n    $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));\n    $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);\n    $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);\n    $(_.setPosition);\n  };\n\n  Slick.prototype.initUI = function () {\n    var _ = this;\n\n    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n      _.$prevArrow.show();\n\n      _.$nextArrow.show();\n    }\n\n    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n      _.$dots.show();\n    }\n  };\n\n  Slick.prototype.keyHandler = function (event) {\n    var _ = this; //Dont slide if the cursor is inside the form fields and arrow keys are pressed\n\n\n    if (!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {\n      if (event.keyCode === 37 && _.options.accessibility === true) {\n        _.changeSlide({\n          data: {\n            message: _.options.rtl === true ? 'next' : 'previous'\n          }\n        });\n      } else if (event.keyCode === 39 && _.options.accessibility === true) {\n        _.changeSlide({\n          data: {\n            message: _.options.rtl === true ? 'previous' : 'next'\n          }\n        });\n      }\n    }\n  };\n\n  Slick.prototype.lazyLoad = function () {\n    var _ = this,\n        loadRange,\n        cloneRange,\n        rangeStart,\n        rangeEnd;\n\n    function loadImages(imagesScope) {\n      $('img[data-lazy]', imagesScope).each(function () {\n        var image = $(this),\n            imageSource = $(this).attr('data-lazy'),\n            imageSrcSet = $(this).attr('data-srcset'),\n            imageSizes = $(this).attr('data-sizes') || _.$slider.attr('data-sizes'),\n            imageToLoad = document.createElement('img');\n\n        imageToLoad.onload = function () {\n          image.animate({\n            opacity: 0\n          }, 100, function () {\n            if (imageSrcSet) {\n              image.attr('srcset', imageSrcSet);\n\n              if (imageSizes) {\n                image.attr('sizes', imageSizes);\n              }\n            }\n\n            image.attr('src', imageSource).animate({\n              opacity: 1\n            }, 200, function () {\n              image.removeAttr('data-lazy data-srcset data-sizes').removeClass('slick-loading');\n            });\n\n            _.$slider.trigger('lazyLoaded', [_, image, imageSource]);\n          });\n        };\n\n        imageToLoad.onerror = function () {\n          image.removeAttr('data-lazy').removeClass('slick-loading').addClass('slick-lazyload-error');\n\n          _.$slider.trigger('lazyLoadError', [_, image, imageSource]);\n        };\n\n        imageToLoad.src = imageSource;\n      });\n    }\n\n    if (_.options.centerMode === true) {\n      if (_.options.infinite === true) {\n        rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);\n        rangeEnd = rangeStart + _.options.slidesToShow + 2;\n      } else {\n        rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));\n        rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;\n      }\n    } else {\n      rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;\n      rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);\n\n      if (_.options.fade === true) {\n        if (rangeStart > 0) rangeStart--;\n        if (rangeEnd <= _.slideCount) rangeEnd++;\n      }\n    }\n\n    loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);\n\n    if (_.options.lazyLoad === 'anticipated') {\n      var prevSlide = rangeStart - 1,\n          nextSlide = rangeEnd,\n          $slides = _.$slider.find('.slick-slide');\n\n      for (var i = 0; i < _.options.slidesToScroll; i++) {\n        if (prevSlide < 0) prevSlide = _.slideCount - 1;\n        loadRange = loadRange.add($slides.eq(prevSlide));\n        loadRange = loadRange.add($slides.eq(nextSlide));\n        prevSlide--;\n        nextSlide++;\n      }\n    }\n\n    loadImages(loadRange);\n\n    if (_.slideCount <= _.options.slidesToShow) {\n      cloneRange = _.$slider.find('.slick-slide');\n      loadImages(cloneRange);\n    } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {\n      cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);\n      loadImages(cloneRange);\n    } else if (_.currentSlide === 0) {\n      cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);\n      loadImages(cloneRange);\n    }\n  };\n\n  Slick.prototype.loadSlider = function () {\n    var _ = this;\n\n    _.setPosition();\n\n    _.$slideTrack.css({\n      opacity: 1\n    });\n\n    _.$slider.removeClass('slick-loading');\n\n    _.initUI();\n\n    if (_.options.lazyLoad === 'progressive') {\n      _.progressiveLazyLoad();\n    }\n  };\n\n  Slick.prototype.next = Slick.prototype.slickNext = function () {\n    var _ = this;\n\n    _.changeSlide({\n      data: {\n        message: 'next'\n      }\n    });\n  };\n\n  Slick.prototype.orientationChange = function () {\n    var _ = this;\n\n    _.checkResponsive();\n\n    _.setPosition();\n  };\n\n  Slick.prototype.pause = Slick.prototype.slickPause = function () {\n    var _ = this;\n\n    _.autoPlayClear();\n\n    _.paused = true;\n  };\n\n  Slick.prototype.play = Slick.prototype.slickPlay = function () {\n    var _ = this;\n\n    _.autoPlay();\n\n    _.options.autoplay = true;\n    _.paused = false;\n    _.focussed = false;\n    _.interrupted = false;\n  };\n\n  Slick.prototype.postSlide = function (index) {\n    var _ = this;\n\n    if (!_.unslicked) {\n      _.$slider.trigger('afterChange', [_, index]);\n\n      _.animating = false;\n\n      if (_.slideCount > _.options.slidesToShow) {\n        _.setPosition();\n      }\n\n      _.swipeLeft = null;\n\n      if (_.options.autoplay) {\n        _.autoPlay();\n      }\n\n      if (_.options.accessibility === true) {\n        _.initADA();\n\n        if (_.options.focusOnChange) {\n          var $currentSlide = $(_.$slides.get(_.currentSlide));\n          $currentSlide.attr('tabindex', 0).focus();\n        }\n      }\n    }\n  };\n\n  Slick.prototype.prev = Slick.prototype.slickPrev = function () {\n    var _ = this;\n\n    _.changeSlide({\n      data: {\n        message: 'previous'\n      }\n    });\n  };\n\n  Slick.prototype.preventDefault = function (event) {\n    event.preventDefault();\n  };\n\n  Slick.prototype.progressiveLazyLoad = function (tryCount) {\n    tryCount = tryCount || 1;\n\n    var _ = this,\n        $imgsToLoad = $('img[data-lazy]', _.$slider),\n        image,\n        imageSource,\n        imageSrcSet,\n        imageSizes,\n        imageToLoad;\n\n    if ($imgsToLoad.length) {\n      image = $imgsToLoad.first();\n      imageSource = image.attr('data-lazy');\n      imageSrcSet = image.attr('data-srcset');\n      imageSizes = image.attr('data-sizes') || _.$slider.attr('data-sizes');\n      imageToLoad = document.createElement('img');\n\n      imageToLoad.onload = function () {\n        if (imageSrcSet) {\n          image.attr('srcset', imageSrcSet);\n\n          if (imageSizes) {\n            image.attr('sizes', imageSizes);\n          }\n        }\n\n        image.attr('src', imageSource).removeAttr('data-lazy data-srcset data-sizes').removeClass('slick-loading');\n\n        if (_.options.adaptiveHeight === true) {\n          _.setPosition();\n        }\n\n        _.$slider.trigger('lazyLoaded', [_, image, imageSource]);\n\n        _.progressiveLazyLoad();\n      };\n\n      imageToLoad.onerror = function () {\n        if (tryCount < 3) {\n          /**\n           * try to load the image 3 times,\n           * leave a slight delay so we don't get\n           * servers blocking the request.\n           */\n          setTimeout(function () {\n            _.progressiveLazyLoad(tryCount + 1);\n          }, 500);\n        } else {\n          image.removeAttr('data-lazy').removeClass('slick-loading').addClass('slick-lazyload-error');\n\n          _.$slider.trigger('lazyLoadError', [_, image, imageSource]);\n\n          _.progressiveLazyLoad();\n        }\n      };\n\n      imageToLoad.src = imageSource;\n    } else {\n      _.$slider.trigger('allImagesLoaded', [_]);\n    }\n  };\n\n  Slick.prototype.refresh = function (initializing) {\n    var _ = this,\n        currentSlide,\n        lastVisibleIndex;\n\n    lastVisibleIndex = _.slideCount - _.options.slidesToShow; // in non-infinite sliders, we don't want to go past the\n    // last visible index.\n\n    if (!_.options.infinite && _.currentSlide > lastVisibleIndex) {\n      _.currentSlide = lastVisibleIndex;\n    } // if less slides than to show, go to start.\n\n\n    if (_.slideCount <= _.options.slidesToShow) {\n      _.currentSlide = 0;\n    }\n\n    currentSlide = _.currentSlide;\n\n    _.destroy(true);\n\n    $.extend(_, _.initials, {\n      currentSlide: currentSlide\n    });\n\n    _.init();\n\n    if (!initializing) {\n      _.changeSlide({\n        data: {\n          message: 'index',\n          index: currentSlide\n        }\n      }, false);\n    }\n  };\n\n  Slick.prototype.registerBreakpoints = function () {\n    var _ = this,\n        breakpoint,\n        currentBreakpoint,\n        l,\n        responsiveSettings = _.options.responsive || null;\n\n    if ($.type(responsiveSettings) === 'array' && responsiveSettings.length) {\n      _.respondTo = _.options.respondTo || 'window';\n\n      for (breakpoint in responsiveSettings) {\n        l = _.breakpoints.length - 1;\n\n        if (responsiveSettings.hasOwnProperty(breakpoint)) {\n          currentBreakpoint = responsiveSettings[breakpoint].breakpoint; // loop through the breakpoints and cut out any existing\n          // ones with the same breakpoint number, we don't want dupes.\n\n          while (l >= 0) {\n            if (_.breakpoints[l] && _.breakpoints[l] === currentBreakpoint) {\n              _.breakpoints.splice(l, 1);\n            }\n\n            l--;\n          }\n\n          _.breakpoints.push(currentBreakpoint);\n\n          _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;\n        }\n      }\n\n      _.breakpoints.sort(function (a, b) {\n        return _.options.mobileFirst ? a - b : b - a;\n      });\n    }\n  };\n\n  Slick.prototype.reinit = function () {\n    var _ = this;\n\n    _.$slides = _.$slideTrack.children(_.options.slide).addClass('slick-slide');\n    _.slideCount = _.$slides.length;\n\n    if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {\n      _.currentSlide = _.currentSlide - _.options.slidesToScroll;\n    }\n\n    if (_.slideCount <= _.options.slidesToShow) {\n      _.currentSlide = 0;\n    }\n\n    _.registerBreakpoints();\n\n    _.setProps();\n\n    _.setupInfinite();\n\n    _.buildArrows();\n\n    _.updateArrows();\n\n    _.initArrowEvents();\n\n    _.buildDots();\n\n    _.updateDots();\n\n    _.initDotEvents();\n\n    _.cleanUpSlideEvents();\n\n    _.initSlideEvents();\n\n    _.checkResponsive(false, true);\n\n    if (_.options.focusOnSelect === true) {\n      $(_.$slideTrack).children().on('click.slick', _.selectHandler);\n    }\n\n    _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);\n\n    _.setPosition();\n\n    _.focusHandler();\n\n    _.paused = !_.options.autoplay;\n\n    _.autoPlay();\n\n    _.$slider.trigger('reInit', [_]);\n  };\n\n  Slick.prototype.resize = function () {\n    var _ = this;\n\n    if ($(window).width() !== _.windowWidth) {\n      clearTimeout(_.windowDelay);\n      _.windowDelay = window.setTimeout(function () {\n        _.windowWidth = $(window).width();\n\n        _.checkResponsive();\n\n        if (!_.unslicked) {\n          _.setPosition();\n        }\n      }, 50);\n    }\n  };\n\n  Slick.prototype.removeSlide = Slick.prototype.slickRemove = function (index, removeBefore, removeAll) {\n    var _ = this;\n\n    if (typeof index === 'boolean') {\n      removeBefore = index;\n      index = removeBefore === true ? 0 : _.slideCount - 1;\n    } else {\n      index = removeBefore === true ? --index : index;\n    }\n\n    if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {\n      return false;\n    }\n\n    _.unload();\n\n    if (removeAll === true) {\n      _.$slideTrack.children().remove();\n    } else {\n      _.$slideTrack.children(this.options.slide).eq(index).remove();\n    }\n\n    _.$slides = _.$slideTrack.children(this.options.slide);\n\n    _.$slideTrack.children(this.options.slide).detach();\n\n    _.$slideTrack.append(_.$slides);\n\n    _.$slidesCache = _.$slides;\n\n    _.reinit();\n  };\n\n  Slick.prototype.setCSS = function (position) {\n    var _ = this,\n        positionProps = {},\n        x,\n        y;\n\n    if (_.options.rtl === true) {\n      position = -position;\n    }\n\n    x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';\n    y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';\n    positionProps[_.positionProp] = position;\n\n    if (_.transformsEnabled === false) {\n      _.$slideTrack.css(positionProps);\n    } else {\n      positionProps = {};\n\n      if (_.cssTransitions === false) {\n        positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';\n\n        _.$slideTrack.css(positionProps);\n      } else {\n        positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';\n\n        _.$slideTrack.css(positionProps);\n      }\n    }\n  };\n\n  Slick.prototype.setDimensions = function () {\n    var _ = this;\n\n    if (_.options.vertical === false) {\n      if (_.options.centerMode === true) {\n        _.$list.css({\n          padding: '0px ' + _.options.centerPadding\n        });\n      }\n    } else {\n      _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);\n\n      if (_.options.centerMode === true) {\n        _.$list.css({\n          padding: _.options.centerPadding + ' 0px'\n        });\n      }\n    }\n\n    _.listWidth = _.$list.width();\n    _.listHeight = _.$list.height();\n\n    if (_.options.vertical === false && _.options.variableWidth === false) {\n      _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);\n\n      _.$slideTrack.width(Math.ceil(_.slideWidth * _.$slideTrack.children('.slick-slide').length));\n    } else if (_.options.variableWidth === true) {\n      _.$slideTrack.width(5000 * _.slideCount);\n    } else {\n      _.slideWidth = Math.ceil(_.listWidth);\n\n      _.$slideTrack.height(Math.ceil(_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length));\n    }\n\n    var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();\n\n    if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);\n  };\n\n  Slick.prototype.setFade = function () {\n    var _ = this,\n        targetLeft;\n\n    _.$slides.each(function (index, element) {\n      targetLeft = _.slideWidth * index * -1;\n\n      if (_.options.rtl === true) {\n        $(element).css({\n          position: 'relative',\n          right: targetLeft,\n          top: 0,\n          zIndex: _.options.zIndex - 2,\n          opacity: 0\n        });\n      } else {\n        $(element).css({\n          position: 'relative',\n          left: targetLeft,\n          top: 0,\n          zIndex: _.options.zIndex - 2,\n          opacity: 0\n        });\n      }\n    });\n\n    _.$slides.eq(_.currentSlide).css({\n      zIndex: _.options.zIndex - 1,\n      opacity: 1\n    });\n  };\n\n  Slick.prototype.setHeight = function () {\n    var _ = this;\n\n    if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {\n      var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);\n\n      _.$list.css('height', targetHeight);\n    }\n  };\n\n  Slick.prototype.setOption = Slick.prototype.slickSetOption = function () {\n    /**\n     * accepts arguments in format of:\n     *\n     *  - for changing a single option's value:\n     *     .slick(\"setOption\", option, value, refresh )\n     *\n     *  - for changing a set of responsive options:\n     *     .slick(\"setOption\", 'responsive', [{}, ...], refresh )\n     *\n     *  - for updating multiple values at once (not responsive)\n     *     .slick(\"setOption\", { 'option': value, ... }, refresh )\n     */\n    var _ = this,\n        l,\n        item,\n        option,\n        value,\n        refresh = false,\n        type;\n\n    if ($.type(arguments[0]) === 'object') {\n      option = arguments[0];\n      refresh = arguments[1];\n      type = 'multiple';\n    } else if ($.type(arguments[0]) === 'string') {\n      option = arguments[0];\n      value = arguments[1];\n      refresh = arguments[2];\n\n      if (arguments[0] === 'responsive' && $.type(arguments[1]) === 'array') {\n        type = 'responsive';\n      } else if (typeof arguments[1] !== 'undefined') {\n        type = 'single';\n      }\n    }\n\n    if (type === 'single') {\n      _.options[option] = value;\n    } else if (type === 'multiple') {\n      $.each(option, function (opt, val) {\n        _.options[opt] = val;\n      });\n    } else if (type === 'responsive') {\n      for (item in value) {\n        if ($.type(_.options.responsive) !== 'array') {\n          _.options.responsive = [value[item]];\n        } else {\n          l = _.options.responsive.length - 1; // loop through the responsive object and splice out duplicates.\n\n          while (l >= 0) {\n            if (_.options.responsive[l].breakpoint === value[item].breakpoint) {\n              _.options.responsive.splice(l, 1);\n            }\n\n            l--;\n          }\n\n          _.options.responsive.push(value[item]);\n        }\n      }\n    }\n\n    if (refresh) {\n      _.unload();\n\n      _.reinit();\n    }\n  };\n\n  Slick.prototype.setPosition = function () {\n    var _ = this;\n\n    _.setDimensions();\n\n    _.setHeight();\n\n    if (_.options.fade === false) {\n      _.setCSS(_.getLeft(_.currentSlide));\n    } else {\n      _.setFade();\n    }\n\n    _.$slider.trigger('setPosition', [_]);\n  };\n\n  Slick.prototype.setProps = function () {\n    var _ = this,\n        bodyStyle = document.body.style;\n\n    _.positionProp = _.options.vertical === true ? 'top' : 'left';\n\n    if (_.positionProp === 'top') {\n      _.$slider.addClass('slick-vertical');\n    } else {\n      _.$slider.removeClass('slick-vertical');\n    }\n\n    if (bodyStyle.WebkitTransition !== undefined || bodyStyle.MozTransition !== undefined || bodyStyle.msTransition !== undefined) {\n      if (_.options.useCSS === true) {\n        _.cssTransitions = true;\n      }\n    }\n\n    if (_.options.fade) {\n      if (typeof _.options.zIndex === 'number') {\n        if (_.options.zIndex < 3) {\n          _.options.zIndex = 3;\n        }\n      } else {\n        _.options.zIndex = _.defaults.zIndex;\n      }\n    }\n\n    if (bodyStyle.OTransform !== undefined) {\n      _.animType = 'OTransform';\n      _.transformType = '-o-transform';\n      _.transitionType = 'OTransition';\n      if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;\n    }\n\n    if (bodyStyle.MozTransform !== undefined) {\n      _.animType = 'MozTransform';\n      _.transformType = '-moz-transform';\n      _.transitionType = 'MozTransition';\n      if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;\n    }\n\n    if (bodyStyle.webkitTransform !== undefined) {\n      _.animType = 'webkitTransform';\n      _.transformType = '-webkit-transform';\n      _.transitionType = 'webkitTransition';\n      if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;\n    }\n\n    if (bodyStyle.msTransform !== undefined) {\n      _.animType = 'msTransform';\n      _.transformType = '-ms-transform';\n      _.transitionType = 'msTransition';\n      if (bodyStyle.msTransform === undefined) _.animType = false;\n    }\n\n    if (bodyStyle.transform !== undefined && _.animType !== false) {\n      _.animType = 'transform';\n      _.transformType = 'transform';\n      _.transitionType = 'transition';\n    }\n\n    _.transformsEnabled = _.options.useTransform && _.animType !== null && _.animType !== false;\n  };\n\n  Slick.prototype.setSlideClasses = function (index) {\n    var _ = this,\n        centerOffset,\n        allSlides,\n        indexOffset,\n        remainder;\n\n    allSlides = _.$slider.find('.slick-slide').removeClass('slick-active slick-center slick-current').attr('aria-hidden', 'true');\n\n    _.$slides.eq(index).addClass('slick-current');\n\n    if (_.options.centerMode === true) {\n      var evenCoef = _.options.slidesToShow % 2 === 0 ? 1 : 0;\n      centerOffset = Math.floor(_.options.slidesToShow / 2);\n\n      if (_.options.infinite === true) {\n        if (index >= centerOffset && index <= _.slideCount - 1 - centerOffset) {\n          _.$slides.slice(index - centerOffset + evenCoef, index + centerOffset + 1).addClass('slick-active').attr('aria-hidden', 'false');\n        } else {\n          indexOffset = _.options.slidesToShow + index;\n          allSlides.slice(indexOffset - centerOffset + 1 + evenCoef, indexOffset + centerOffset + 2).addClass('slick-active').attr('aria-hidden', 'false');\n        }\n\n        if (index === 0) {\n          allSlides.eq(allSlides.length - 1 - _.options.slidesToShow).addClass('slick-center');\n        } else if (index === _.slideCount - 1) {\n          allSlides.eq(_.options.slidesToShow).addClass('slick-center');\n        }\n      }\n\n      _.$slides.eq(index).addClass('slick-center');\n    } else {\n      if (index >= 0 && index <= _.slideCount - _.options.slidesToShow) {\n        _.$slides.slice(index, index + _.options.slidesToShow).addClass('slick-active').attr('aria-hidden', 'false');\n      } else if (allSlides.length <= _.options.slidesToShow) {\n        allSlides.addClass('slick-active').attr('aria-hidden', 'false');\n      } else {\n        remainder = _.slideCount % _.options.slidesToShow;\n        indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;\n\n        if (_.options.slidesToShow == _.options.slidesToScroll && _.slideCount - index < _.options.slidesToShow) {\n          allSlides.slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder).addClass('slick-active').attr('aria-hidden', 'false');\n        } else {\n          allSlides.slice(indexOffset, indexOffset + _.options.slidesToShow).addClass('slick-active').attr('aria-hidden', 'false');\n        }\n      }\n    }\n\n    if (_.options.lazyLoad === 'ondemand' || _.options.lazyLoad === 'anticipated') {\n      _.lazyLoad();\n    }\n  };\n\n  Slick.prototype.setupInfinite = function () {\n    var _ = this,\n        i,\n        slideIndex,\n        infiniteCount;\n\n    if (_.options.fade === true) {\n      _.options.centerMode = false;\n    }\n\n    if (_.options.infinite === true && _.options.fade === false) {\n      slideIndex = null;\n\n      if (_.slideCount > _.options.slidesToShow) {\n        if (_.options.centerMode === true) {\n          infiniteCount = _.options.slidesToShow + 1;\n        } else {\n          infiniteCount = _.options.slidesToShow;\n        }\n\n        for (i = _.slideCount; i > _.slideCount - infiniteCount; i -= 1) {\n          slideIndex = i - 1;\n          $(_.$slides[slideIndex]).clone(true).attr('id', '').attr('data-slick-index', slideIndex - _.slideCount).prependTo(_.$slideTrack).addClass('slick-cloned');\n        }\n\n        for (i = 0; i < infiniteCount + _.slideCount; i += 1) {\n          slideIndex = i;\n          $(_.$slides[slideIndex]).clone(true).attr('id', '').attr('data-slick-index', slideIndex + _.slideCount).appendTo(_.$slideTrack).addClass('slick-cloned');\n        }\n\n        _.$slideTrack.find('.slick-cloned').find('[id]').each(function () {\n          $(this).attr('id', '');\n        });\n      }\n    }\n  };\n\n  Slick.prototype.interrupt = function (toggle) {\n    var _ = this;\n\n    if (!toggle) {\n      _.autoPlay();\n    }\n\n    _.interrupted = toggle;\n  };\n\n  Slick.prototype.selectHandler = function (event) {\n    var _ = this;\n\n    var targetElement = $(event.target).is('.slick-slide') ? $(event.target) : $(event.target).parents('.slick-slide');\n    var index = parseInt(targetElement.attr('data-slick-index'));\n    if (!index) index = 0;\n\n    if (_.slideCount <= _.options.slidesToShow) {\n      _.slideHandler(index, false, true);\n\n      return;\n    }\n\n    _.slideHandler(index);\n  };\n\n  Slick.prototype.slideHandler = function (index, sync, dontAnimate) {\n    var targetSlide,\n        animSlide,\n        oldSlide,\n        slideLeft,\n        targetLeft = null,\n        _ = this,\n        navTarget;\n\n    sync = sync || false;\n\n    if (_.animating === true && _.options.waitForAnimate === true) {\n      return;\n    }\n\n    if (_.options.fade === true && _.currentSlide === index) {\n      return;\n    }\n\n    if (sync === false) {\n      _.asNavFor(index);\n    }\n\n    targetSlide = index;\n    targetLeft = _.getLeft(targetSlide);\n    slideLeft = _.getLeft(_.currentSlide);\n    _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;\n\n    if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {\n      if (_.options.fade === false) {\n        targetSlide = _.currentSlide;\n\n        if (dontAnimate !== true) {\n          _.animateSlide(slideLeft, function () {\n            _.postSlide(targetSlide);\n          });\n        } else {\n          _.postSlide(targetSlide);\n        }\n      }\n\n      return;\n    } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > _.slideCount - _.options.slidesToScroll)) {\n      if (_.options.fade === false) {\n        targetSlide = _.currentSlide;\n\n        if (dontAnimate !== true) {\n          _.animateSlide(slideLeft, function () {\n            _.postSlide(targetSlide);\n          });\n        } else {\n          _.postSlide(targetSlide);\n        }\n      }\n\n      return;\n    }\n\n    if (_.options.autoplay) {\n      clearInterval(_.autoPlayTimer);\n    }\n\n    if (targetSlide < 0) {\n      if (_.slideCount % _.options.slidesToScroll !== 0) {\n        animSlide = _.slideCount - _.slideCount % _.options.slidesToScroll;\n      } else {\n        animSlide = _.slideCount + targetSlide;\n      }\n    } else if (targetSlide >= _.slideCount) {\n      if (_.slideCount % _.options.slidesToScroll !== 0) {\n        animSlide = 0;\n      } else {\n        animSlide = targetSlide - _.slideCount;\n      }\n    } else {\n      animSlide = targetSlide;\n    }\n\n    _.animating = true;\n\n    _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);\n\n    oldSlide = _.currentSlide;\n    _.currentSlide = animSlide;\n\n    _.setSlideClasses(_.currentSlide);\n\n    if (_.options.asNavFor) {\n      navTarget = _.getNavTarget();\n      navTarget = navTarget.slick('getSlick');\n\n      if (navTarget.slideCount <= navTarget.options.slidesToShow) {\n        navTarget.setSlideClasses(_.currentSlide);\n      }\n    }\n\n    _.updateDots();\n\n    _.updateArrows();\n\n    if (_.options.fade === true) {\n      if (dontAnimate !== true) {\n        _.fadeSlideOut(oldSlide);\n\n        _.fadeSlide(animSlide, function () {\n          _.postSlide(animSlide);\n        });\n      } else {\n        _.postSlide(animSlide);\n      }\n\n      _.animateHeight();\n\n      return;\n    }\n\n    if (dontAnimate !== true) {\n      _.animateSlide(targetLeft, function () {\n        _.postSlide(animSlide);\n      });\n    } else {\n      _.postSlide(animSlide);\n    }\n  };\n\n  Slick.prototype.startLoad = function () {\n    var _ = this;\n\n    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n      _.$prevArrow.hide();\n\n      _.$nextArrow.hide();\n    }\n\n    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n      _.$dots.hide();\n    }\n\n    _.$slider.addClass('slick-loading');\n  };\n\n  Slick.prototype.swipeDirection = function () {\n    var xDist,\n        yDist,\n        r,\n        swipeAngle,\n        _ = this;\n\n    xDist = _.touchObject.startX - _.touchObject.curX;\n    yDist = _.touchObject.startY - _.touchObject.curY;\n    r = Math.atan2(yDist, xDist);\n    swipeAngle = Math.round(r * 180 / Math.PI);\n\n    if (swipeAngle < 0) {\n      swipeAngle = 360 - Math.abs(swipeAngle);\n    }\n\n    if (swipeAngle <= 45 && swipeAngle >= 0) {\n      return _.options.rtl === false ? 'left' : 'right';\n    }\n\n    if (swipeAngle <= 360 && swipeAngle >= 315) {\n      return _.options.rtl === false ? 'left' : 'right';\n    }\n\n    if (swipeAngle >= 135 && swipeAngle <= 225) {\n      return _.options.rtl === false ? 'right' : 'left';\n    }\n\n    if (_.options.verticalSwiping === true) {\n      if (swipeAngle >= 35 && swipeAngle <= 135) {\n        return 'down';\n      } else {\n        return 'up';\n      }\n    }\n\n    return 'vertical';\n  };\n\n  Slick.prototype.swipeEnd = function (event) {\n    var _ = this,\n        slideCount,\n        direction;\n\n    _.dragging = false;\n    _.swiping = false;\n\n    if (_.scrolling) {\n      _.scrolling = false;\n      return false;\n    }\n\n    _.interrupted = false;\n    _.shouldClick = _.touchObject.swipeLength > 10 ? false : true;\n\n    if (_.touchObject.curX === undefined) {\n      return false;\n    }\n\n    if (_.touchObject.edgeHit === true) {\n      _.$slider.trigger('edge', [_, _.swipeDirection()]);\n    }\n\n    if (_.touchObject.swipeLength >= _.touchObject.minSwipe) {\n      direction = _.swipeDirection();\n\n      switch (direction) {\n        case 'left':\n        case 'down':\n          slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide + _.getSlideCount()) : _.currentSlide + _.getSlideCount();\n          _.currentDirection = 0;\n          break;\n\n        case 'right':\n        case 'up':\n          slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide - _.getSlideCount()) : _.currentSlide - _.getSlideCount();\n          _.currentDirection = 1;\n          break;\n\n        default:\n      }\n\n      if (direction != 'vertical') {\n        _.slideHandler(slideCount);\n\n        _.touchObject = {};\n\n        _.$slider.trigger('swipe', [_, direction]);\n      }\n    } else {\n      if (_.touchObject.startX !== _.touchObject.curX) {\n        _.slideHandler(_.currentSlide);\n\n        _.touchObject = {};\n      }\n    }\n  };\n\n  Slick.prototype.swipeHandler = function (event) {\n    var _ = this;\n\n    if (_.options.swipe === false || 'ontouchend' in document && _.options.swipe === false) {\n      return;\n    } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {\n      return;\n    }\n\n    _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ? event.originalEvent.touches.length : 1;\n    _.touchObject.minSwipe = _.listWidth / _.options.touchThreshold;\n\n    if (_.options.verticalSwiping === true) {\n      _.touchObject.minSwipe = _.listHeight / _.options.touchThreshold;\n    }\n\n    switch (event.data.action) {\n      case 'start':\n        _.swipeStart(event);\n\n        break;\n\n      case 'move':\n        _.swipeMove(event);\n\n        break;\n\n      case 'end':\n        _.swipeEnd(event);\n\n        break;\n    }\n  };\n\n  Slick.prototype.swipeMove = function (event) {\n    var _ = this,\n        edgeWasHit = false,\n        curLeft,\n        swipeDirection,\n        swipeLength,\n        positionOffset,\n        touches,\n        verticalSwipeLength;\n\n    touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;\n\n    if (!_.dragging || _.scrolling || touches && touches.length !== 1) {\n      return false;\n    }\n\n    curLeft = _.getLeft(_.currentSlide);\n    _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;\n    _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;\n    _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));\n    verticalSwipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));\n\n    if (!_.options.verticalSwiping && !_.swiping && verticalSwipeLength > 4) {\n      _.scrolling = true;\n      return false;\n    }\n\n    if (_.options.verticalSwiping === true) {\n      _.touchObject.swipeLength = verticalSwipeLength;\n    }\n\n    swipeDirection = _.swipeDirection();\n\n    if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {\n      _.swiping = true;\n      event.preventDefault();\n    }\n\n    positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);\n\n    if (_.options.verticalSwiping === true) {\n      positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;\n    }\n\n    swipeLength = _.touchObject.swipeLength;\n    _.touchObject.edgeHit = false;\n\n    if (_.options.infinite === false) {\n      if (_.currentSlide === 0 && swipeDirection === 'right' || _.currentSlide >= _.getDotCount() && swipeDirection === 'left') {\n        swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;\n        _.touchObject.edgeHit = true;\n      }\n    }\n\n    if (_.options.vertical === false) {\n      _.swipeLeft = curLeft + swipeLength * positionOffset;\n    } else {\n      _.swipeLeft = curLeft + swipeLength * (_.$list.height() / _.listWidth) * positionOffset;\n    }\n\n    if (_.options.verticalSwiping === true) {\n      _.swipeLeft = curLeft + swipeLength * positionOffset;\n    }\n\n    if (_.options.fade === true || _.options.touchMove === false) {\n      return false;\n    }\n\n    if (_.animating === true) {\n      _.swipeLeft = null;\n      return false;\n    }\n\n    _.setCSS(_.swipeLeft);\n  };\n\n  Slick.prototype.swipeStart = function (event) {\n    var _ = this,\n        touches;\n\n    _.interrupted = true;\n\n    if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {\n      _.touchObject = {};\n      return false;\n    }\n\n    if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {\n      touches = event.originalEvent.touches[0];\n    }\n\n    _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;\n    _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;\n    _.dragging = true;\n  };\n\n  Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function () {\n    var _ = this;\n\n    if (_.$slidesCache !== null) {\n      _.unload();\n\n      _.$slideTrack.children(this.options.slide).detach();\n\n      _.$slidesCache.appendTo(_.$slideTrack);\n\n      _.reinit();\n    }\n  };\n\n  Slick.prototype.unload = function () {\n    var _ = this;\n\n    $('.slick-cloned', _.$slider).remove();\n\n    if (_.$dots) {\n      _.$dots.remove();\n    }\n\n    if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {\n      _.$prevArrow.remove();\n    }\n\n    if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {\n      _.$nextArrow.remove();\n    }\n\n    _.$slides.removeClass('slick-slide slick-active slick-visible slick-current').attr('aria-hidden', 'true').css('width', '');\n  };\n\n  Slick.prototype.unslick = function (fromBreakpoint) {\n    var _ = this;\n\n    _.$slider.trigger('unslick', [_, fromBreakpoint]);\n\n    _.destroy();\n  };\n\n  Slick.prototype.updateArrows = function () {\n    var _ = this,\n        centerOffset;\n\n    centerOffset = Math.floor(_.options.slidesToShow / 2);\n\n    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow && !_.options.infinite) {\n      _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n\n      _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n\n      if (_.currentSlide === 0) {\n        _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\n\n        _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n      } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {\n        _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\n\n        _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n      } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {\n        _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\n\n        _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n      }\n    }\n  };\n\n  Slick.prototype.updateDots = function () {\n    var _ = this;\n\n    if (_.$dots !== null) {\n      _.$dots.find('li').removeClass('slick-active').end();\n\n      _.$dots.find('li').eq(Math.floor(_.currentSlide / _.options.slidesToScroll)).addClass('slick-active');\n    }\n  };\n\n  Slick.prototype.visibility = function () {\n    var _ = this;\n\n    if (_.options.autoplay) {\n      if (document[_.hidden]) {\n        _.interrupted = true;\n      } else {\n        _.interrupted = false;\n      }\n    }\n  };\n\n  $.fn.slick = function () {\n    var _ = this,\n        opt = arguments[0],\n        args = Array.prototype.slice.call(arguments, 1),\n        l = _.length,\n        i,\n        ret;\n\n    for (i = 0; i < l; i++) {\n      if (_typeof(opt) == 'object' || typeof opt == 'undefined') _[i].slick = new Slick(_[i], opt);else ret = _[i].slick[opt].apply(_[i].slick, args);\n      if (typeof ret != 'undefined') return ret;\n    }\n\n    return _;\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./package/resources/js/website/slick.js\n");

/***/ }),

/***/ "./package/resources/js/website/sticky.js":
/*!************************************************!*\
  !*** ./package/resources/js/website/sticky.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(__webpack_provided_window_dot_jQuery) {// Generated by CoffeeScript 1.9.2\n\n/**\n@license Sticky-kit v1.1.2 | WTFPL | Leaf Corcoran 2015 | http://leafo.net\n */\n(function () {\n  var $, win;\n  $ = this.jQuery || __webpack_provided_window_dot_jQuery;\n  win = $(window);\n\n  $.fn.stick_in_parent = function (opts) {\n    var doc, elm, enable_bottoming, fn, i, inner_scrolling, len, manual_spacer, offset_top, parent_selector, recalc_every, sticky_class;\n\n    if (opts == null) {\n      opts = {};\n    }\n\n    sticky_class = opts.sticky_class, inner_scrolling = opts.inner_scrolling, recalc_every = opts.recalc_every, parent_selector = opts.parent, offset_top = opts.offset_top, manual_spacer = opts.spacer, enable_bottoming = opts.bottoming;\n\n    if (offset_top == null) {\n      offset_top = 0;\n    }\n\n    if (parent_selector == null) {\n      parent_selector = void 0;\n    }\n\n    if (inner_scrolling == null) {\n      inner_scrolling = true;\n    }\n\n    if (sticky_class == null) {\n      sticky_class = \"is_stuck\";\n    }\n\n    doc = $(document);\n\n    if (enable_bottoming == null) {\n      enable_bottoming = true;\n    }\n\n    fn = function fn(elm, padding_bottom, parent_top, parent_height, top, height, el_float, detached) {\n      var bottomed, _detach, fixed, last_pos, last_scroll_height, offset, parent, recalc, recalc_and_tick, recalc_counter, spacer, tick;\n\n      if (elm.data(\"sticky_kit\")) {\n        return;\n      }\n\n      elm.data(\"sticky_kit\", true);\n      last_scroll_height = doc.height();\n      parent = elm.parent();\n\n      if (parent_selector != null) {\n        parent = parent.closest(parent_selector);\n      }\n\n      if (!parent.length) {\n        throw \"failed to find stick parent\";\n      }\n\n      fixed = false;\n      bottomed = false;\n      spacer = manual_spacer != null ? manual_spacer && elm.closest(manual_spacer) : $(\"<div />\");\n\n      if (spacer) {\n        spacer.css('position', elm.css('position'));\n      }\n\n      recalc = function recalc() {\n        var border_top, padding_top, restore;\n\n        if (detached) {\n          return;\n        }\n\n        last_scroll_height = doc.height();\n        border_top = parseInt(parent.css(\"border-top-width\"), 10);\n        padding_top = parseInt(parent.css(\"padding-top\"), 10);\n        padding_bottom = parseInt(parent.css(\"padding-bottom\"), 10);\n        parent_top = parent.offset().top + border_top + padding_top;\n        parent_height = parent.height();\n\n        if (fixed) {\n          fixed = false;\n          bottomed = false;\n\n          if (manual_spacer == null) {\n            elm.insertAfter(spacer);\n            spacer.detach();\n          }\n\n          elm.css({\n            position: \"\",\n            top: \"\",\n            width: \"\",\n            bottom: \"\"\n          }).removeClass(sticky_class);\n          restore = true;\n        }\n\n        top = elm.offset().top - (parseInt(elm.css(\"margin-top\"), 10) || 0) - offset_top;\n        height = elm.outerHeight(true);\n        el_float = elm.css(\"float\");\n\n        if (spacer) {\n          spacer.css({\n            width: elm.outerWidth(true),\n            height: height,\n            display: elm.css(\"display\"),\n            \"vertical-align\": elm.css(\"vertical-align\"),\n            \"float\": el_float\n          });\n        }\n\n        if (restore) {\n          return tick();\n        }\n      };\n\n      recalc();\n\n      if (height === parent_height) {\n        return;\n      }\n\n      last_pos = void 0;\n      offset = offset_top;\n      recalc_counter = recalc_every;\n\n      tick = function tick() {\n        var css, delta, recalced, scroll, will_bottom, win_height;\n\n        if (detached) {\n          return;\n        }\n\n        recalced = false;\n\n        if (recalc_counter != null) {\n          recalc_counter -= 1;\n\n          if (recalc_counter <= 0) {\n            recalc_counter = recalc_every;\n            recalc();\n            recalced = true;\n          }\n        }\n\n        if (!recalced && doc.height() !== last_scroll_height) {\n          recalc();\n          recalced = true;\n        }\n\n        scroll = win.scrollTop();\n\n        if (last_pos != null) {\n          delta = scroll - last_pos;\n        }\n\n        last_pos = scroll;\n\n        if (fixed) {\n          if (enable_bottoming) {\n            will_bottom = scroll + height + offset > parent_height + parent_top;\n\n            if (bottomed && !will_bottom) {\n              bottomed = false;\n              elm.css({\n                position: \"fixed\",\n                bottom: \"\",\n                top: offset\n              }).trigger(\"sticky_kit:unbottom\");\n            }\n          }\n\n          if (scroll < top) {\n            fixed = false;\n            offset = offset_top;\n\n            if (manual_spacer == null) {\n              if (el_float === \"left\" || el_float === \"right\") {\n                elm.insertAfter(spacer);\n              }\n\n              spacer.detach();\n            }\n\n            css = {\n              position: \"\",\n              width: \"\",\n              top: \"\"\n            };\n            elm.css(css).removeClass(sticky_class).trigger(\"sticky_kit:unstick\");\n          }\n\n          if (inner_scrolling) {\n            win_height = win.height();\n\n            if (height + offset_top > win_height) {\n              if (!bottomed) {\n                offset -= delta;\n                offset = Math.max(win_height - height, offset);\n                offset = Math.min(offset_top, offset);\n\n                if (fixed) {\n                  elm.css({\n                    top: offset + \"px\"\n                  });\n                }\n              }\n            }\n          }\n        } else {\n          if (scroll > top) {\n            fixed = true;\n            css = {\n              position: \"fixed\",\n              top: offset\n            };\n            css.width = elm.css(\"box-sizing\") === \"border-box\" ? elm.outerWidth() + \"px\" : elm.width() + \"px\";\n            elm.css(css).addClass(sticky_class);\n\n            if (manual_spacer == null) {\n              elm.after(spacer);\n\n              if (el_float === \"left\" || el_float === \"right\") {\n                spacer.append(elm);\n              }\n            }\n\n            elm.trigger(\"sticky_kit:stick\");\n          }\n        }\n\n        if (fixed && enable_bottoming) {\n          if (will_bottom == null) {\n            will_bottom = scroll + height + offset > parent_height + parent_top;\n          }\n\n          if (!bottomed && will_bottom) {\n            bottomed = true;\n\n            if (parent.css(\"position\") === \"static\") {\n              parent.css({\n                position: \"relative\"\n              });\n            }\n\n            return elm.css({\n              position: \"absolute\",\n              bottom: padding_bottom,\n              top: \"auto\"\n            }).trigger(\"sticky_kit:bottom\");\n          }\n        }\n      };\n\n      recalc_and_tick = function recalc_and_tick() {\n        recalc();\n        return tick();\n      };\n\n      _detach = function detach() {\n        detached = true;\n        win.off(\"touchmove\", tick);\n        win.off(\"scroll\", tick);\n        win.off(\"resize\", recalc_and_tick);\n        $(document.body).off(\"sticky_kit:recalc\", recalc_and_tick);\n        elm.off(\"sticky_kit:detach\", _detach);\n        elm.removeData(\"sticky_kit\");\n        elm.css({\n          position: \"\",\n          bottom: \"\",\n          top: \"\",\n          width: \"\"\n        });\n        parent.position(\"position\", \"\");\n\n        if (fixed) {\n          if (manual_spacer == null) {\n            if (el_float === \"left\" || el_float === \"right\") {\n              elm.insertAfter(spacer);\n            }\n\n            spacer.remove();\n          }\n\n          return elm.removeClass(sticky_class);\n        }\n      };\n\n      win.on(\"touchmove\", tick);\n      win.on(\"scroll\", tick);\n      win.on(\"resize\", recalc_and_tick);\n      $(document.body).on(\"sticky_kit:recalc\", recalc_and_tick);\n      elm.on(\"sticky_kit:detach\", _detach);\n      return setTimeout(tick, 0);\n    };\n\n    for (i = 0, len = this.length; i < len; i++) {\n      elm = this[i];\n      fn($(elm));\n    }\n\n    return this;\n  };\n}).call(this);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./package/resources/js/website/sticky.js\n");

/***/ }),

/***/ "./package/resources/js/website/yt.js":
/*!********************************************!*\
  !*** ./package/resources/js/website/yt.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(jQuery) {function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n * YoutubeBackground - A wrapper for the Youtube API - Great for fullscreen background videos or just regular videos.\n *\n * Licensed under the MIT license:\n *   http://www.opensource.org/licenses/mit-license.php\n *\n *\n * Version:  1.0.5\n *\n */\n// Chain of Responsibility pattern. Creates base class that can be overridden.\nif (typeof Object.create !== \"function\") {\n  Object.create = function (obj) {\n    function F() {}\n\n    F.prototype = obj;\n    return new F();\n  };\n}\n\n(function ($, window, document) {\n  var loadAPI = function loadAPI(callback) {\n    // Load Youtube API\n    var tag = document.createElement('script'),\n        head = document.getElementsByTagName('head')[0];\n\n    if (window.location.origin == 'file://') {\n      tag.src = 'http://www.youtube.com/iframe_api';\n    } else {\n      tag.src = '//www.youtube.com/iframe_api';\n    }\n\n    head.appendChild(tag); // Clean up Tags.\n\n    head = null;\n    tag = null;\n    iframeIsReady(callback);\n  },\n      iframeIsReady = function iframeIsReady(callback) {\n    // Listen for Gobal YT player callback\n    if (typeof YT === 'undefined' && typeof window.loadingPlayer === 'undefined') {\n      // Prevents Ready Event from being called twice\n      window.loadingPlayer = true; // Creates deferred so, other players know when to wait.\n\n      window.dfd = $.Deferred();\n\n      window.onYouTubeIframeAPIReady = function () {\n        window.onYouTubeIframeAPIReady = null;\n        window.dfd.resolve(\"done\");\n        callback();\n      };\n    } else if ((typeof YT === \"undefined\" ? \"undefined\" : _typeof(YT)) === 'object') {\n      callback();\n    } else {\n      window.dfd.done(function (name) {\n        callback();\n      });\n    }\n  }; // YTPlayer Object\n\n\n  YTPlayer = {\n    player: null,\n    // Defaults\n    defaults: {\n      ratio: 16 / 9,\n      videoId: 'LSmgKRx5pBo',\n      mute: true,\n      repeat: true,\n      width: $(window).width(),\n      playButtonClass: 'YTPlayer-play',\n      pauseButtonClass: 'YTPlayer-pause',\n      muteButtonClass: 'YTPlayer-mute',\n      volumeUpClass: 'YTPlayer-volume-up',\n      volumeDownClass: 'YTPlayer-volume-down',\n      start: 0,\n      pauseOnScroll: false,\n      fitToBackground: true,\n      playerVars: {\n        iv_load_policy: 3,\n        modestbranding: 1,\n        autoplay: 1,\n        controls: 0,\n        showinfo: 0,\n        wmode: 'opaque',\n        branding: 0,\n        autohide: 0\n      },\n      events: null\n    },\n\n    /**\n     * @function init\n     * Intializes YTPlayer object\n     */\n    init: function init(node, userOptions) {\n      var self = this;\n      self.userOptions = userOptions;\n      self.$body = $('body'), self.$node = $(node), self.$window = $(window); // Setup event defaults with the reference to this\n\n      self.defaults.events = {\n        'onReady': function onReady(e) {\n          self.onPlayerReady(e); // setup up pause on scroll\n\n          if (self.options.pauseOnScroll) {\n            self.pauseOnScroll();\n          } // Callback for when finished\n\n\n          if (typeof self.options.callback == 'function') {\n            self.options.callback.call(this);\n          }\n        },\n        'onStateChange': function onStateChange(e) {\n          if (e.data === 1) {\n            self.$node.find('img').fadeOut(400);\n            self.$node.addClass('loaded');\n          } else if (e.data === 0 && self.options.repeat) {\n            // video ended and repeat option is set true\n            self.player.seekTo(self.options.start);\n          }\n        }\n      };\n      self.options = $.extend(true, {}, self.defaults, self.userOptions);\n      self.options.height = Math.ceil(self.options.width / self.options.ratio);\n      self.ID = new Date().getTime();\n      self.holderID = 'YTPlayer-ID-' + self.ID;\n\n      if (self.options.fitToBackground) {\n        self.createBackgroundVideo();\n      } else {\n        self.createContainerVideo();\n      } // Listen for Resize Event\n\n\n      self.$window.on('resize.YTplayer' + self.ID, function () {\n        self.resize(self);\n      });\n      loadAPI(self.onYouTubeIframeAPIReady.bind(self));\n      self.resize(self);\n      return self;\n    },\n\n    /**\n     * @function pauseOnScroll\n     * Adds window events to pause video on scroll.\n     */\n    pauseOnScroll: function pauseOnScroll() {\n      var self = this;\n      self.$window.on('scroll.YTplayer' + self.ID, function () {\n        var state = self.player.getPlayerState();\n\n        if (state === 1) {\n          self.player.pauseVideo();\n        }\n      });\n      self.$window.scrollStopped(function () {\n        var state = self.player.getPlayerState();\n\n        if (state === 2) {\n          self.player.playVideo();\n        }\n      });\n    },\n\n    /**\n     * @function createContainerVideo\n     * Adds HTML for video in a container\n     */\n    createContainerVideo: function createContainerVideo() {\n      var self = this;\n      /*jshint multistr: true */\n\n      var $YTPlayerString = $('<div id=\"ytplayer-container' + self.ID + '\" >\\\n                                    <div id=\"' + self.holderID + '\" class=\"ytplayer-player-inline\"></div> \\\n                                    </div> \\\n                                    <div id=\"ytplayer-shield\" class=\"ytplayer-shield\"></div>');\n      self.$node.append($YTPlayerString);\n      self.$YTPlayerString = $YTPlayerString;\n      $YTPlayerString = null;\n    },\n\n    /**\n     * @function createBackgroundVideo\n     * Adds HTML for video background\n     */\n    createBackgroundVideo: function createBackgroundVideo() {\n      /*jshint multistr: true */\n      var self = this,\n          $YTPlayerString = $('<div id=\"ytplayer-container' + self.ID + '\" class=\"ytplayer-container background\">\\\n                                    <div id=\"' + self.holderID + '\" class=\"ytplayer-player\"></div>\\\n                                    </div>\\\n                                    <div id=\"ytplayer-shield\" class=\"ytplayer-shield\"></div>');\n      self.$node.append($YTPlayerString);\n      self.$YTPlayerString = $YTPlayerString;\n      $YTPlayerString = null;\n    },\n\n    /**\n     * @function resize\n     * Resize event to change video size\n     */\n    resize: function resize(self) {\n      //var self = this;\n      var container = $(window);\n\n      if (!self.options.fitToBackground) {\n        container = self.$node;\n      }\n\n      var width = container.width(),\n          pWidth,\n          // player width, to be defined\n      height = container.height(),\n          pHeight,\n          // player height, tbd\n      $YTPlayerPlayer = $('#' + self.holderID); // when screen aspect ratio differs from video, video must center and underlay one dimension\n\n      if (width / self.options.ratio < height) {\n        pWidth = Math.ceil(height * self.options.ratio); // get new player width\n\n        $YTPlayerPlayer.width(pWidth).height(height).css({\n          left: (width - pWidth) / 2,\n          top: 0\n        }); // player width is greater, offset left; reset top\n      } else {\n        // new video width < window width (gap to right)\n        pHeight = Math.ceil(width / self.options.ratio); // get new player height\n\n        $YTPlayerPlayer.width(width).height(pHeight).css({\n          left: 0,\n          top: (height - pHeight) / 2\n        }); // player height is greater, offset top; reset left\n      }\n\n      $YTPlayerPlayer = null;\n      container = null;\n    },\n\n    /**\n     * @function onYouTubeIframeAPIReady\n     * @ params {object} YTPlayer object for access to options\n     * Youtube API calls this function when the player is ready.\n     */\n    onYouTubeIframeAPIReady: function onYouTubeIframeAPIReady() {\n      var self = this;\n      self.player = new window.YT.Player(self.holderID, self.options);\n    },\n\n    /**\n     * @function onPlayerReady\n     * @ params {event} window event from youtube player\n     */\n    onPlayerReady: function onPlayerReady(e) {\n      if (this.options.mute) {\n        e.target.mute();\n      }\n    },\n\n    /**\n     * @function getPlayer\n     * returns youtube player\n     */\n    getPlayer: function getPlayer() {\n      return this.player;\n    },\n\n    /**\n     * @function destroy\n     * destroys all!\n     */\n    destroy: function destroy() {\n      var self = this;\n      self.$node.removeData('yt-init').removeData('ytPlayer').removeClass('loaded');\n      self.$YTPlayerString.remove();\n      $(window).off('resize.YTplayer' + self.ID);\n      $(window).off('scroll.YTplayer' + self.ID);\n      self.$body = null;\n      self.$node = null;\n      self.$YTPlayerString = null;\n      self.player.destroy();\n      self.player = null;\n    }\n  }; // Scroll Stopped event.\n\n  $.fn.scrollStopped = function (callback) {\n    var $this = $(this),\n        self = this;\n    $this.scroll(function () {\n      if ($this.data('scrollTimeout')) {\n        clearTimeout($this.data('scrollTimeout'));\n      }\n\n      $this.data('scrollTimeout', setTimeout(callback, 250, self));\n    });\n  }; // Create plugin\n\n\n  $.fn.YTPlayer = function (options) {\n    return this.each(function () {\n      var el = this;\n      $(el).data(\"yt-init\", true);\n      var player = Object.create(YTPlayer);\n      player.init(el, options);\n      $.data(el, \"ytPlayer\", player);\n    });\n  };\n})(jQuery, window, document);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./package/resources/js/website/yt.js\n");

/***/ }),

/***/ 1:
/*!****************************************************!*\
  !*** multi ./package/resources/js/website/main.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/janjanssens/Documents/Sites/Github/beheerpaneel-package-dev/package/resources/js/website/main.js */"./package/resources/js/website/main.js");


/***/ })

/******/ });